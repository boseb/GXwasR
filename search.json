[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement banabithi.bose@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/GXwasR_PRS.html","id":"call-gxwasr-library-and-load-example-datasets","dir":"Articles","previous_headings":"","what":"Call GXwasR library and load example datasets:","title":"Computing Polygenic Risk Score using GXwasR","text":"","code":"## Call GXwasR library library(GXwasR)"},{"path":[]},{"path":"/articles/GXwasR_PRS.html","id":"about-computeprs","dir":"Articles","previous_headings":"Computing standard PRS using ComputePRS():","what":"About ComputePRS()","title":"Computing Polygenic Risk Score using GXwasR","text":"","code":"help(ComputePRS, package = GXwasR) #> ComputePRS: Computing polygenic risk score (PRS) #>  #> Description: #>  #>      This function calculates the polygenic risk score, which is the #>      total of allele counts (genotypes) weighted by estimated effect #>      sizes from genome-wide association studies. It uses C+T filtering #>      techniques. The users could perform clumping procedure #>      choromosome-wise and genome-wide. Also, the function offers the #>      choice of including several genetic principal components along #>      with other covariates. Using this function, users have the freedom #>      to experiment with various clumping and thresholding arrangements #>      to test a wide range of various parameter values. #>  #> Usage: #>  #>      ComputePRS( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        summarystat, #>        phenofile, #>        covarfile = NULL, #>        effectsize = c(\"BETA\", \"OR\"), #>        ldclump = FALSE, #>        LDreference, #>        clump_p1, #>        clump_p2, #>        clump_r2, #>        clump_kb, #>        byCHR = TRUE, #>        pthreshold = c(0.001, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5), #>        highLD_regions, #>        ld_prunning = FALSE, #>        window_size = 50, #>        step_size = 5, #>        r2_threshold = 0.02, #>        nPC = 6, #>        pheno_type = \"binary\" #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the all the input #>           files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is tempdir(). #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files for the genotype data i.e., the target data #>           based on which clumping procedure will be performed. This #>           file needs to be in DataDir. If your target data are small #>           (e.g. N < 500) then you can use the 1000 Genomes Project #>           samples. Make sure to use the population that most closely #>           reflects represents the base sample. #>  #> summarystat: A dataframe object with GWAS summary statistics. #>  #>           The mandatory column headers in this dataframe are: #>  #>             • 'CHR'(Chromosome code) #>  #>             • 'BP'(Basepair position) #>  #>             • 'A1' (effect allele) #>  #>             • 'SNP' (i.e., SNP identifier) #>  #>             • 'BETA' or 'OR' (i.e., effect-size or logarithm of odds #>               ratio) #>  #>             • 'P' (i.e., p-values). #>  #>           Special Notes: The first three columns needed to be 'SNP', #>           'A1' and 'BETA' or 'OR'. #>  #> phenofile: A character string, specifying the name of the mandatory #>           phenotype file. This is a plain text file with no header #>           line; columns family ID, individual ID and phenotype columns. #>           For binary trait, the phenotypic value should be coded as 0 #>           or 1, then it will be recognized as a case-control study (0 #>           for controls and 1 for cases). Missing value should be #>           represented by \"-9\" or \"NA\". The interested phenotype column #>           should be labeled as \"Pheno1\". This file needs to be in #>           'DataDir'. #>  #> covarfile: A character string, specifying the name of the covariate #>           file which is a plain .text file with no header line; columns #>           are family ID, individual ID and the covariates. The default #>           is 'NULL'. This file needs to be in 'DataDir'. #>  #> effectsize: Boolean value, 'BETA' or 'OR', specifying the type of the #>           GWAS effectsize. The default is 'BETA'. #>  #>  ldclump: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           perform clumping or not. #>  #> LDreference: A character string, specifying the prefix of the PLINK #>           files of the population reference panel of the same ancestry, #>           and ideally the one that was used for imputing your target #>           dataset. These files should be in 'DataDir'. #>  #> clump_p1: Numeric value, specifying the significance threshold for #>           index SNPs if 'ldclump' was set to be 'TRUE'. The default is #>           0.0001. #>  #> clump_p2: Numeric value, specifying the secondary significance #>           threshold for clumped SNPs if 'ldclump' was set to be 'TRUE'. #>           The default is 0.01 #>  #> clump_r2: Numeric value, specifying the linkage disequilibrium (LD) #>           threshold for clumping if 'ldclump' was set to be 'TRUE'. The #>           default is 0.50. #>  #> clump_kb: Integer value, specifying the physical distance threshold in #>           base-pair for clumping if 'ldclump' was set to be 'TRUE'. The #>           default is 250. #>  #>    byCHR: Boolean value, 'TRUE' or 'FALSE', specifying chromosome-wise #>           clumping procedure if 'ldclump' was set to be 'TRUE'. The #>           default is 'TRUE' #>  #> pthreshold: Numeric vector, containing several p value thresholds to #>           maximize predictive ability of the derived polygenic scores. #>  #> highLD_regions: Character string, specifying the .txt file name with #>           known genomic regions with high LD. The default is 'NULL'. #>  #> ld_prunning: Boolean value, 'TRUE' or 'FALSE' for LD-based filtering #>           for computing genetic PC as covariates. #>  #> window_size: Integer value, specifying a window size in variant count #>           or kilobase for LD-based filtering in computing genetic PC. #>           The default is 50. #>  #> step_size: Integer value, specifying a variant count to shift the #>           window at the end of each step for LD filtering in computing #>           genetic PCs. The default is 5. #>  #> r2_threshold: Numeric value between 0 to 1 of pairwise r^2 threshold #>           for LD-based filtering in computing genetic PCs. The default #>           is 0.02. #>  #>      nPC: Positive integer value, specifying the number of genetic PCs #>           to be included as predictor in the PRS model fit. The default #>           is 6. #>  #> pheno_type: Boolean value, ‘binary’ or ‘quantitative’, specifying the #>           type of the trait. The default is ‘binary’. #>  #> Value: #>  #>      A list object containing a dataframe a numeric value, a GeneticPC #>      plot (if requested), and a PRS plot. The dataframe,PRS, contains #>      four mandatory columns, such as, IID (i.e., Individual ID), FID #>      (i.e., Family ID), Pheno1 (i.e., the trait for PRS) and Score #>      (i.e., the best PRS). Other columns of covariates could be there. #>      The numeric value, BestP contains the threshold of of the best #>      p-value for the best pRS model fit. #>  #>      Also, the function produces several plots such as p-value #>      thresholds vs PRS model fit and PRS distribution among male and #>      females. For case-control data, it shows PRS distribution among #>      cases and controls and ROC curves as well. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      data(\"Summary_Stat_Ex1\", package = \"GXwasR\") #>      data(\"Example_phenofile\", package = \"GXwasR\") #>      data(\"Example_covarfile\", package = \"GXwasR\") #>      data(\"Example_pthresoldfile\", package = \"GXwasR\") #>      data(\"highLD_hg19\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      summarystat <- Summary_Stat_Ex1[, c(2, 4, 7, 1, 3, 12)] #>      phenofile <- Example_phenofile # Cannot be NULL #>      # The interested phenotype column should be labeled as \"Pheno1\". #>      covarfile <- Example_covarfile #>      clump_p1 <- 0.0001 #>      clump_p2 <- 0.0001 #>      clump_kb <- 500 #>      clump_r2 <- 0.5 #>      byCHR <- TRUE #>      pthreshold <- Example_pthresoldfile$Threshold #>      ld_prunning <- TRUE #>      highLD_regions <- highLD_hg19 #>      window_size <- 50 #>      step_size <- 5 #>      r2_threshold <- 0.02 #>      nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification. #>      pheno_type <- \"binary\" #>       #>      PRSresult <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile, #>          effectsize = \"BETA\", LDreference = \"GXwasR_example\", ldclump = FALSE, clump_p1, clump_p2, #>          clump_r2, clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions, #>          ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6, #>          pheno_type = \"binary\" #>      ) #>       #>      ## This table shows 10 samples with phenotype, covariates and a PRS column. #>      PRS <- PRSresult$PRS #>      PRS[seq_len(10), ] #>      ## The best threshold #>      BestPvalue <- PRSresult$BestP$Threshold #>      BestPvalue"},{"path":"/articles/GXwasR_PRS.html","id":"running-computeprs","dir":"Articles","previous_headings":"Computing standard PRS using ComputePRS():","what":"Running ComputePRS()","title":"Computing Polygenic Risk Score using GXwasR","text":"","code":"# Running data(Summary_Stat_Ex1) data(Example_phenofile) data(Example_covarfile) data(Example_pthresoldfile) data(highLD_hg19) DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" summarystat <- Summary_Stat_Ex1[, c(2, 4, 7, 1, 3, 12)] phenofile <- Example_phenofile # Cannot be NULL, the interested phenotype column should be labeled as \"Pheno1\". covarfile <- Example_covarfile clump_p1 <- 0.0001 clump_p2 <- 0.0001 clump_kb <- 500 clump_r2 <- 0.5 byCHR <- TRUE pthreshold <- Example_pthresoldfile$Threshold ld_prunning <- TRUE highLD_regions <- highLD_hg19 window_size <- 50 step_size <- 5 r2_threshold <- 0.02 nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification. pheno_type <- \"binary\" ldclump <- FALSE pheno_type <- \"binary\" PRSresult <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile, effectsize = \"BETA\", LDreference = \"GXwasR_example\", ldclump = FALSE, clump_p1, clump_p2, clump_r2, clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions, ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6, pheno_type = \"binary\") #> Warning: cannot remove file '/private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f', reason 'Directory not empty' #> ℹ 0.001 #> • Computing PRS for threshold 0.001 #> ℹ 0.05 #> • Computing PRS for threshold 0.05 #> ℹ 0.1 #> • Computing PRS for threshold 0.1 #> ℹ 0.2 #> • Computing PRS for threshold 0.2 #> ℹ 0.3 #> • Computing PRS for threshold 0.3 #> ℹ 0.4 #> • Computing PRS for threshold 0.4 #> ℹ 0.5 #> • Computing PRS for threshold 0.5 PRSresult$PRS_plot #> Error in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : Metric information not available for this family/device ## This table shows 10 samples with phenotype, covariates and a PRS column. PRS <- PRSresult$PRS PRS[1:10, ] ## The best threshold BestPvalue <- PRSresult$BestP$Threshold BestPvalue #> [1] 0.05"},{"path":[]},{"path":"/articles/GXwasR_PRS.html","id":"datasets-for-computing-prs","dir":"Articles","previous_headings":"Computing sex-aware PRS","what":"Datasets for computing PRS","title":"Computing Polygenic Risk Score using GXwasR","text":"Discovery Data .e., GWAS summary statistics mandatory columns “SNP”(SNP names), “A1”(effect allele), “BETA”(effect size beta value) “P”(p-value). Target Data .e., genotype dataset plink .bed, .bim .fam format.","code":"# Example discovery data is included in GXwasR library(GXwasR) data(Summary_Stat_Ex1) summarystat <- Summary_Stat_Ex1[, c(2, 4, 7, 1, 3, 12)] # Example target data is included in GXwasR DataDir <- GXwasR:::GXwasR_data() finput <- \"GXwasR_example\""},{"path":"/articles/GXwasR_PRS.html","id":"quality-control-of-the-datasets-before-computing-sex-aware-prs-","dir":"Articles","previous_headings":"Computing sex-aware PRS","what":"Quality control of the datasets before computing sex-aware PRS.","title":"Computing Polygenic Risk Score using GXwasR","text":"Users must ensure datasets genome built. ’s quality control procedure: () Discovery Data: Remove multi-allelic, indels ambiguous (/T C/G) SNPs. remove SNPs minor allele frequency (MAF) < 0.05 quality info score < 0.1. filtering, R packages like data.table, dplyr, tidyverse can used. (B) Target Data: Remove multi-allelic, indels ambiguous (/T C/G) SNPs. remove SNPs MAF < 0.05 Hardy Weinberg Equilibrium (hwe) > e-10. filtering steps, users use FilterAllele() QCsnp() functions R. Let’s see use functions. details utility functions, please follow https://boseb.github.io/GXwasR/articles/GXwasR_overview.html. use FilterAllele() target data filter multi-allelic SNPs. Also, note GXwasR doesn’t work multi-allelic variants. filtering step important. Now, use QCsnp() remove ambiguous (/T C/G) SNPs SNPs MAF < 0.05 Hardy Weinberg Equilibrium (hwe) > e-10. (C) Check whether SNPs present discovery data target data. Let’s gather common SNPs .","code":"# Target data DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"filtered_multiallelic\" x <- FilterAllele(DataDir, ResultDir, finput, foutput) #> ℹ There is no multi-allelic SNP present in the input dataset. ## Since there was no multiallelic SNPs, we will continue with original input data. finput <- \"GXwasR_example\" foutput <- \"filtered_step1\" geno <- NULL maf <- 0.05 casecontrol <- FALSE caldiffmiss <- FALSE diffmissFilter <- FALSE dmissX <- FALSE dmissAutoY <- FALSE monomorphicSNPs <- TRUE ld_prunning <- FALSE casecontrol <- FALSE ## Since the filtering doesn't require us to run on cases and controls separately, we will make this parameter FALSE. hweCase <- NULL hweControl <- NULL hwe <- 1e-10 monomorphicSNPs <- FALSE ld_prunning <- FALSE  x <- QCsnp(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl, hwe = hwe, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss, dmissX = dmissX, dmissAutoY = dmissAutoY, diffmissFilter = diffmissFilter) #> ℹ 4214 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> --hwe: 3 variants removed due to Hardy-Weinberg exact test. #> 5467 variants removed due to minor allele threshold(s) #> ℹ No filter based on differential missingness will be applied. #> ✔ Output PLINK files prefixed as ,filtered_step1, with passed SNPs are saved in ResultDir. #> ℹ Input file has 26527 SNPs. #> ℹ Output file has 16843 SNPs after filtering. SNP1 <- unique(summarystat$SNP) targetbim <- read.table(paste0(ResultDir, \"/filtered_step1.bim\")) SNP2 <- unique(targetbim$V2) commonSNP <- intersect(SNP1, SNP2) ## 991 SNPs are common between our discovery data and target data"},{"path":"/articles/GXwasR_PRS.html","id":"filtering-discovery-data-and-target-data-with-common-snps","dir":"Articles","previous_headings":"Computing sex-aware PRS","what":"Filtering discovery data and target data with common SNPs","title":"Computing Polygenic Risk Score using GXwasR","text":"Now, discovery data target data ready. proceed towards computing first sex-combined PRS sex-stratified PRS.","code":"commonSNP <- data.table::as.data.table(commonSNP) colnames(commonSNP) <- \"SNP\" NewDiscoveryData <- merge(commonSNP, summarystat, by = \"SNP\") ## For making target data with common SNPs, we will use FilterSNP(). SNPvec <- commonSNP # Need to copy filtered_step1 file from ResultDir to DataDir ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"filtered_step1\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir)) finput <- \"filtered_step1\" foutput <- \"NewtargetData\" FilterSNP(DataDir, ResultDir, finput, foutput, SNPvec, extract = TRUE) #> ℹ 991 SNPs are extracted #> ✔ Plink files with extracted SNPs are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as NewtargetData #> NULL"},{"path":"/articles/GXwasR_PRS.html","id":"sex-combined-prs-computation","dir":"Articles","previous_headings":"","what":"Sex-combined PRS computation","title":"Computing Polygenic Risk Score using GXwasR","text":"() Perform LD clumping discovery data using target data reference. (B) Compute PRS variety p-value thresholds. (C) Select best threshold based R-square (quantitative trait) MacFadden R-square (binary trait) using generalized linear model covariates, genetic PCs. utilize ComputePRS() perform steps (), (B) (C). (D) Perform regression test association PRS sex. (E) Perform regression using different thresholds PRS check consistent evidence sex difference. regression, include genetic PCs covariates well. PRS ~ Sex + PCs + Covariates. test, use SexRegress() function.","code":"# Running # Filtered target data needs to be copied from ResultDir to DataDir. ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"NewtargetData\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir)) finput <- \"NewtargetData\"  # Filtered discovery data. # Need to maintain the first three coulmn of this dataset as SNP ID, Effect Allele and Effect Size summarystat <- NewDiscoveryData phenofile <- Example_phenofile # Cannot be NULL, the interested phenotype column should be labeled as \"Pheno1\". ## Added \"AGE\" and \"testcovar\" as covariates. covarfile <- Example_covarfile clump_p1 <- 0.0001 clump_p2 <- 0.0001 clump_kb <- 500 clump_r2 <- 0.5 byCHR <- TRUE pthreshold <- Example_pthresoldfile$Threshold ld_prunning <- TRUE highLD_regions <- highLD_hg19 window_size <- 50 step_size <- 5 r2_threshold <- 0.02 nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification. pheno_type <- \"binary\" effectsize <- \"BETA\" ldclump <- FALSE PRSresult <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile, effectsize = \"BETA\", LDreference = \"GXwasR_example\", ldclump = FALSE, clump_p1, clump_p2, clump_r2, clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions, ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6, pheno_type = \"binary\") #> Warning: cannot remove file '/private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f', reason 'Directory not empty' #> ℹ 0.001 #> • Computing PRS for threshold 0.001 #> ℹ 0.05 #> • Computing PRS for threshold 0.05 #> ℹ 0.1 #> • Computing PRS for threshold 0.1 #> ℹ 0.2 #> • Computing PRS for threshold 0.2 #> ℹ 0.3 #> • Computing PRS for threshold 0.3 #> ℹ 0.4 #> • Computing PRS for threshold 0.4 #> ℹ 0.5 #> • Computing PRS for threshold 0.5 PRSresult$PRS_plot #> Error in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : Metric information not available for this family/device ## This table shows 10 samples with phenotype, covariates and a PRS column. PRS <- PRSresult$PRS PRS[1:10, ] ## The best threshold BestPvalue <- PRSresult$BestP$Threshold BestPvalue #> [1] 0.05"},{"path":"/articles/GXwasR_PRS.html","id":"about-sexregress","dir":"Articles","previous_headings":"","what":"About SexRegress()","title":"Computing Polygenic Risk Score using GXwasR","text":"","code":"help(SexRegress, package = GXwasR) #> SexRegress: Performing linear regression analysis with quantitative #> response variable. #>  #> Description: #>  #>      This function could be used to check association of two variables. #>      For instance, PRS with sex. #>  #> Usage: #>  #>      SexRegress(fdata, regressor_index, response_index) #>       #> Arguments: #>  #>    fdata: R dataframe object. The column with header 'response' should #>           contain the response variable. All other column are the #>           regressor. #>  #> regressor_index: Integer value, specifying the column number of the #>           main regressor variable. #>  #> response_index: Integer value, specifying the column number of the #>           response variable. #>  #> Value: #>  #>      Numeric value containing the regression estimate (\"Estimate\"), #>      standard error (\"Std. Error\"), statistics (\"t value\") and p-value #>      (Pr(>|t|)) #>  #> Examples: #>  #>      data(\"Regression_Ex\", package = \"GXwasR\") #>      fdata <- Regression_Ex #>      fdata$SEX <- as.factor(as.character(fdata$SEX)) #>      response_index <- 1 #>      regressor_index <- 2 #>       #>      x <- SexRegress(fdata, regressor_index, response_index)"},{"path":"/articles/GXwasR_PRS.html","id":"running-sexregress","dir":"Articles","previous_headings":"","what":"Running SexRegress()","title":"Computing Polygenic Risk Score using GXwasR","text":"case, association PRS sex seems insignificant. Users can check different thresholds PRS mentioned step (D).","code":"# Running # First, we need to make fdata object. library(GXwasR) famfile <- read.table(paste0(ResultDir, \"/NewtargetData.fam\"))[, c(1, 2, 5)] colnames(famfile) <- c(\"FID\", \"IID\", \"Sex\") prefdata <- merge(famfile, PRS, by = c(\"IID\", \"FID\"))  fdata <- prefdata[, c(13, 3:12)] fdata$Sex <- as.factor(as.character(fdata$Sex)) response_index <- 1 regressor_index <- 2  x <- SexRegress(fdata, regressor_index, response_index) x #>     Estimate   Std. Error      t value     Pr(>|t|)  #> -0.005453123  0.005495108 -0.992359622  0.321927372"},{"path":"/articles/GXwasR_PRS.html","id":"sex-stratified-prs","dir":"Articles","previous_headings":"Running SexRegress()","what":"Sex-stratified PRS","title":"Computing Polygenic Risk Score using GXwasR","text":"steps : () Generate separate male female discovery data stratified GWAS. use SumstatMale SumstatFemale . (B) Prepare separate male female target datasets. , utilize GetMFPlink(). (C) Perform LD clumping separately discovery data. (D) Compute PRS variety p-value thresholds, using male-discovery data compute scores female-target data vice versa. (E) Select best threshold based R-square (quantitative trait) MacFadden R-square (binary trait) using generalized linear model covariates, genetic PCs. utilize ComputePRS() perform steps (C), (D) (E).","code":"library(GXwasR) ## We will use NewtargetData as input for this function. finput <- \"NewtargetData\" foutput <- \"maletarget\" sex <- \"males\" x <- GetMFPlink(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, sex = sex, xplink = FALSE, autoplink = FALSE) #> ✔ Output PLINK files, prefixed as maletarget, are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ  foutput <- \"femaletarget\" sex <- \"females\" x <- GetMFPlink(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, sex = sex, xplink = FALSE, autoplink = FALSE) #> ✔ Output PLINK files, prefixed as femaletarget, are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ # Running # Male and female target datasets need to be copied from ResultDir to DataDir. ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"target\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir))"},{"path":"/articles/GXwasR_PRS.html","id":"computing-prs-for-female-only-target-data-using-male-only-discovery-data","dir":"Articles","previous_headings":"","what":"Computing PRS for female-only target data using male-only discovery data","title":"Computing Polygenic Risk Score using GXwasR","text":"","code":"# DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"femaletarget\" # Filtered discovery data. # Need to maintain the first three coulmn of this dataset as SNP ID, Effect Allele and Effect Size summarystat <- Summary_Stat_Ex1[, c(2, 4, 7, 1, 3, 12)] ## Making phenofile only with females famfile <- read.table(paste0(ResultDir, \"/femaletarget.fam\"))[, c(1, 2, 5)] colnames(famfile) <- c(\"FID\", \"IID\", \"Sex\") famfileF <- famfile[famfile$Sex == 2, ] phenofile <- merge(famfileF, Example_phenofile, by = c(\"FID\", \"IID\")) # Cannot be NULL, the interested phenotype column should be labeled as \"Pheno1\". ## Added \"AGE\" and \"testcovar\" as covariates. ## Making cpvarfile with females covarfile <- merge(famfileF, Example_covarfile, by = c(\"FID\", \"IID\")) clump_p1 <- 0.0001 clump_p2 <- 0.0001 clump_kb <- 500 clump_r2 <- 0.5 byCHR <- TRUE pthreshold <- Example_pthresoldfile$Threshold ld_prunning <- TRUE highLD_regions <- highLD_hg19 window_size <- 50 step_size <- 5 r2_threshold <- 0.02 nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification. pheno_type <- \"binary\" ldclump <- FALSE effectsize <- \"BETA\" PRSresultFemale <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile, effectsize = \"BETA\", LDreference = \"GXwasR_example\", ldclump = FALSE, clump_p1, clump_p2, clump_r2, clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions, ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6, pheno_type = \"binary\") #> Warning: cannot remove file '/private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f', reason 'Directory not empty' #> ℹ 0.001 #> • Computing PRS for threshold 0.001 #> ℹ 0.05 #> • Computing PRS for threshold 0.05 #> ℹ 0.1 #> • Computing PRS for threshold 0.1 #> ℹ 0.2 #> • Computing PRS for threshold 0.2 #> ℹ 0.3 #> • Computing PRS for threshold 0.3 #> ℹ 0.4 #> • Computing PRS for threshold 0.4 #> ℹ 0.5 #> • Computing PRS for threshold 0.5 PRSresultFemale$PRS_plot #> Error in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : Metric information not available for this family/device ## This table shows 10 samples with phenotype, covariates and a PRS column. PRSfemale <- PRSresultFemale$PRS PRSfemale[1:10, ] ## The best threshold BestPvalue <- PRSresultFemale$BestP$Threshold BestPvalue #> [1] 0.001"},{"path":"/articles/GXwasR_PRS.html","id":"computing-prs-for-male-only-target-data-using-female-only-discovery-data","dir":"Articles","previous_headings":"","what":"Computing PRS for male-only target data using female-only discovery data","title":"Computing Polygenic Risk Score using GXwasR","text":"(F) Perform regression test association PRS trait one sex case status sex. PRS ~ trait + PCs + covariates Let’s check association PRS trait female.","code":"library(GXwasR) data(Summary_Stat_Ex2) # DataDir <- system.file(\"extdata\", package = \"GXwasR\") ResultDir <- tempdir() finput <- \"maletarget\" # Filtered discovery data. # Need to maintain the first three coulmn of this dataset as SNP ID, Effect Allele and Effect Size summarystat <- Summary_Stat_Ex2[, c(2, 4, 7, 1, 3, 12)] ## Making phenofile only with females famfile <- read.table(paste0(ResultDir, \"/maletarget.fam\"))[, c(1, 2, 5)] colnames(famfile) <- c(\"FID\", \"IID\", \"Sex\") famfileM <- famfile[famfile$Sex == 1, ] phenofile <- merge(famfileM, Example_phenofile, by = c(\"FID\", \"IID\")) # Cannot be NULL, the interested phenotype column should be labeled as \"Pheno1\". ## Added \"AGE\" and \"testcovar\" as covariates. ## Making cpvarfile with females covarfile <- merge(famfileM, Example_covarfile, by = c(\"FID\", \"IID\")) clump_p1 <- 0.0001 clump_p2 <- 0.0001 clump_kb <- 500 clump_r2 <- 0.5 byCHR <- TRUE pthreshold <- Example_pthresoldfile$Threshold ld_prunning <- TRUE highLD_regions <- highLD_hg19 window_size <- 50 step_size <- 5 r2_threshold <- 0.02 nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification. pheno_type <- \"binary\" ldclump <- FALSE effectsize <- \"BETA\" PRSresultmale <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile, effectsize = \"BETA\", LDreference = \"GXwasR_example\", ldclump = FALSE, clump_p1 = clump_p1, clump_p2 = clump_p2, clump_r2 = clump_r2, clump_kb = clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions, ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6, pheno_type = \"binary\") #> Warning: cannot remove file '/private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f', reason 'Directory not empty' #> ℹ 0.001 #> • Computing PRS for threshold 0.001 #> ℹ 0.05 #> • Computing PRS for threshold 0.05 #> ℹ 0.1 #> • Computing PRS for threshold 0.1 #> ℹ 0.2 #> • Computing PRS for threshold 0.2 #> ℹ 0.3 #> • Computing PRS for threshold 0.3 #> ℹ 0.4 #> • Computing PRS for threshold 0.4 #> ℹ 0.5 #> • Computing PRS for threshold 0.5 PRSresultmale$PRS_plot #> Error in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : Metric information not available for this family/device ## This table shows 10 samples with phenotype, covariates and a PRS column. PRSmale <- PRSresultmale$PRS PRSmale[1:10, ] ## The best threshold BestPvalue <- PRSresultmale$BestP$Threshold BestPvalue #> [1] 0.001 # Running # First, we need to make fdata object. famfile <- read.table(paste0(ResultDir, \"/femaletarget.fam\"))[, c(1, 2, 6)] colnames(famfile) <- c(\"FID\", \"IID\", \"Trait\") prefdata <- merge(famfile, PRS, by = c(\"IID\", \"FID\"))  fdata <- prefdata[, c(13, 3:12)] fdata$Sex <- as.factor(as.character(fdata$Trait)) response_index <- 1 regressor_index <- 2  x <- SexRegress(fdata, regressor_index, response_index) x #>     Estimate   Std. Error      t value     Pr(>|t|)  #> 4.942281e-02 6.939184e-03 7.122280e+00 4.988950e-11 # In this case, there is a significant association between PRS and trait value."},{"path":"/articles/GXwasR_PRS.html","id":"citing-gxwasr","dir":"Articles","previous_headings":"Computing PRS for male-only target data using female-only discovery data","what":"Citing GXwasR","title":"Computing Polygenic Risk Score using GXwasR","text":"hope GXwasR useful research. Please use following information cite package overall approach. Thank !","code":"## Citation info citation(\"GXwasR\") #> To cite package 'GXwasR' in publications use: #>  #>   Bose B, Blostein F, Kim J, Winters J, Actkins KV, Mayer D, Congivaram H, Niarchou M, Edwards DV, Davis #>   LK, Stranger BE (2025). \"GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on #>   Complex Traits.\" _medRxiv 2025.06.10.25329327_. doi:10.1101/2025.06.10.25329327 #>   <https://doi.org/10.1101/2025.06.10.25329327>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on Complex Traits}, #>     author = {Banabithi Bose and Freida Blostein and Jeewoo Kim and Jessica Winters and Ky’Era V. Actkins and David Mayer and Harrsha Congivaram and Maria Niarchou and Digna Velez Edwards and Lea K. Davis and Barbara E. Stranger}, #>     journal = {medRxiv 2025.06.10.25329327}, #>     year = {2025}, #>     doi = {10.1101/2025.06.10.25329327}, #>   }"},{"path":"/articles/GXwasR_PRS.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Computing Polygenic Risk Score using GXwasR","text":"GXwasR package (Bose, Blostein, Kim et al., 2025) made possible thanks : R (R Core Team, 2025) BiocStyle (Oleś, 2025) knitr (Xie, 2025) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux et al., 2024) sessioninfo (Wickham, Chang, Flight et al., 2025) testthat (Wickham, 2011) package developed using biocthis. R session information.","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       macOS Sequoia 15.6 #>  system   aarch64, darwin24.4.0 #>  ui       unknown #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2025-08-08 #>  pandoc   3.6.3 @ /Applications/Positron.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown) #>  quarto   1.7.33 @ /usr/local/bin/quarto #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [2] CRAN (R 4.5.0) #>  backports              1.5.0      2024-05-23 [2] CRAN (R 4.5.1) #>  bibtex                 0.5.1      2023-01-26 [2] CRAN (R 4.5.0) #>  bigassertr             0.1.7      2025-06-27 [2] CRAN (R 4.5.1) #>  bigparallelr           0.3.2      2021-10-02 [2] CRAN (R 4.5.0) #>  bigsnpr                1.12.18    2024-11-26 [2] CRAN (R 4.5.1) #>  bigsparser             0.7.3      2024-09-06 [2] CRAN (R 4.5.1) #>  bigstatsr              1.6.2      2025-07-29 [2] CRAN (R 4.5.1) #>  Biobase                2.68.0     2025-04-15 [2] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [2] Bioconduc~ #>  BiocIO                 1.18.0     2025-04-15 [2] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [2] CRAN (R 4.5.0) #>  BiocParallel           1.42.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  BiocStyle              2.36.0     2025-04-15 [2] Bioconduc~ #>  Biostrings             2.76.0     2025-04-15 [2] Bioconduc~ #>  bit                    4.6.0      2025-03-06 [2] CRAN (R 4.5.1) #>  bit64                  4.6.0-1    2025-01-16 [2] CRAN (R 4.5.1) #>  bitops                 1.0-9      2024-10-03 [2] CRAN (R 4.5.0) #>  brio                   1.1.5      2024-04-24 [2] CRAN (R 4.5.1) #>  broom                  1.0.9      2025-07-28 [2] CRAN (R 4.5.1) #>  BSgenome               1.76.0     2025-04-15 [2] Bioconduc~ #>  cachem                 1.1.0      2024-05-16 [2] CRAN (R 4.5.0) #>  calibrate              1.7.7      2020-06-19 [2] CRAN (R 4.5.0) #>  callr                  3.7.6      2024-03-25 [2] CRAN (R 4.5.0) #>  car                    3.1-3      2024-09-27 [2] CRAN (R 4.5.0) #>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.5.0) #>  cli                    3.6.5      2025-04-23 [2] CRAN (R 4.5.0) #>  codetools              0.2-20     2024-03-31 [4] CRAN (R 4.5.1) #>  cowplot                1.2.0      2025-07-07 [2] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [2] CRAN (R 4.5.0) #>  curl                   6.4.0      2025-06-22 [2] CRAN (R 4.5.1) #>  data.table             1.17.8     2025-07-10 [2] CRAN (R 4.5.1) #>  DelayedArray           0.34.1     2025-04-17 [2] Bioconduc~ #>  devtools             * 2.4.5      2022-10-11 [3] CRAN (R 4.5.0) #>  digest                 0.6.37     2024-08-19 [2] CRAN (R 4.5.0) #>  doParallel             1.0.17     2022-02-07 [2] CRAN (R 4.5.0) #>  doRNG                  1.8.6.2    2025-04-02 [2] CRAN (R 4.5.0) #>  doSNOW                 1.0.20     2022-02-04 [2] CRAN (R 4.5.0) #>  dplyr                  1.1.4      2023-11-17 [2] CRAN (R 4.5.0) #>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.5.0) #>  evaluate               1.0.4      2025-06-18 [2] CRAN (R 4.5.1) #>  farver                 2.1.2      2024-05-13 [2] CRAN (R 4.5.0) #>  fastmap                1.2.0      2024-05-15 [2] CRAN (R 4.5.0) #>  flock                  0.7        2016-11-12 [2] CRAN (R 4.5.1) #>  foreach                1.5.2      2022-02-02 [2] CRAN (R 4.5.0) #>  Formula                1.2-5      2023-02-24 [2] CRAN (R 4.5.0) #>  fs                     1.6.6      2025-04-12 [2] CRAN (R 4.5.0) #>  gdsfmt                 1.44.1     2025-07-09 [2] Bioconduc~ #>  generics               0.1.4      2025-05-09 [2] CRAN (R 4.5.0) #>  GenomeInfoDb           1.44.1     2025-07-23 [2] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-04-21 [2] Bioconductor #>  GenomicAlignments      1.44.0     2025-04-15 [2] Bioconduc~ #>  GenomicRanges          1.60.0     2025-04-15 [2] Bioconduc~ #>  ggplot2                3.5.2      2025-04-09 [2] CRAN (R 4.5.0) #>  ggpubr                 0.6.1      2025-06-27 [2] CRAN (R 4.5.1) #>  ggrepel                0.9.6      2024-09-07 [2] CRAN (R 4.5.1) #>  ggsignif               0.6.4      2022-10-13 [2] CRAN (R 4.5.0) #>  glue                   1.8.0      2024-09-30 [2] CRAN (R 4.5.0) #>  gridExtra              2.3        2017-09-09 [2] CRAN (R 4.5.0) #>  gtable                 0.3.6      2024-10-25 [2] CRAN (R 4.5.0) #>  GXwasR               * 0.99.0     2025-08-08 [1] Bioconductor #>  hms                    1.1.3      2023-03-21 [2] CRAN (R 4.5.0) #>  htmltools              0.5.8.1    2024-04-04 [2] CRAN (R 4.5.0) #>  htmlwidgets            1.6.4      2023-12-06 [2] CRAN (R 4.5.0) #>  httpuv                 1.6.16     2025-04-16 [2] CRAN (R 4.5.1) #>  httr                   1.4.7      2023-08-15 [2] CRAN (R 4.5.0) #>  IRanges                2.42.0     2025-04-15 [2] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [2] CRAN (R 4.5.0) #>  jsonlite               2.0.0      2025-03-27 [2] CRAN (R 4.5.0) #>  knitr                  1.50       2025-03-16 [2] CRAN (R 4.5.0) #>  labeling               0.4.3      2023-08-29 [2] CRAN (R 4.5.0) #>  later                  1.4.2      2025-04-08 [2] CRAN (R 4.5.1) #>  lattice                0.22-7     2025-04-02 [4] CRAN (R 4.5.1) #>  lifecycle              1.0.4      2023-11-07 [2] CRAN (R 4.5.0) #>  lubridate              1.9.4      2024-12-08 [2] CRAN (R 4.5.1) #>  magrittr             * 2.0.3      2022-03-30 [2] CRAN (R 4.5.0) #>  MASS                   7.3-65     2025-02-28 [4] CRAN (R 4.5.1) #>  mathjaxr               1.8-0      2025-04-30 [2] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [4] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [2] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [2] CRAN (R 4.5.0) #>  memoise                2.0.1      2021-11-26 [2] CRAN (R 4.5.0) #>  mgcv                   1.9-3      2025-04-04 [4] CRAN (R 4.5.1) #>  mime                   0.13       2025-03-17 [2] CRAN (R 4.5.0) #>  miniUI                 0.1.2      2025-04-17 [3] CRAN (R 4.5.0) #>  nlme                   3.1-168    2025-03-31 [4] CRAN (R 4.5.1) #>  pillar                 1.11.0     2025-07-04 [2] CRAN (R 4.5.1) #>  pkgbuild               1.4.8      2025-05-26 [2] CRAN (R 4.5.0) #>  pkgconfig              2.0.3      2019-09-22 [2] CRAN (R 4.5.0) #>  pkgdev                 0.1.0.9060 2025-08-04 [2] Github (dieghernan/pkgdev@e56f2a8) #>  pkgload                1.4.0      2024-06-28 [2] CRAN (R 4.5.0) #>  plyr                   1.8.9      2023-10-02 [2] CRAN (R 4.5.1) #>  plyranges              1.28.0     2025-04-15 [2] Bioconduc~ #>  polynom                1.4-1      2022-04-11 [2] CRAN (R 4.5.0) #>  poolr                  1.2-0      2025-05-07 [2] CRAN (R 4.5.0) #>  prettyunits            1.2.0      2023-09-24 [2] CRAN (R 4.5.0) #>  printr               * 0.3        2023-03-08 [2] CRAN (R 4.5.0) #>  processx               3.8.6      2025-02-21 [2] CRAN (R 4.5.1) #>  profvis                0.4.0      2024-09-20 [3] CRAN (R 4.5.0) #>  progress               1.2.3      2023-12-06 [2] CRAN (R 4.5.0) #>  promises               1.3.3      2025-05-29 [2] CRAN (R 4.5.0) #>  ps                     1.9.1      2025-04-12 [2] CRAN (R 4.5.1) #>  purrr                  1.1.0      2025-07-10 [2] CRAN (R 4.5.1) #>  qqman                  0.1.9      2023-08-23 [2] CRAN (R 4.5.0) #>  R.methodsS3            1.8.2      2022-06-13 [2] CRAN (R 4.5.0) #>  R.oo                   1.27.1     2025-05-02 [2] CRAN (R 4.5.0) #>  R.utils                2.13.0     2025-02-24 [2] CRAN (R 4.5.0) #>  R6                     2.6.1      2025-02-15 [2] CRAN (R 4.5.0) #>  ragg                   1.4.0      2025-04-10 [3] CRAN (R 4.5.0) #>  rbibutils              2.3        2024-10-04 [2] CRAN (R 4.5.1) #>  RColorBrewer           1.1-3      2022-04-03 [2] CRAN (R 4.5.0) #>  Rcpp                   1.1.0      2025-07-02 [2] CRAN (R 4.5.1) #>  RCurl                  1.98-1.17  2025-03-22 [2] CRAN (R 4.5.0) #>  Rdpack                 2.6.4      2025-04-09 [2] CRAN (R 4.5.0) #>  RefManageR           * 1.4.0      2022-09-30 [2] CRAN (R 4.5.1) #>  regioneR               1.40.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  remotes                2.5.0      2024-03-17 [2] CRAN (R 4.5.0) #>  restfulr               0.0.16     2025-06-27 [2] CRAN (R 4.5.1) #>  rjson                  0.2.23     2024-09-16 [2] CRAN (R 4.5.0) #>  rlang                  1.1.6      2025-04-11 [2] CRAN (R 4.5.0) #>  rmarkdown            * 2.29       2024-11-04 [2] CRAN (R 4.5.0) #>  rmio                   0.4.0      2022-02-17 [2] CRAN (R 4.5.0) #>  rngtools               1.5.2      2021-09-20 [2] CRAN (R 4.5.0) #>  rprojroot              2.1.0      2025-07-12 [2] CRAN (R 4.5.1) #>  Rsamtools              2.24.0     2025-04-15 [2] Bioconduc~ #>  rstatix                0.7.2      2023-02-01 [2] CRAN (R 4.5.0) #>  rtracklayer            1.68.0     2025-04-15 [2] Bioconduc~ #>  S4Arrays               1.8.1      2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  S4Vectors              0.46.0     2025-04-15 [2] Bioconduc~ #>  scales                 1.4.0      2025-04-24 [2] CRAN (R 4.5.0) #>  seqminer               9.7        2024-10-02 [2] CRAN (R 4.5.1) #>  sessioninfo          * 1.2.3      2025-02-05 [2] CRAN (R 4.5.1) #>  shiny                  1.11.1     2025-07-03 [2] CRAN (R 4.5.1) #>  snow                   0.4-4      2021-10-27 [2] CRAN (R 4.5.0) #>  SNPRelate              1.42.0     2025-04-15 [2] Bioconduc~ #>  SparseArray            1.8.1      2025-07-23 [2] Bioconduc~ #>  stringi                1.8.7      2025-03-27 [2] CRAN (R 4.5.0) #>  stringr                1.5.1      2023-11-14 [2] CRAN (R 4.5.0) #>  sumFREGAT              1.2.5      2022-06-07 [2] CRAN (R 4.5.1) #>  SummarizedExperiment   1.38.1     2025-04-30 [2] Bioconductor 3.21 (R 4.5.0) #>  sys                    3.4.3      2024-10-04 [2] CRAN (R 4.5.0) #>  systemfonts            1.2.3      2025-04-30 [2] CRAN (R 4.5.0) #>  testthat             * 3.2.3      2025-01-13 [2] CRAN (R 4.5.1) #>  textshaping            1.0.1      2025-05-01 [3] CRAN (R 4.5.0) #>  tibble                 3.3.0      2025-06-08 [2] CRAN (R 4.5.0) #>  tidyr                  1.3.1      2024-01-24 [2] CRAN (R 4.5.1) #>  tidyselect             1.2.1      2024-03-11 [2] CRAN (R 4.5.0) #>  timechange             0.3.0      2024-01-18 [2] CRAN (R 4.5.1) #>  tzdb                   0.5.0      2025-03-15 [2] CRAN (R 4.5.1) #>  UCSC.utils             1.4.0      2025-04-15 [2] Bioconduc~ #>  urlchecker             1.0.1      2021-11-30 [3] CRAN (R 4.5.0) #>  usethis              * 3.1.0      2024-11-26 [2] CRAN (R 4.5.0) #>  vctrs                  0.6.5      2023-12-01 [2] CRAN (R 4.5.0) #>  vroom                  1.6.5      2023-12-05 [2] CRAN (R 4.5.1) #>  withr                  3.0.2      2024-10-28 [2] CRAN (R 4.5.0) #>  xfun                   0.52       2025-04-02 [2] CRAN (R 4.5.0) #>  XML                    3.99-0.18  2025-01-01 [2] CRAN (R 4.5.0) #>  xml2                   1.3.8      2025-03-14 [2] CRAN (R 4.5.1) #>  xtable                 1.8-4      2019-04-21 [2] CRAN (R 4.5.0) #>  XVector                0.48.0     2025-04-15 [2] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [2] CRAN (R 4.5.0) #>  #>  [1] /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f #>  [2] /Users/mayerdav/Library/R/arm64/4.5/library #>  [3] /opt/homebrew/lib/R/4.5/site-library #>  [4] /opt/homebrew/Cellar/r/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/GXwasR_PRS.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"Computing Polygenic Risk Score using GXwasR","text":"vignette generated using BiocStyle (Oleś, 2025) knitr (Xie, 2025) rmarkdown (Allaire, Xie, Dervieux et al., 2024) running behind scenes. Citations made RefManageR (McLean, 2017). [1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.29. 2024. URL: https://github.com/rstudio/rmarkdown. [2] B. Bose, F. Blostein, J. Kim, et al. “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits”. : medRxiv 2025.06.10.25329327 (2025). DOI: 10.1101/2025.06.10.25329327. [3] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [4] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.36.0. 2025. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [5] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2025. URL: https://www.R-project.org/. [6] H. Wickham. “testthat: Get Started Testing”. : R Journal 3 (2011), pp. 5–10. URL: https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. [7] H. Wickham, W. Chang, R. Flight, et al. sessioninfo: R Session Information. R package version 1.2.3. 2025. DOI: 10.32614/CRAN.package.sessioninfo. URL: https://CRAN.R-project.org/package=sessioninfo. [8] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.50. 2025. URL: https://yihui.org/knitr/.","code":""},{"path":"/articles/GXwasR_overview.html","id":"gxwasr-description","dir":"Articles","previous_headings":"","what":"GXwasR Description:","title":"GXwasR Overview","text":"package implements various statistical genetics models Genome-Wide Association (GWA) X-Chromosome Wide Association (XWA) analyses sex-combined sex-stratified way considering X-Chromosome Inactivation (XCI) pattern. addition association analysis, package also enables testing sex differences genetic effects, including implementation specific models applying best practices additional quality control (QC) genetic data required tests. package includes thirty different functions six different categories (-F) enable comprehensive pipeline sex-aware genetic association analysis common variants unrelated individuals.","code":""},{"path":[]},{"path":"/articles/GXwasR_overview.html","id":"install-gxwasr","dir":"Articles","previous_headings":"Basics","what":"Install GXwasR","title":"GXwasR Overview","text":"R open-source statistical environment can easily modified enhance functionality via packages. GXwasR R package available via Bioconductor repository packages. R can installed operating system CRAN can install GXwasR using following commands R session:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"GXwasR\")  ## Check that you have a valid Bioconductor installation BiocManager::valid()"},{"path":"/articles/GXwasR_overview.html","id":"functions-overview","dir":"Articles","previous_headings":"","what":"Functions Overview","title":"GXwasR Overview","text":"document lists functions GXwasR package.offers thirty-three distinct functions, organized six main categories: ) Pre-imputation QC, B) Post-imputation QC, C) Sex-combined sex-stratified GWAS specialized analysis XWAS, D) Sex-differential test, E) High level analysis range F) Utility Functions. categories respective functions detailed Table.","code":""},{"path":"/articles/GXwasR_overview.html","id":"table-of-functions","dir":"Articles","previous_headings":"Functions Overview","what":"Table of Functions","title":"GXwasR Overview","text":"","code":"library(GXwasR) library(magrittr) #>  #> Attaching package: 'magrittr' #> The following objects are masked from 'package:testthat': #>  #>     equals, is_less_than, not library(printr) library(rmarkdown)"},{"path":"/articles/GXwasR_overview.html","id":"function-1","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 1","title":"GXwasR Overview","text":"","code":"help(QCsnp, package = \"GXwasR\") #> QCsnp: Quality control (QC) for SNPs. #>  #> Description: #>  #>      This function performs QC of genotype data from PLINK binary #>      files. It can filter based on minor allele frequency, #>      Hardy-Weinberg equilibrium, call rate, and differential #>      missingness between cases and controls. It can also perform #>      linkage disequilibrium-based filtering. #>  #> Usage: #>  #>      QCsnp( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        foutput = \"FALSE\", #>        casecontrol = TRUE, #>        hweCase = NULL, #>        hweControl = NULL, #>        hwe = NULL, #>        maf = 0.05, #>        geno = 0.1, #>        monomorphicSNPs = FALSE, #>        caldiffmiss = FALSE, #>        diffmissFilter = FALSE, #>        dmissX = FALSE, #>        dmissAutoY = FALSE, #>        highLD_regions = NULL, #>        ld_prunning = FALSE, #>        window_size = 50, #>        step_size = 5, #>        r2_threshold = 0.02 #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files with both male and female samples. This file #>           needs to be in 'DataDir'. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files if the filtering option for the SNPs is chosen. #>           The default is \"FALSE\". #>  #> casecontrol: Boolean value, 'TRUE' or 'FALSE' indicating if the input #>           PLINK files has cases-control status or not. The default is #>           'FALSE'. #>  #>  hweCase: Numeric value between 0 to 1 or 'NULL' for removing SNPs #>           which fail Hardy-Weinberg equilibrium for cases. The default #>           is 'NULL'. #>  #> hweControl: Numeric value between 0 to 1 or 'NULL' for removing SNPs #>           which fail Hardy-Weinberg equilibrium for controls. The #>           default is 'NULL'. #>  #>      hwe: Numeric value between 0 to 1 or 'NULL' for removing SNPs #>           which fail Hardy-Weinberg equilibrium for entire dataset. The #>           default is 'NULL'. #>  #>      maf: Numeric value between 0 to 1 for removing SNPs with minor #>           allele frequency less than the specified threshold. The #>           default is 0.05. #>  #>     geno: Numeric value between 0 to 1 for removing SNPs that have less #>           than the specified call rate. The default is 0.05. #>  #>           Users can set this as 'NULL' to not apply this filter. #>  #> monomorphicSNPs: Boolean value, 'TRUE' or 'FALSE' for filtering out #>           monomorphic SNP. The default is 'TRUE'. #>  #> caldiffmiss: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           compute differential missingness between cases and controls #>           for each SNP (threshold is 0.05/length(unique(No. of. SNPs in #>           the test))). The default is 'TRUE.' #>  #> diffmissFilter: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           filter out the SNPs or only flagged them for differential #>           missingness in cases vs controls. The default is 'TRUE'. #>  #>   dmissX: Boolean value, 'TRUE' or 'FALSE' for computing differential #>           missingness between cases and controls for X chromosome SNPs #>           only. The default is 'FALSE'. The diffmissFilter will work #>           for all these SNPs. #>  #> dmissAutoY: Boolean value, 'TRUE' or 'FALSE' for computing differential #>           missingness between cases and controls for SNPs on autosomes #>           and Y chromosome only. The default is 'FALSE'. #>  #>           If 'dmissX' and 'dmissAutoY' are both 'FALSE', then this will #>           be computed genome-wide. The 'diffmissFilter' will work for #>           all these SNPs. #>  #> highLD_regions: A dataframe with known high LD regions (Anderson et al. #>           2010) is provided with the package. #>  #> ld_prunning: Boolean value, 'TRUE' or 'FALSE' for applying linkage #>           disequilibrium (LD)-based filtering. #>  #> window_size: Integer value, specifying a window size in the variant #>           counts for LD-based filtering. The default is 50. #>  #> step_size: Integer value, specifying a variant count to shift the #>           window at the end of each step for LD filtering. The default #>           is 5. #>  #> r2_threshold: Numeric value between 0 to 1 of pairwise r^2 threshold #>           for LD-based filtering. The default is 0.02. #>  #> Value: #>  #>      A list of two objects, namely, 'MonomorSNPs' and 'DiffMissSNPs' #>      containing monomorphic SNPs and SNPs with differential missingness #>      in cases vs controls, respectively. Output PLINK binary files in #>      the working directory. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      Anderson CA, Pettersson FH, Clarke GM, Cardon LR, Morris AP, #>      Zondervan KT (2010). \"Data quality control in genetic case-control #>      association studies.\" _Nature Protocols_, *5*(9), 1564-1573. #>      doi:10.1038/nprot.2010.116 #>      <https://doi.org/10.1038/nprot.2010.116>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/21085122>. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      foutput <- \"Test_output\" #>      geno <- NULL #>      maf <- 0.05 #>      casecontrol <- FALSE #>      hweCase <- NULL #>      hweControl <- NULL #>      hweCase <- NULL #>      monomorphicSNPs <- FALSE #>      caldiffmiss <- FALSE #>      ld_prunning <- FALSE #>      x <- QCsnp( #>          DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, #>          geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl, #>          ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, #>          caldiffmiss = caldiffmiss #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-2","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 2","title":"GXwasR Overview","text":"","code":"help(QCsample, package = \"GXwasR\") #> QCsample: Quality control for samples in the PLINK binary files. #>  #> Description: #>  #>      This function identifies outlier individuals for heterozygosity #>      and/or missing genotype rates, which aids in the detection of #>      samples with subpar DNA quality and/or concentration that should #>      be removed from the study. Individuals missing more than 3-7% of #>      their genotype calls are often excluded from the analysis. #>  #>      Having the correct designation of sex is important to obtain #>      accurate genotype rate estimates, or avoid incorrectly removing #>      samples, etc. Details can be accessed from the paper. #>  #> Usage: #>  #>      QCsample( #>        DataDir, #>        ResultDir, #>        finput, #>        foutput = NULL, #>        imiss, #>        het, #>        small_sample_mod = FALSE, #>        IBD, #>        IBDmatrix = FALSE, #>        ambi_out = TRUE, #>        legend_text_size = 8, #>        legend_title_size = 7, #>        axis_text_size = 5, #>        axis_title_size = 7, #>        title_size = 9, #>        filterSample = TRUE #>      ) #>       #> Arguments: #>  #>  DataDir: Character string, specifying the file path of the input PLINK #>           binary files. The default is 'NULL'. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files with both male and female samples. This file #>           needs to be in 'DataDir'. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files if filtering option for the samples is chosen. #>  #>    imiss: Numeric value between 0 to 1 for removing samples that have #>           more than the specified missingness. The default is 0.03. #>  #>      het: Positive numeric value, specifying the standard deviation #>           from the mean heterozygosity rate. The samples whose rates #>           are more than the specified sd from the mean heterozygosity #>           rate are removed. The default is 3. With this default value, #>           outlying heterozygosity rates would remove individuals who #>           are three sd away from the mean rate (1). #>  #> small_sample_mod: Boolean value indicating whether to apply #>           modifications for small sample sizes. Default is 'FALSE'. #>  #>      IBD: Numeric value for setting the threshold for Identity by #>           Descent (IBD) analysis. Default is 'NULL'. #>  #> IBDmatrix: Boolean value indicating whether to generate an entire IBD #>           matrix. Default is 'FALSE'. In this case filtered IBD matrix #>           will be stored. #>  #> ambi_out: Boolean value indicating whether to process ambiguous #>           samples. #>  #> legend_text_size: Integer, specifying the size for legend text in the #>           plot. #>  #> legend_title_size: Integer, specifying the size for the legend title in #>           the plot. #>  #> axis_text_size: Integer, specifying the size for axis text in the plot. #>  #> axis_title_size: Integer, specifying the size for the axis title in the #>           plot. #>  #> title_size: Integer, specifying the size of the title of the plot #>           heterozygosity estimate vs missingness across samples. #>  #> filterSample: Boolean value, 'TRUE' or 'FALSE' for filtering out the #>           samples or not (i.e., only flagged). The default is 'TRUE'. #>  #> Value: #>  #>      A plot of heterogysity estimate vs missingness across sample and a #>      list containing five R dataframe objects, namely, 'HM' (samples #>      with outlying heterozygosity and/or missing genotype rates), #>      'Failed_Missingness' (samples with missing genotype rates), #>      'Failed_heterozygosity' (samples with outlying heterozygosity), #>      'Missingness_results' (missingness results) and #>      'Heterozygosity_results' (heterozygosity results) with output #>      PLINK files in ResultDir if filtering out the samples option is #>      chosen. #>  #>      'Missingness_results' contains missingness results for each #>      individual, with six columns as 'FID', 'IID', 'MISS_PHENO', #>      'N_MISS', 'N_GENO' and 'F_MISS' for Family ID, Within-family ID, #>      Phenotype missing? (Y/N), Number of missing genotype call(s), not #>      including obligatory missings or heterozygous haploids, number of #>      potentially valid call(s), and missing call rate, respectively. #>  #>      'Heterozygosity_results' contains heterozygosity results for each #>      individual, with six columns as 'FID', 'IID', 'O(HOM)', 'E(HOM)', #>      'N(NM)', and 'F' for Family ID, Within-family ID, Observed number #>      of homozygotes, Expected number of homozygotes, Number of #>      (non-missing, non-monomorphic) autosomal genotype observations #>      and, Method-of-moments F coefficient estimate, respectively. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      foutput <- \"Test_output\" #>      imiss <- 0.01 #>      het <- 2 #>      small_sample_mod <- FALSE #>      IBD <- 0.2 #>      IBDmatrix <- FALSE #>      ambi_out <- TRUE #>       #>      x <- QCsample( #>          DataDir = DataDir, ResultDir = ResultDir, finput = finput, #>          foutput = foutput, imiss = imiss, het = het, IBD = IBD, #>          ambi_out = ambi_out #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-3","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 3","title":"GXwasR Overview","text":"","code":"help(AncestryCheck, package = \"GXwasR\") #> AncestryCheck: Evaluation of the samples' ancestry label. #>  #> Description: #>  #>      This function displays the result of the ancestry analysis in a #>      color-coded scatter plot of the first two principal components for #>      samples of the reference populations and the study population. #>      Specifically, it compares the study samples' ancestry labels to a #>      panel representing a reference population, and it also flags the #>      outlier samples with respect to a chosen reference population. #>  #>      Users are required to provide SNPs ids or rsids in the input PLINK #>      files. #>  #>      The function first filters the reference and study data for #>      non-A-T or G-C SNPs. It next conducts LD pruning, fixes the #>      chromosome mismatch between the reference and study datasets, #>      checks for allele flips, updates the locations, and flips the #>      alleles. The two datasets are then joined, and the resulting #>      genotype dataset is subjected to Principal Component Analysis #>      (PCA). #>  #>      The detection of population structure down to the level of the #>      reference dataset can then be accomplished using PCA on this #>      combined genotyping panel. For instance, the center of the #>      European reference samples is determined using the data from #>      principal components 1 and 2 (median(PC1 europeanRef), median(PC2 #>      europeanRef)). It determines the European reference samples' #>      maximum Euclidean distance (maxDist) from this center. #>  #>      All study samples that are non-European, or outliers, are those #>      whose Euclidean distances from the center are more than or equal #>      to the radius r= outlier threshold* maxDist. This function #>      utilizes the HapMap phase 3 data in NCBI 36 and 1000GenomeIII in #>      CGRCh37. Both study and reference datasets should be of the same #>      genome build. If not, users need to lift over one of the datasets #>      to the same build. #>  #> Usage: #>  #>      AncestryCheck( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        reference = c(\"HapMapIII_NCBI36\", \"ThousandGenome\"), #>        filterSNP = TRUE, #>        studyLD = TRUE, #>        studyLD_window_size = 50, #>        studyLD_step_size = 5, #>        studyLD_r2_threshold = 0.02, #>        referLD = FALSE, #>        referLD_window_size = 50, #>        referLD_step_size = 5, #>        referLD_r2_threshold = 0.02, #>        highLD_regions, #>        study_pop, #>        outlier = FALSE, #>        outlierOf = \"EUR\", #>        outlier_threshold = 3 #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files for the study samples. #>  #> reference: Boolean value,'HapMapIII_NCBI36' and 'ThousandGenome', #>           specifying Hapmap Phase3 (3 Consortium 2010) and 1000 Genomes #>           phase III (1000 Genomes Project Consortium 2015) reference #>           population, respectively. The default is 'HapMapIII_NCBI36'. #>  #> filterSNP: Boolean value, 'TRUE' or 'FALSE' for filtering out the SNPs. #>           The default is 'TRUE'. We recommend setting it 'FALSE' only #>           when the users are sure that they could join the study and #>           reference samples directly. #>  #>  studyLD: Boolean value, 'TRUE' or 'FALSE' for applying linkage #>           disequilibrium (LD)-based filtering on study genotype data. #>  #> studyLD_window_size: Integer value, specifying a window size in variant #>           count or kilobase for LD-based filtering of the variants for #>           the study data. #>  #> studyLD_step_size: Integer value, specifying a variant count to shift #>           the window at the end of each step for LD filtering for the #>           study data. #>  #> studyLD_r2_threshold: Numeric value between 0 to 1 of pairwise r^2 #>           threshold for LD-based filtering for the study data. #>  #>  referLD: Boolean value, 'TRUE' or 'FALSE' for applying linkage #>           disequilibrium (LD)-based filtering on reference genotype #>           data. #>  #> referLD_window_size: Integer value, specifying a window size in variant #>           count or kilobase for LD-based filtering of the variants for #>           the reference data. #>  #> referLD_step_size: Integer value, specifying a variant count to shift #>           the window at the end of each step for LD filtering for the #>           reference data. #>  #> referLD_r2_threshold: Numeric value between 0 to 1 of pairwise r^2 #>           threshold for LD-based filtering for the reference data. #>  #> highLD_regions: A dataframe with known high LD regions (Anderson et al. #>           2010) is provided with the package. #>  #> study_pop: A dataframe containing two columns for study in first #>           column, sample ID (i.e., IID) and in second column, the #>           ancestry label. #>  #>  outlier: Boolean value, 'TRUE' or 'FALSE', specifying outlier #>           detection will be performed or not. #>  #> outlierOf: Chracter string, specifying the reference ancestry name for #>           detecting outlier samples. The default is \"outlierOf = \"EUR\". #>  #> outlier_threshold: Numeric value, specifying the threshold to be be #>           used to detect outlier samples. This threshold will be #>           multiplied with the Eucledean distance from the center of the #>           PC1 and PC2 to the maximum Euclidean distance of the #>           reference samples. Study samples outside this distance will #>           be considered as outlier. The default is 3. #>  #> Value: #>  #>      A list containing three data frames: one with the IDs of outlier #>      samples (Outlier_samples), another with samples annotated with #>      predicted ancestry (Samples_with_predicted_ancestry), and one with #>      the IDs of non-outlier samples (Non_outlier_samples). A PCA plot #>      is also returned. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      1000 Genomes Project Consortium T (2015). \"A global reference for #>      human genetic variation.\" _Nature_, *526*, 68-74. #>      doi:10.1038/nature15393 <https://doi.org/10.1038/nature15393>. #>  #>      3 Consortium TIH (2010). \"Integrating common and rare genetic #>      variation in diverse human populations.\" _Nature_, *467*, 52-58. #>      doi:10.1038/nature09298 <https://doi.org/10.1038/nature09298>. #>  #>      Anderson CA, Pettersson FH, Clarke GM, Cardon LR, Morris AP, #>      Zondervan KT (2010). \"Data quality control in genetic case-control #>      association studies.\" _Nature Protocols_, *5*(9), 1564-1573. #>      doi:10.1038/nprot.2010.116 #>      <https://doi.org/10.1038/nprot.2010.116>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/21085122>. #>  #> Examples: #>  #>      data(\"highLD_hg19\", package = \"GXwasR\") #>      data(\"example_data_study_sample_ancestry\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      reference <- \"HapMapIII_NCBI36\" #>      highLD_regions <- highLD_hg19 #>      study_pop <- example_data_study_sample_ancestry # PreimputeEX #>      studyLD_window_size <- 50 #>      studyLD_step_size <- 5 #>      studyLD_r2_threshold <- 0.02 #>      filterSNP <- TRUE #>      studyLD <- FALSE #>      referLD <- FALSE #>      referLD_window_size <- 50 #>      referLD_step_size <- 5 #>      referLD_r2_threshold <- 0.02 #>      outlier <- TRUE #>      outlier_threshold <- 3 #>      x <- AncestryCheck( #>          DataDir = DataDir, ResultDir = ResultDir, finput = finput, #>          reference = reference, highLD_regions = highLD_regions, #>          study_pop = study_pop, studyLD = studyLD, referLD = referLD, #>          outlierOf = \"EUR\", outlier = outlier, outlier_threshold = outlier_threshold #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-4","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 4","title":"GXwasR Overview","text":"","code":"help(SexCheck, package = \"GXwasR\") #> SexCheck: Compare sex assignments in the input PLINK files with those #> imputed from X chromosome inbreeding coefficients #>  #> Description: #>  #>      This function compares sex assignments in the input dataset with #>      those predicted from X chromosome inbreeding coefficients (Purcell #>      et al. 2007), and gives the option to convert the sex assignments #>      to the predicted values. Implicitly, this function computes #>      observed and expected autosomal homozygous genotype counts for #>      each sample and reports method-of-moments F coefficient estimates #>      (i.e., observed hom. count - expected count) / (total observations #>      - expected count)). The expected counts will be based on loaded or #>      imputed minor allele frequencies.  Since imputed MAFs are highly #>      inaccurate when there are few samples, the 'compute freq' #>      parameter should be set to TRUE to compute MAF implicitly. #>  #>      Due to the use of allele frequencies, if a cohort is comprised of #>      individuals of different ancestries, users may need to process any #>      samples with rare ancestry individually if the dataset has a very #>      unbalanced ancestry distribution. It is advised to run this #>      function with all the parameters set to zero, then examine the #>      distribution of the F estimates (there should be a clear gap #>      between a very tight male clump on the right side of the #>      distribution and the females everywhere else). Then, rerun the #>      function with the parameters that correspond to this gap. #>  #> Usage: #>  #>      SexCheck( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        impute_sex = FALSE, #>        compute_freq = FALSE, #>        LD = TRUE, #>        LD_window_size = 50, #>        LD_step_size = 5, #>        LD_r2_threshold = 0.02, #>        fmax_F = 0.2, #>        mmin_F = 0.8 #>      ) #>       #> Arguments: #>  #>  DataDir: Character string for the file path of the input PLINK binary #>           files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. Note: Input dataset should contain X and Y #>           regions. #>  #> impute_sex: Boolean value, 'TRUE' or 'FALSE', specifying sex to be #>           imputed or not. If 'TRUE' then sex-imputed PLINK files, #>           prefixed, 'seximputed_plink', will be produced in 'DataDir'. #>  #> compute_freq: Boolean value, 'TRUE' or 'FALSE', specifying minor allele #>           frequency (MAF). This function requires reasonable MAF #>           estimates, so it is essential to use 'compute_freq' = 'TRUE' #>           for computing MAF from an input PLINK file if there are very #>           few samples in the input dataset. The default is 'FALSE'. #>  #>       LD: Boolean value, 'TRUE' or 'FALSE' for applying linkage #>           disequilibrium (LD)-based filtering. The default is 'TRUE'. #>  #> LD_window_size: Integer value, specifying a window size in variant #>           count for LD-based filtering. The default is 50. #>  #> LD_step_size: Integer value, specifying a variant count to shift the #>           window at the end of each step for LD filtering. The default #>           is 5. #>  #> LD_r2_threshold: Numeric value between 0 to 1 of pairwise r^2 threshold #>           for LD-based filtering. The default is 0.02. #>  #>   fmax_F: Numeric value between 0 to 1. Samples with F estimates #>           smaller than this value will be labeled as females. The #>           default is 0.2. #>  #>   mmin_F: Numeric value between 0 to 1. Samples with F estimates larger #>           than this value will be labeled as males. The default is 0.8. #>  #> Value: #>  #>      A dataframe with six columns: #>  #>         • 'FID' (Family ID) #>  #>         • 'IID' (Individual ID) #>  #>         • 'PEDSEX '(Sex as determined in pedigree file (1=male, #>           2=female)) #>  #>         • 'SNPSEX' (Sex as determined by X chromosome) #>  #>         • 'STATUS' (Displays \"PROBLEM\" or \"OK\" for each individual) #>  #>         • 'F' (The actual X chromosome inbreeding (homozygosity) #>           estimate) #>  #>      A PROBLEM arises if the two sexes do not match, or if the SNP data #>      or pedigree data are ambiguous with regard to sex. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      LD <- TRUE #>      LD_window_size <- 50 #>      LD_step_size <- 5 #>      LD_r2_threshold <- 0.02 #>      fmax_F <- 0.2 #>      mmin_F <- 0.8 #>      impute_sex <- FALSE #>      compute_freq <- FALSE #>       #>      x <- SexCheck( #>          DataDir = DataDir, ResultDir = ResultDir, finput = finput, impute_sex = impute_sex, #>          compute_freq = compute_freq, LD_window_size = LD_window_size, LD_step_size = LD_step_size, #>          LD_r2_threshold = 0.02, fmax_F = 0.2, mmin_F = 0.8 #>      ) #>       #>      # Checking if there is any wrong sex assignment #>      problematic_sex <- x[x$STATUS != \"OK\", ]"},{"path":"/articles/GXwasR_overview.html","id":"function-5","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 5","title":"GXwasR Overview","text":"","code":"help(Xhwe, package = \"GXwasR\") #> Xhwe: Filter X-chromosome variants for HWE in females. #>  #> Description: #>  #>      This function is a part of the post-imputation quality control #>      process prior to GWAS. This tests for Hardy-Weinberg Equilibrium #>      (HWE) for X-chromosome variants in females. Males' hemizygous X #>      chromosome prevents testing for HWE on their haploid X calls, and #>      testing for HWE across all samples would have a high failure rate. #>      This function will check for HWE across the X in females (cases #>      and controls combined), following the recommendation in Khramtsova #>      et al., 2023, and can remove these regions from analysis in all #>      samples. The p-value threshold for filtering out SNPs is #>      0.05/no.of. X-chromosome variants. #>  #> Usage: #>  #>      Xhwe(DataDir, ResultDir = tempdir(), finput, filterSNP = TRUE, foutput) #>       #> Arguments: #>  #>  DataDir: Character string for the file path of the input PLINK binary #>           files. #>  #> ResultDir: Character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. #>  #> filterSNP: Boolean value, 'TRUE' or 'FALSE' for filtering out the #>           X-chromosome variants i.e., SNPs from the input file or not #>           (i.e., only flagged). The default is 'FALSE'. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files if filtering option for the SNPs is chosen. The #>           default is \"FALSE\". #>  #> Value: #>  #>      A list object containing SNPs. If 'filterSNP' = 'TRUE', the output #>      filtered PLINK binary files will be produced inside 'DataDir'. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      foutput <- \"Test_output\" #>      x <- Xhwe( #>          DataDir = DataDir, ResultDir = ResultDir, #>          finput = finput, foutput = foutput, filterSNP = TRUE #>      ) #>      x"},{"path":"/articles/GXwasR_overview.html","id":"function-6","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 6","title":"GXwasR Overview","text":"","code":"help(MAFdiffSexControl, package = \"GXwasR\") #> MAFdiffSexControl: Test for significantly different minor allele #> frequency (MAF) between sexes in control samples #>  #> Description: #>  #>      With parameters to filter out SNPs and/or flag the SNPs, this #>      function tests for significantly different MAF (p-value < 0.05/no. #>      of SNPs) between sexes in control samples solely for binary #>      phenotypes. Since the disparities may be caused by technical #>      confounding or sample biases for the research cohorts, it is #>      advised that any SNPs in the controls with a sex difference in MAF #>      be carefully evaluated and identified for further examination #>      (Khramtsova et. al., 2023). In autosomal allele frequencies, sex #>      differences are not anticipated. #>  #> Usage: #>  #>      MAFdiffSexControl( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        filterSNP = FALSE, #>        foutput = NULL #>      ) #>       #> Arguments: #>  #>  DataDir: Character string for the file path of the input PLINK binary #>           files. #>  #> ResultDir: Character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files with both male and female samples. This file #>           needs to be in 'DataDir'. #>  #> filterSNP: Boolean value, 'TRUE' or 'FALSE' for filtering out the SNPs #>           or not (i.e., only flagged). The default is 'FALSE'. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files if filtering option for the SNPs is chosen. The #>           default is NULL. #>  #> Value: #>  #>      A list object containing excluded or flagged SNPs. If 'filterSNP' #>      = 'TRUE', the output filtered PLINK binary files will be produced #>      inside 'DataDir'. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      foutput <- \"Test_output\" #>      x <- MAFdiffSexControl(DataDir, ResultDir, finput, filterSNP = TRUE, foutput = foutput)"},{"path":"/articles/GXwasR_overview.html","id":"function-7","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 7","title":"GXwasR Overview","text":"","code":"help(FilterRegion, package = \"GXwasR\") #> FilterRegion: Filter chromosomal regions. #>  #> Description: #>  #>      Filtering Pseudo-Autosomal Region (PAR), X-transposed region #>      (XTR), Ampliconic, filter based on chromosome code or user-defined #>      regions from input PLINK files. Only one type of filtering can be #>      done from three types, either by region (using 'regionfile' = #>      'TRUE'), by chromosome ('filterCHR') or by any combination of #>      these three, 'filterPAR', 'filterXTR' and 'filterAmpliconic.' #>  #> Usage: #>  #>      FilterRegion( #>        DataDir, #>        ResultDir, #>        finput, #>        foutput, #>        CHRX = TRUE, #>        CHRY = FALSE, #>        filterPAR = TRUE, #>        filterXTR = TRUE, #>        filterAmpliconic = TRUE, #>        regionfile = FALSE, #>        filterCHR = NULL, #>        Hg = \"19\", #>        exclude = TRUE #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files if the filtering option for the SNPs is chosen. #>           The default is \"FALSE\". #>  #>     CHRX: Boolean value, 'TRUE' or 'FALSE' to filter/flag regions from #>           chromosome X. The default is 'TRUE'. Note: 'CHRX' only in #>           effect if one of 'filterPAR', 'filterXTR' or #>           'filterAmpliconic' filter is in effect. #>  #>     CHRY: Boolean value, 'TRUE' or 'FALSE' to filter/flag regions from #>           chromosome X. The default is 'FALSE'. Note: CHRY only in #>           effect if one of 'filterPAR', 'filterXTR' or #>           'filterAmpliconic' filter is in effect. #>  #> filterPAR: Boolean value, 'TRUE' or 'FALSE' to filter out PARs from #>           input PLINK file. The default is 'TRUE'. #>  #> filterXTR: Boolean value, 'TRUE' or 'FALSE' to filter out XTRs from #>           input PLINK file. The default is 'TRUE'. #>  #> filterAmpliconic: Boolean value, 'TRUE' or 'FALSE' to filter out #>           Ampliconic regions from input PLINK file. The default is #>           'TRUE'. #>  #> regionfile: Character string, specifying the name of the .txt file #>           containing the user-defined regions to be filtered out from #>           input PLINK file in bed format. The default is 'FALSE'. If #>           'regionfile' = 'TRUE', only this filtering will be in effect. #>           Also, PAR, XTR and Ampliconic SNPs from X-chomosome will be #>           flagged and returned. #>  #> filterCHR: Vector value with positive integer, specifying the #>           chromosome code to filter/flag the SNPs. The default is 0, #>           means no filtering based on chromosome code. For non-zero #>           values of this argument, the function will only consider the #>           chromosome code to filter or flag. All other filtering will #>           not work. If filterCHR = TRUE, only this filtering will be in #>           effect. Also, PAR, XTR and Ampliconic SNPs from X-chomosome #>           will be flagged and returned. #>  #>       Hg: Character value, '19', or '38', specifying which genome build #>           to use for PAR, XTR and Ampliconic regions. The default is Hg #>           = \"19\". #>  #>  exclude: Boolean value, 'TRUE' or 'FALSE' to filter and flag or only #>           flag the SNPs. The default is 'TRUE'. #>  #> Value: #>  #>      A list of three dataframes: PAR containing SNPs from PAR regions; #>      XTR containing SNPs from XTR region and Ampliconic containing SNPs #>      from Ampliconic region. #>  #>      For non-zero value of 'filterCHR', a dataframe containing the #>      excluded/flagged SNPs will be returned. #>  #>      For 'exclude' = 'TRUE', two sets of PLINK binary files will be #>      produced in ResultDir. One set will have the remaining SNPs after #>      filtering and other one will have the discarded SNPs. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      foutput <- \"PostimputeEX_QC1\" #>      x <- FilterRegion( #>          DataDir = DataDir, ResultDir = ResultDir, #>          finput = finput, foutput = foutput, CHRX = TRUE, CHRY = FALSE, #>          filterPAR = TRUE, filterXTR = TRUE, filterAmpliconic = TRUE, #>          regionfile = FALSE, filterCHR = NULL, Hg = \"38\", exclude = TRUE #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-8","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 8","title":"GXwasR Overview","text":"","code":"help(GXwas, package = \"GXwasR\") #> GXwas: Running genome-wide association study (GWAS) and #> X-chromosome-wide association study (XWAS) models. #>  #> Description: #>  #>      This function runs GWAS models in autosomes with several #>      alternative XWAS models. Models such as #>      \"FMcombx01\",\"FMcombx02\",and \"FMstratified\" can be applied to both #>      binary and quantitative traits, while \"GWAcxci\" can only be #>      applied to a binary trait. #>  #>      For binary and quantitative features, this function uses logistic #>      and linear regression, allowing for multiple covariates and the #>      interactions with those covariates in a multiple-regression #>      approach. These models are all run using the additive effects of #>      SNPs, and each additional minor allele's influence is represented #>      by the direction of the regression coefficient. #>  #>      This function attempts to identify the multi-collinearity among #>      predictors by displaying NA for the test statistic and a p-value #>      for all terms in the model. The more terms you add, the more #>      likely you are to run into issues. #>  #>      For details about the different XWAS model, please follow the #>      associated publication. #>  #> Usage: #>  #>      GXwas( #>        DataDir, #>        ResultDir, #>        finput, #>        trait = c(\"binary\", \"quantitative\"), #>        standard_beta = TRUE, #>        xmodel = c(\"FMcombx01\", \"FMcombx02\", \"FMstratified\", \"GWAScxci\"), #>        sex = FALSE, #>        xsex = FALSE, #>        covarfile = NULL, #>        interaction = FALSE, #>        covartest = c(\"ALL\"), #>        Inphenocov = c(\"ALL\"), #>        combtest = c(\"fisher.method\", \"fisher.method.perm\", \"stouffer.method\"), #>        MF.zero.sub = 1e-05, #>        B = 10000, #>        MF.mc.cores = 1, #>        MF.na.rm = FALSE, #>        MF.p.corr = \"none\", #>        plot.jpeg = FALSE, #>        plotname = \"GXwas.plot\", #>        snp_pval = 1e-08, #>        annotateTopSnp = FALSE, #>        suggestiveline = 5, #>        genomewideline = 7.3, #>        ncores = 0 #>      ) #>       #> Arguments: #>  #>  DataDir: Character string for the file path of the input PLINK binary #>           files. #>  #> ResultDir: Character string for the folder path where the outputs will #>           be saved. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files with both male and female samples. This file #>           needs to be in 'DataDir'. #>  #>           Note: Case/control phenotypes are expected to be encoded as #>           1=unaffected (control), 2=affected (case); 0 is accepted as #>           an alternate missing value encoding. The missing case/control #>           or quantitative phenotypes are expected to be encoded as #>           'NA'/'nan' (any capitalization) or -9. #>  #>    trait: Boolean value, 'binary' or 'quantitative' for the phenotype #>           i.e. the trait. #>  #> standard_beta: Boolean value, 'TRUE' or 'FALSE' in case of quantitative #>           trait for standardizing the trait or phenotype values (mean #>           0, unit variance), so the resulting coefficients will be #>           standardized. The default is 'TRUE'. #>  #>   xmodel: Models \"FMcombx01\",\"FMcombx02\",and \"FMstratified\" can be #>           chosen for both binary and quantitative traits while #>           \"GWAcxci\" can only apply to the binary trait. These models #>           take care of the X-chromosomal marker. Three female genotypes #>           are coded by 0, 1, and 2 in FM01 and FM02. The two genotypes #>           of males that follow the X-chromosome inactivation (XCI) #>           pattern as random (XCI-R) in the FM01 model are coded by 0 #>           and 1, while the two genotypes that follow the XCI is escaped #>           (XCI-E) in the FM02 model are coded by 0 and 1. To reflect #>           the dose compensation connection between the sexes, FM02 #>           treats men as homozygous females. #>  #>           In the \"FMstratified\" associations are tested separately for #>           males and females, and then the combined p values are #>           computed the Fisher's method, Fisher's method with #>           permutation, or Stouffer's method(1,3-7]. An X-chromosome #>           inactivation (XCI) pattern, or coding technique for #>           X-chromosomal genotypes between sexes, is not required for #>           the XCGA. By simultaneously accounting for four distinct XCI #>           patterns, namely XCI-R, XCI-E, XCI-SN (XCI fully toward #>           normal allele), and XCI-SR (XCI fully toward risk allele), #>           this model may maintain a respectably high power (Su et al. #>           2022). #>  #>           Note: 'sex' shouldn't be provided as a covariate in the XCGA #>           model. #>  #>      sex: Boolean value, 'TRUE' or 'FALSE' for using sex as covariate #>           in association test. It is applicable genome-wide. #>  #>           The default is FALSE. #>  #>     xsex: Boolean value, 'TRUE' or 'FALSE' for using sex as covariate #>           in association test for X-chromosomal SNPs. The default is #>           FALSE. This will overwrite 'sex' argument for X-chromosome. #>  #> covarfile: Character string for the full name of the covariate file in #>           .txt format. This file should be placed in 'DataDir'. #>  #>           Note about the covariate file: The first column of this file #>           should be 'FID', the second column should be 'IID' and the #>           other columns should be covariates. The primary header line #>           should be there starting with “FID”, and “IID” followed by #>           covariate names. If an individual is not present in the #>           covariate file, or if the individual has a missing phenotype #>           value (i.e. -9 by default) for the covariate, then that #>           individual is set to missing (i.e. will be excluded from #>           association analysis). It is important to note that for #>           stratified GWAS model, if PCs are included as covar then it #>           should be generated separately for each cohort and then #>           included in the covarfile. Use the function 'DummyCovar' to #>           generate a new covariate file with categorical variables #>           down-coded as binary dummy variables for the covariate file #>           with categorical variables. For instance, if a variable has K #>           categories, K-1 new dummy variables are constructed, and the #>           original covariate is now estimated with a coefficient for #>           each category. #>  #> interaction: Boolean value, 'TRUE' or 'FALSE' for including SNP x #>           covariate interaction term/terms from the association #>           analysis. The default is 'FALSE'. If a permutation procedure #>           is chosen then the interaction will be automatically 'FALSE'. #>           For the interaction with the two covariates COV1 and COV2, #>           the model will look like: Y = b0 + b1.ADD + b2.COV1 + b3.COV2 #>           + b4.ADD x COV1 + b5.ADD x COV2 + e. When interaction factors #>           are incorporated into the model, the main effects' #>           significance is not always determined simply; rather, it #>           depends on the arbitrary coding of the variables. To put it #>           another way, you should probably just interpret the p-value #>           for the interaction. Also, The p-values for the covariates do #>           not represent the test for the SNP-phenotype association #>           after controlling for the covariate. That is the first row #>           (ADD). Rather, the covariate term is the test associated with #>           the covariate-phenotype association. These p-values might be #>           extremely significant (e.g. if one covaries for smoking in an #>           analysis of heart disease, etc) but this does not mean that #>           the SNP has a highly significant effect necessarily. Note #>           that, this feature is not valid for XCGA model for XWAS part. #>  #> covartest: Vector value with 'NULL',\"ALL\" or covariate name/names to be #>           included in the test. The default is 'NULL.' For instance, #>           the user can choose “AGE” and “SEX” as covartest = c(“AGE”, #>           “SEX”) or all the covariates as covartest = c(“ALL”). #>  #> Inphenocov: Vector of integer values starting from 1 to extract the #>           terms which user wants from the above model: Y = b0 + b1.ADD #>           + b2.COV1 + b3.COV2 + b4.ADDxCOV1 + b5.ADDxCOV2 + e. The #>           terms will appear in order as (Purcell et al. 2007) for ADD, #>           (Su et al. 2022) for COV1, (Rhodes 2002) for ADD x COV1, and #>           (Moreau and others 2003) for ADD x COV2. If the user wants to #>           extract the terms for COV1 and ADD x COV1, they need to #>           specify it as c(2,4). The default is c(“ALL”). #>  #>           Note: This feature is not valid for the XCGA model for the #>           XWAS part. #>  #> combtest: Character vector specifying method for combining p-values #>           after stratified GWAS/XWAS models. Choices are #>           “stouffer.method”, \"fisher.method\" and \"fisher.method.perm\". #>           For fisher.method the function for combining p-values uses a #>           statistic, S = -2 ∑^k /log p, which follows a χ^2 #>           distribution with 2k degrees of freedom (Fisher 1925). #>  #>           For fisher.method.perm, using p-values from stratified tests, #>           the summary statistic for combining p-values is S = -2 ∑ /log #>           p. A p-value for this statistic can be derived by randomly #>           generating summary statistics (Rhodes 2002). Therefore, a #>           p-value is randomly sampled from each contributing study, and #>           a random statistic is calculated. The fraction of random #>           statistics greater or equal to S then gives the final #>           p-value. #>  #>           For stouffer.method ,the function applies Stouffer’s method #>           (Stouffer et al. 1949) to the p-values assuming that the #>           p-values to be combined are independent. Letting p1, p2, . . #>           . , pk denote the individual (one- or two-sided) p-values of #>           the k hypothesis tests to be combined, the test statistic is #>           then computed with $z = ∑^k_{1}frac{z_{i}}{sqrt(k)}$ where #>           $z_{i}$ = Φ−1 (1 – $p_{i}$) and Φ −1 (·) denotes the inverse #>           of the cumulative distribution function of a standard normal #>           distribution. Under the joint null hypothesis, the test #>           statistic follows a standard normal distribution which is #>           used to compute the combined p-value. This functionality is #>           taken from the R package poolr (Cinar and Viechtbauer 2022). #>  #>           Note that only p-values between 0 and 1 are allowed to be #>           passed to these methods. #>  #>           Note: Though this parameter is enabled for both autosome GWAS #>           and XWAS, the combining pvalue after sex-stratified test is #>           recommended to ChrX only. #>  #> MF.zero.sub: Small numeric value for substituting p-values of 0 in in #>           stratified GWAS with FM01comb and FM02comb XWAS models. The #>           default is 0.00001. As log(0) results in Inf this replaces #>           p-values of 0 by default with a small float. #>  #>        B: Integer value specifying the number of permutation in case of #>           using fisher.method.perm method in stratified GWAS with #>           FM01comb and FM02comb XWAS models. The default is 10000. #>  #> MF.mc.cores: Number of cores used for fisher.method.perm in stratified #>           GWAS with FM01comb and FM02comb XWAS models. #>  #> MF.na.rm: Boolean value, 'TRUE' or 'FALSE' for removing p-values of NA #>           in stratified GWAS with FM01comb and FM02comb XWAS in case of #>           using Fisher’s and Stouffer’s methods. The default is FALSE. #>  #> MF.p.corr: Character vector specifying method for correcting the #>           summary p-values for FMfcomb and FMscomb models. Choices are #>           \"bonferroni\", \"BH\" and \"none\" for Bonferroni, #>           Benjamini-Hochberg and none, respectively. The default is #>           \"none\". #>  #> plot.jpeg: Boolean value, 'TRUE' or 'FALSE' for saving the plots in #>           .jpeg file. The default is TRUE. #>  #> plotname: A character string specifying the prefix of the file for #>           plots. This file will be saved in DataDir. The default is #>           \"GXwas.plot\". #>  #> snp_pval: Numeric value as p-value threshold for annotation. SNPs below #>           this p-value will be annotated on the plot. The default is #>           1e-08. #>  #> annotateTopSnp: Boolean value, 'TRUE' or 'FALSE. If TRUE, it only #>           annotates the top hit on each chromosome that is below the #>           snp_pval threshold. The default is FALSE. #>  #> suggestiveline: The default is 5 (for p-value 1e-05). #>  #> genomewideline: The default is 7.3 (for p-value 5e-08). #>  #>   ncores: Integer value, specifying the number of cores for parallel #>           processing. The default is 0 (no parallel computation). #>  #> Value: #>  #>      A dataframe with GWAS (with XWAS for X-chromosomal variants) along #>      with Manhattan and Q-Q plots. In the case of the stratified test, #>      the return is a list containing three dataframes, namely, FWAS, #>      MWAS, and MFWAS with association results in only female, only #>      male, and both cohorts, respectively. This will be accompanied by #>      Miami and Q-Q plots. The individual manhattan and Q-Q-plots for #>      stratified tests prefixed with xmodel type will be in the DataDir. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      Cinar O, Viechtbauer W (2022). \"The poolr package for combining #>      independent and dependent p values.\" _Journal of Statistical #>      Software_, *101*(1), 1-42. doi:10.18637/jss.v101.i01 #>      <https://doi.org/10.18637/jss.v101.i01>. #>  #>      Fisher RA (1925). _Statistical Methods for Research Workers_. #>      Oliver and Boyd, Edinburgh. #>  #>      Moreau Y, others (2003). \"Comparison and meta-analysis of #>      microarray data: from the bench to the computer desk.\" _Trends in #>      Genetics_, *19*(10), 570-577. #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #>      Rhodes DR (2002). \"Meta-analysis of microarrays: interstudy #>      validation of gene expression profiles reveals pathway #>      dysregulation in prostate cancer.\" _Cancer Research_, *62*(15), #>      4427-4433. #>  #>      Stouffer SA, Suchman EA, DeVinney LC, Star SA, Williams RM (1949). #>      _The American Soldier: Adjustment During Army Life_, volume 1. #>      Princeton University Press, Princeton, NJ. #>  #>      Su Y, Hu J, Yin P, Jiang H, Chen S, Dai M, Chen Z, Wang P (2022). #>      \"XCMAX4: A Robust X Chromosomal Genetic Association Test #>      Accounting for Covariates.\" _Genes (Basel)_, *13*(5), 847. #>      doi:10.3390/genes13050847 <https://doi.org/10.3390/genes13050847>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/35627231>. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      standard_beta <- TRUE #>      xsex <- FALSE #>      sex <- TRUE #>      Inphenocov <- NULL #>      covartest <- NULL #>      interaction <- FALSE #>      MF.na.rm <- FALSE #>      B <- 10000 #>      MF.zero.sub <- 0.00001 #>      trait <- \"binary\" #>      xmodel <- \"FMcombx02\" #>      combtest <- \"fisher.method\" #>      snp_pval <- 1e-08 #>      covarfile <- NULL #>      ncores <- 0 #>      MF.mc.cores <- 1 #>      ResultGXwas <- GXwas( #>          DataDir = DataDir, ResultDir = ResultDir, #>          finput = finput, xmodel = xmodel, trait = trait, covarfile = covarfile, #>          sex = sex, xsex = xsex, combtest = combtest, MF.p.corr = \"none\", #>          snp_pval = snp_pval, plot.jpeg = TRUE, suggestiveline = 5, genomewideline = 7.3, #>          MF.mc.cores = 1, ncores = ncores #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-9","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 9","title":"GXwasR Overview","text":"","code":"help(PvalComb, package = \"GXwasR\") #> PvalComb #>  #> Description: #>  #>      This function combines the p-values of two separate GWAS summary #>      statistics (for instance male and female populations), merges #>      them, and then applies various statistical methods (like #>      Stouffer's method, Fisher's method) to integrate the p-values. It #>      also includes functionality for generating plots like Manhattan #>      plots and Q-Q plots. #>  #> Usage: #>  #>      PvalComb( #>        SumstatMale, #>        SumstatFemale, #>        combtest, #>        MF.p.corr = \"none\", #>        MF.zero.sub = 1e-05, #>        MF.na.rm = TRUE, #>        MF.mc.cores = 1, #>        B = 1000, #>        plot.jpeg = TRUE, #>        plotname = \"GXwas.plot\", #>        PlotDir = tempdir(), #>        snp_pval, #>        annotateTopSnp = FALSE, #>        suggestiveline = 5, #>        genomewideline = 7.3, #>        ncores = 0 #>      ) #>       #> Arguments: #>  #> SumstatMale: R dataframe object of summary statistics of male GWAS with #>           five mandatory columns: #>  #>             • 'CHR' (numeric chromosome code) #>  #>             • 'SNP' (variant id) #>  #>             • 'A1' (allele) #>  #>             • 'POS' (base-pair position) #>  #>             • 'P' (p-value). #>  #>           Other columns may present. #>  #> SumstatFemale: R dataframe object of summary statistics of female GWAS #>           with five mandatory columns: #>  #>             • 'SNP' #>  #>             • 'A1' #>  #>             • 'TEST' #>  #>             • 'POS' #>  #>             • 'P' #>  #>           Other columns may present. #>  #> combtest: Character vector specifying method for combining p-values for #>           stratified GWAS models. Choices are “stouffer.method”, #>           \"fisher.method\" and \"fisher.method.perm\". For fisher.method #>           the function for combining p-values uses a statistic, S = -2 #>           ∑^k /log p, which follows a χ^2 distribution with 2k degrees #>           of freedom (Fisher 1925). For fisher.method.perm, using #>           p-values from stratified tests, the summary statistic for #>           combining p-values is S = -2 ∑ /log p. A p-value for this #>           statistic can be derived by randomly generating summary #>           statistics (Rhodes 2002). Therefore, a p-value is randomly #>           sampled from each contributing study, and a random statistic #>           is calculated. The fraction of random statistics greater or #>           equal to S then gives the final p-value. #>  #> MF.p.corr: Character vector specifying method for correcting the #>           summary p-values for FMfcomb and FMscomb models. Choices are #>           \"bonferroni\", \"BH\" and \"none\" for Bonferroni, #>           Benjamini-Hochberg and none, respectively. The default is #>           \"none\". #>  #> MF.zero.sub: Small numeric value for substituting p-values of 0 in GWAS #>           summary statistics. The default is 0.00001. As log(0) results #>           in Inf this replaces p-values of 0 by default with a small #>           float. #>  #> MF.na.rm: Boolean value, 'TRUE' or 'FALSE' for removing p-values of NA #>           in stratified GWAS summary satistics in case of using #>           Fisher’s and Stouffer’s methods. The default is 'TRUE'. #>  #> MF.mc.cores: Number of cores used for fisher.method.perm for combining #>           p-values. The default is 1. #>  #>        B: Integer value specifying the number of permutation in case of #>           using fisher.method.perm method. The default is 10000. #>  #> plot.jpeg: Boolean value, 'TRUE' or 'FALSE' for saving the plots in #>           .jpeg file. The default is 'TRUE'. #>  #> plotname: A character string specifying the prefix of the file for #>           plots. This file will be saved in DataDir. The default is #>           \"GXwas.plot\". #>  #>  PlotDir: A character string specifying the path of the directory where #>           the plots will be saved. The default is 'tempdir()'. #>  #> snp_pval: Numeric value as p-value threshold for annotation. SNPs below #>           this p-value will be annotated on the plot. The default is #>           1e-08. #>  #> annotateTopSnp: Boolean value, 'TRUE' or 'FALSE.' If 'TRUE', it only #>           annotates the top hit on each chromosome that is below the #>           snp_pval threshold. The default is 'FALSE'. #>  #> suggestiveline: Numeric value for suggestive cut-off line in GWAS #>           manhattan plot. The default is 5 (for p-value 1e-05). #>  #> genomewideline: Numeric value for genome-wide significant cut-off line #>           in GWAS manhattan plot. The default is 7.3 (for p-value #>           5e-08). #>  #>   ncores: Integer value, specifying the number of cores for parallel #>           processing. The default is 0 (no parallel computation). #>  #> Value: #>  #>      A dataframe with GWAS summary statistics (with XWAS for #>      X-chromosomal variants) along with Manhattan and Q-Q plots. #>  #> References: #>  #>      Fisher RA (1925). _Statistical Methods for Research Workers_. #>      Oliver and Boyd, Edinburgh. #>  #>      Rhodes DR (2002). \"Meta-analysis of microarrays: interstudy #>      validation of gene expression profiles reveals pathway #>      dysregulation in prostate cancer.\" _Cancer Research_, *62*(15), #>      4427-4433. #>  #> Examples: #>  #>      data(\"Mfile\", package = \"GXwasR\") #>      data(\"Ffile\", package = \"GXwasR\") #>      SumstatMale <- Mfile #>      colnames(SumstatMale)[3] <- \"POS\" #>      SumstatFemale <- Ffile #>      colnames(SumstatFemale)[3] <- \"POS\" #>      PvalComb_Result <- PvalComb( #>          SumstatMale = SumstatMale, SumstatFemale = SumstatFemale, #>          combtest = \"fisher.method\", MF.mc.cores = 1, snp_pval = 0.001, plot.jpeg = FALSE, #>          suggestiveline = 3, genomewideline = 5.69897, ncores = 1 #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-10","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 10","title":"GXwasR Overview","text":"","code":"help(SexDiff, package = \"GXwasR\") #> SexDiff: Sex difference in effect size for each SNP using t-test. #>  #> Description: #>  #>      This function uses the GWAS summary statistics from sex-stratified #>      tests like \"FMstratified\", to evaluate the difference in effect #>      size between males and females at each SNP using a t-test. #>  #>      The input dataframes should only include X-chromosome in order to #>      obtain results for sex differences based solely on X-linked loci. #>  #> Usage: #>  #>      SexDiff(Mfile, Ffile) #>       #> Arguments: #>  #>    Mfile: R dataframe of summary statistics of GWAS or XWAS of male #>           samples with six mandatory columns, #>           SNP(Variant),CHR(Chromosome number), BP(Base pair #>           position),A1(Minor allele),BETA_M(Effect size) and #>           SE_M(Standard error). This can be generated by running #>           FM01comb or \"FMstratified\" model with GXWAS function. #>  #>    Ffile: R dataframe of summary statistics of GWAS or XWAS of male #>           samples with six mandatory columns, #>           SNP(Variant),CHR(Chromosome number), BP(Base pair #>           position),A1(Minor allele),BETA_F(Effect size) and #>           SE_F(Standard error). This can be generated by running #>           FM01comb or \"FMstratified\" model with GXWAS function. #>  #> Value: #>  #>      R dataframe with seven columns: #>  #>         • 'SNP' (Variant) #>  #>         • 'CHR' (Chromosome number) #>  #>         • 'BP' (Base pair position) #>  #>         • 'A1' (Minor allele) #>  #>         • 'tstat' (t-statistics for effect-size test) #>  #>         • 'P' (p-value) and #>  #>         • 'adjP' (Bonferroni corrected p-value) #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      data(\"Mfile\", package = \"GXwasR\") #>      data(\"Ffile\", package = \"GXwasR\") #>      Difftest <- SexDiff(Mfile, Ffile) #>      significant_snps <- Difftest[Difftest$adjP < 0.05, ]"},{"path":"/articles/GXwasR_overview.html","id":"function-11","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 11","title":"GXwasR Overview","text":"","code":"help(SexDiffZscore, package = \"GXwasR\") #> SexDiffZscore: Z-score-based sex difference test. #>  #> Description: #>  #>      This function calculates the difference in any kind of measured #>      entities,(example: including SNP heritability estimate, genetic #>      correlation, and GWAS β values) between sexes using a Z-score and #>      its associated p-value statistic. When STAT/SE is normally #>      distributed and the test statistics are independent in sex, the #>      test is well calibrated. If the statistics are positively #>      correlated, this test is conservative (1). #>  #>      We could define SNPs with SDEs as those variants at the extreme #>      ends of the distribution with an absolute value of the Z-score #>      greater than 3(|Z-score| > 3), which is roughly equivalent to p #>      <10−3, and represents 0.3% of all tested SNPs. The input #>      dataframes should only include X-chromosome in order to obtain #>      results for sex differences based solely on X-linked loci. #>  #> Usage: #>  #>      SexDiffZscore(inputdata) #>       #> Arguments: #>  #> inputdata: A dataframe with five columns: #>  #>             • 'ID' (i.e., SNP ID or the phenotype of interest, etc.) #>  #>             • 'Fstat' (i.e., the measured statistics in females) #>  #>             • 'Fse' (i.e., the standard error of the measured #>               statistics in females) #>  #>             • 'Mstat' (i.e., the measured statistics in males) #>  #>             • 'Mse' (i.e., the standard error of the measured #>               statistics in males) #>  #> Value: #>  #>      Original input dataframe with: #>  #>         • 'Zscore' (i.e., Z-score), #>  #>         • 'p' (i.e., p-value) and #>  #>         • 'adjP' (i.e., Bonferroni corrected p-value) columns added. #>  #> Examples: #>  #>      data(\"Example_h2data\", package = \"GXwasR\") #>      inputdata <- Example_h2data #>      x <- SexDiffZscore(inputdata)"},{"path":"/articles/GXwasR_overview.html","id":"function-12","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 12","title":"GXwasR Overview","text":"","code":"help(DiffZeroOne, package = \"GXwasR\") #> DiffZeroOne: Assessing the Z-score for deviation from one and zero. #>  #> Description: #>  #>      This function tests the null hypothesis that a measured statistics #>      (example: genetic correlation, rg for a trait) < 1 using a #>      1-tailed test compared with a normal distribution (z = (1 − #>      measure statistics)/Standard error). For multiple tests, users are #>      encouraged to apply a Bonferroni multiple-testing correction. #>  #> Usage: #>  #>      DiffZeroOne(inputdata, diffzero = TRUE, diffone = TRUE) #>       #> Arguments: #>  #> inputdata: A dataframe object, containing three columns: #>  #>             • 'Trait' (i.e., the phenotype of interest) #>  #>             • 'Stat' (i.e., the measured statistics) #>  #>             • 'SE' (i.e., the standard error of the measured #>               statistics) #>  #> diffzero: Boolean value, 'TRUE' or 'FALSE', specifying to perform #>           deviation from 0 test. #>  #>  diffone: Boolean value, 'TRUE' or 'FALSE', specifying to perform #>           deviation from 1 test. #>  #> Value: #>  #>      A dataframe with columns: #>  #>         • 'Trait' #>  #>         • 'Stat' #>  #>         • 'SE' #>  #>         • 'P0' (i.e, p-value for deviation from zero test) #>  #>         • 'P1' (i.e., p-value for deviation from 1 test) #>  #> Examples: #>  #>      data(\"Example_rgdata\", package = \"GXwasR\") #>      inputdata <- Example_rgdata #>      colnames(inputdata) <- c(\"Trait\", \"Stat\", \"SE\") #>      x <- DiffZeroOne(inputdata, FALSE, TRUE)"},{"path":"/articles/GXwasR_overview.html","id":"function-13","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 13","title":"GXwasR Overview","text":"","code":"help(TestXGene, package = \"GXwasR\") #> TestXGene: Performing gene-based association test using GWAS/XWAS #> summary statistics. #>  #> Description: #>  #>      This function performs gene-based association tests using #>      GWAS/XWAS summary statistics and SNP-SNP correlation matrices. For #>      SNP-SNP correlation matrices, users have the flexibility to use #>      either the base genotype data or 1000 Genomes Phase 3 reference #>      genotype data. Users also have options to define the regional #>      positions of genes to include the SNPs according to their #>      investigation. #>  #>      This function computes gene-wise SNP-SNP correlation matrices and #>      can perform nine different gene-based tests, such as, “BT\" (burden #>      test), \"SKAT\" (sequence kernel association test), \"SKATO\" #>      (combination of BT and SKAT), \"sumchi\" (sum of χ2-statistics), #>      \"ACAT\" (aggregated Cauchy association test for combining P #>      values), \"PCA\"(principal component approach), \"FLM\"( functional #>      multiple linear regression model), \"simpleM\" (Bonferroni #>      correction test), \"minp\" (minimum P-value) leveraging PLINK1.9 #>      (Purcell et al. 2007) and sumFREGAT (Svishcheva et al. 2019; #>      Belonogova et al. 2022) tools. #>  #>      Though this function implicitly performs X-linked gene-based test, #>      it is flexible to perform this analysis genome-wide. For the #>      details about the different tests, please follow the associated #>      paper. #>  #> Usage: #>  #>      TestXGene( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        sumstat, #>        gene_file, #>        gene_range = 5e+05, #>        score_file, #>        ref_data = NULL, #>        max_gene = NULL, #>        sample_size = NULL, #>        genebasedTest = c(\"SKAT\", \"SKATO\", \"sumchi\", \"ACAT\", \"BT\", \"PCA\", \"FLM\", \"simpleM\", #>          \"minp\"), #>        gene_approximation = TRUE, #>        beta_par, #>        weights_function, #>        geno_variance_weights, #>        kernel_p_method = \"kuonen\", #>        acc_devies = 1e-08, #>        lim_devies = 1e+06, #>        rho = TRUE, #>        skato_p_threshold = 0.8, #>        anno_type = \"\", #>        mac_threshold, #>        reference_matrix_used, #>        regularize_fun, #>        pca_var_fraction = 0.85, #>        flm_basis_function = \"fourier\", #>        flm_num_basis = 25, #>        flm_poly_order = 4, #>        flip_genotypes = FALSE, #>        omit_linear_variant = FALSE #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the all the input #>           files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files for the genotype data. This file is used to #>           compute the correlation between the SNPs. This file needs to #>           be in DataDir. If the base genotype data is unavailable, then #>           users can use the 1000 Genomes Project samples. Users should #>           use the population that most closely represents the base #>           sample. For ACAT model, this parameter is not mandatory and #>           could be set 'NULL'. #>  #>  sumstat: A dataframe object with GWAS summary statistics. When the #>           base-genotype data is used to compute genetic correlations, #>           the mandatory columns are: #>  #>             • Column 1: 'CHROM' (i.e., chromosome code), #>  #>             • Column 2: 'POS' (i.e., base-pair position), #>  #>             • Column 3: 'ID' (i.e. SNP IDs), #>  #>             • Column 4: 'P' (i.e., p-values), #>  #>             • Column 5: 'BETA' (i.e., effect-size), #>  #>             • Column 6: 'A1' (i.e., effect allele), #>  #>             • Column 7: 'A2' (i.e., alternative allele) and #>  #>             • Column 8: 'EAF' (i.e., the effect allele frequency) #>  #>           These are mandatory when base-genotype data is used to #>           compute genetic correlations. Otherwise, if the users are #>           using reference data, then columns 5 to 8 are optional. Also, #>           in that case, columns, such as 'REF' (i.e., reference #>           allele), and 'ALT' (i.e., alternative allele) could be #>           present to compare alleles with those in the reference file #>           and exclude genetic variants if alleles do not match. There #>           could be an additional column, 'ANNO' with functional #>           annotations (like \"intron_variant\", \"synonymous\", \"missense\" #>           etc.) #>  #> gene_file: Character string, specifying the prefix of the name of a #>           .txt file listing genes in refFlat format. This file needs to #>           be in 'DataDir'. The X-linked gene files, #>           \"Xlinkedgenes_hg19.txt\" and \"Xlinkedgenes_hg38.txt\" and #>           autosomal gene files, “Autosomes_hg19.txt” and #>           “Autosomes_hg38.txt” can be specified. The default is #>           \"Xlinkedgenes_hg19.txt\". The genome built should be in #>           agreement with the analysis. #>  #> gene_range: Integer value, specifying the up stream and down stream #>           range (in kilo base) of a gene for SNPs to be considered. The #>           default is 500000. #>  #> score_file: Character string, specifying the prefix of a file which #>           will be used to produce score files with Z scores from P #>           values and beta input from GWAS summary statistics. #>  #> ref_data: Character string, specifying the path to a reference #>           dataframe with additional data needed to recode user data #>           according to correlation matrices that will be used. It #>           contains 'ID' column with names of SNPs, 'REF' and 'ALT' #>           columns with alleles that were coded as 0 and 1, #>           respectively. Effect sizes from data will be inverted for #>           variants with effect alleles different from 'ALT' alleles in #>           reference data. If presented, 'REF' and 'ALT' columns from #>           the input data will be used to sort out variants with alleles #>           different from those in reference data. This dataframe can #>           also be a source of map data and allele frequencies if they #>           are not present in data. 'AF' column in the reference file #>           represents the allele frequency of 'ALT' allele. The default #>           is \"ref1KG.MAC5.EUR_AF.RData\". #>  #> max_gene: Positive integer value, specifying the number of genes for #>           which the gene-based test will be performed. The default is #>           NULL to consider all the genes. #>  #> sample_size: Positive integer value, specifying the sample size of the #>           GWAS. Only needed for FLM and PCA models. #>  #> genebasedTest: Character string, specifying the name of the gene-based #>           test. Nine different tests can be specified, #>           \"SKAT\",\"SKATO\",\"sumchi\",\"ACAT\",\"BT\",\"PCA\", #>           \"FLM\",\"simpleM\",\"minp\". The default is \"SKAT\". #>  #> gene_approximation: Boolean value, 'TRUE' or 'FALSE', specifying #>           whether approximation for large genes (>= 500 SNPs) should be #>           used. Applicable for SKAT, SKATO, sumchi, PCA, FLM. The #>           default is 'TRUE' for these methods). #>  #> beta_par: Boolean value, 'TRUE' or 'FALSE', specifying whether #>           approximation for large genes (>= 500 SNPs) should be used. #>           Applicable for SKAT, SKATO, sumchi, PCA, FLM (default = #>           'TRUE' for these methods). #>  #> weights_function: A function of MAF to assign weights for each genetic #>           variant. By default is 'NULL'. In this case the weights will #>           be calculated using the beta distribution. #>  #> geno_variance_weights: Character string, indicating whether scores #>           should be weighted by the variance of genotypes: \"none\" #>           (i.e., no weights applied, resulting in a sum chi-square #>           test); \"se.beta\" (i.e., scores weighted by variance of #>           genotypes estimated from P values and effect sizes); \"af\" #>           (i.e., scores weighted by variance of genotypes calculated as #>           AF * (1 - AF), where AF is allele frequency. #>  #> kernel_p_method: Character string, specifying the method for computing #>           P value in kernel-based tests, such as SKAT, SKATO and #>           sumchi. Available methods are \"kuonen\" (Belonogova et al. #>           2022) \"davies\" (Belonogova et al. 2022) and \"hybrid\" #>           (Belonogova et al. 2022). The default is \"kuonen\". #>  #> acc_devies: Positive numeric value, specifying the accuracy parameter #>           for \"davies\" method. The default is 1e-8. #>  #> lim_devies: Positive numeric value, specifying the limit parameter for #>           \"davies\" method. The default is 1e+6. #>  #>      rho: Logical value, 'TRUE' or 'FALSE' or can be a vector of grid #>           values from 0 to 1. If TRUE, the optimal test (SKAT-O) is #>           performed (12). The default grid is c(0, 0.1^2, 0.2^2, 0.3^2, #>           0.4^2, 0.5^2, 0.5, 1). #>  #> skato_p_threshold: Positive numeric value, specifying the largest P #>           value that will be considered as important when performing #>           computational optimization in SKAT-O. All P values larger #>           than skato_p_threshold will be processed via burden test. The #>           default is 0.8 #>  #> anno_type: A character (or character vector) indicating annotation #>           types to be used. The default is \"\" (i.e, nothing). #>  #> mac_threshold: Integer value, specifying the threshold of MACs (Minor #>           allele content) calculated from MAFs. In ACAT, scores with #>           MAC <= 10 will be combined using Burden test. #>  #> reference_matrix_used: Boolean value, 'TRUE' or 'FALSE' logical #>           indicating whether the correlation matrices were generated #>           using the reference matrix. The default is 'FALSE'. If #>           'TRUE', regularization algorithms will be applied to ensure #>           the invertibility and numerical stability of the matrices. #>  #> regularize_fun: Character string, specifying the one of two #>           regularization algorithms if ‘reference_matrix’ is TRUE: 'LH' #>           (default) or 'derivLH'. Currently, both give similar results. #>  #> pca_var_fraction: P ositive numeric value, specifying the minimal #>           proportion of genetic variance within the region that should #>           be explained by principal components used in PCA method. This #>           is also valid in 'simpleM'. The default is 0.85. #>  #> flm_basis_function: Character string, specifying the name of a basis #>           function type for beta-smooth in FLM method. Can be set to #>           \"bspline\" (B-spline basis) or \"fourier\" (Fourier basis, #>           default). #>  #> flm_num_basis: Positive integer value, specifying the number of basis #>           functions to be used for beta-smooth in FLM method. The #>           default is 25. #>  #> flm_poly_order: Positive integer value, specifying the polynomial order #>           to be used in \"bspline\" for FLM model. The default = 4, which #>           corresponds to the cubic B-splines. This has no effect if #>           only Fourier bases are used #>  #> flip_genotypes: L ogical value, 'TRUE' or 'FALSE', indicating whether #>           the genotypes of some genetic variants should be flipped #>           (relabelled) for their better functional representation (13). #>           The default is 'FALSE'. #>  #> omit_linear_variant: Logical value, 'TRUE' or 'FALSE', indicating #>           whether to omit linearly dependent genetic variants. It was #>           done in the FLM test (4). The default is 'FALSE'. #>  #> Value: #>  #>      A data frame with columns: #>  #>         • gene #>  #>         • chrom #>  #>         • start #>  #>         • end #>  #>         • markers (i.e., numbers of SNPs), #>  #>         • filtered.markers (i.e. filtered SNPs) #>  #>         • pvalue (i.e., p-value). #>  #>      Additionally, for “BT”, there will be “beta” (i.e., gene-level #>      estimates of betas) and “beta.se” (i.e., standard errors of #>      betas). For “FLM”, there will be the “model” column with the names #>      of the functional models used for each region. Names shortly #>      describe the functional basis and the number of basis functions #>      used. E.g., \"F25\" means 25 Fourier basis functions, \"B15\" means 15 #>      B-spline basis functions. For “PCA”, there will be the #>      “ncomponents” (the number of the principal components used for #>      each region) and “explained.variance.fraction” (i.e., the #>      proportion of genetic variance they make up) columns. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      Belonogova NM, Svishcheva GR, Kirichenko AV, Zorkoltseva IV, #>      Tsepilov YA, Axenovich TI (2022). \"sumSTAAR: A flexible framework #>      for gene-based association studies using GWAS summary statistics.\" #>      _PLoS Computational Biology_, *18*(6), e1010172. #>      doi:10.1371/journal.pcbi.1010172 #>      <https://doi.org/10.1371/journal.pcbi.1010172>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/35653402>. #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #>      Svishcheva GR, Belonogova NM, Zorkoltseva IV, Kirichenko AV, #>      Axenovich TI (2019). \"Gene-based association tests using GWAS #>      summary statistics.\" _Bioinformatics_, *35*(19), 3701-3708. #>      doi:10.1093/bioinformatics/btz172 #>      <https://doi.org/10.1093/bioinformatics/btz172>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/30860568>. #>  #> Examples: #>  #>      if (!(Sys.getenv(\"CI\") == \"true\" && Sys.info()[[\"sysname\"]] == \"Darwin\")) { #>          data(\"XWAS_Summary_Example\", package = \"GXwasR\") #>          DataDir <- GXwasR:::GXwasR_data() #>          ResultDir <- tempdir() #>          finput <- \"GXwasR_example\" #>          sumstat <- XWAS_Summary_Example #>          ref_data <- NULL #>          gene_file <- \"Xlinkedgenes_hg19.txt\" #>          gene_range <- 500000 #>          max_gene <- 10 #>          gene_approximation <- TRUE #>          beta_par <- c(1, 25) #>          weights_function <- NULL #>          geno_variance_weights <- \"se.beta\" #>          method <- \"kuonen\" #>          acc_devies <- 1e-8 #>          lim_devies <- 1e+6 #>          rho <- TRUE #>          skato_p_threshold <- 0.8 #>          mac_threshold <- 3 #>          sample_size <- 4000 #>          reference_matrix_used <- FALSE #>          regularize_fun <- \"LH\" #>          pca_var_fraction <- 0.85 #>          flm_basis_function <- \"fourier\" #>          flm_num_basis <- 25 #>          flm_poly_order <- 4 #>          flip_genotypes <- FALSE #>          omit_linear_variant <- FALSE #>          kernel_p_method <- \"kuonen\" #>          anno_type <- \"\" #>          GenetestResult <- TestXGene(DataDir, ResultDir, finput, sumstat, gene_file, #>              gene_range, score_file, ref_data, max_gene, sample_size, #>              genebasedTest = \"SKAT\", #>              gene_approximation, beta_par, weights_function, geno_variance_weights, #>              kernel_p_method, acc_devies, lim_devies, rho, skato_p_threshold, anno_type, #>              mac_threshold, reference_matrix_used, regularize_fun, pca_var_fraction, #>              flm_basis_function, flm_num_basis, flm_poly_order, flip_genotypes, #>              omit_linear_variant #>          ) #>      }"},{"path":"/articles/GXwasR_overview.html","id":"function-14","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 14","title":"GXwasR Overview","text":"","code":"help(MetaGWAS, package = \"GXwasR\") #> MetaGWAS: Combining summary-level results from two or more GWA studies #> into a single estimate. #>  #> Description: #>  #>      This function combine K sets of GWAS association statistics on #>      same (or at least similar) phenotype. This function employs #>      PLINK's (Purcell et al. 2007) inverse variance-based analysis to #>      run a number of models, including a) Fixed-effect model and b) #>      Random-effect model, assuming there may be variation between the #>      genuine underlying effects, i.e., effect size beta. 'This function #>      also calculates weighted Z-score-based p-values after METAL #>      (Willer et al. 2010). For more information about the algorithms, #>      please see the associated paper. #>  #> Usage: #>  #>      MetaGWAS( #>        DataDir, #>        SummData = c(\"\"), #>        ResultDir = tempdir(), #>        SNPfile = NULL, #>        useSNPposition = TRUE, #>        UseA1 = FALSE, #>        GCse = TRUE, #>        plotname = \"Meta_Analysis.plot\", #>        pval_filter = \"R\", #>        top_snp_pval = 1e-08, #>        max_top_snps = 6, #>        chosen_snps_file = NULL, #>        byCHR = FALSE, #>        pval_threshold_manplot = 1e-05 #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input files #>           needed for 'SummData' and 'SNPfile' arguments. #>  #> SummData: Vector value containing the name(s) of the .Rda file(s) with #>           GWAS summary statistics, with ‘SNP’ (i.e., SNP identifier), #>           ‘BETA’ (i.e., effect-size or logarithm of odds ratio), ‘SE’ #>           (i.e., standard error of BETA), ‘P’ (i.e., p-values), 'NMISS' #>           (i.e., effective sample size), 'L95' (i.e., lower limit of #>           95% confidence interval) and 'U95' (i.e., upper limit of 95% #>           confidence interval) are in mandatory column headers. These #>           files needed to be in DataDir. If the numbers of cases and #>           controls are unequal, effective sample size should be 4 / #>           (1/<# of cases> + 1/<# of controls>). A smaller \"effective\" #>           sample size may be used for samples that include related #>           individuals, however simulations indicate that small changes #>           in the effective sample size have relatively little effect on #>           the final p-value (Willer et al. 2010). Columns, such as, #>           'CHR' (Chromosome code), 'BP' (Basepair position), 'A1' #>           (First allele code), 'A2' (Second allele code) columns are #>           optional. If these are present, setting 'useSNPposition' to #>           'FALSE', causes 'CHR', 'BP' and 'A1' to be ignored and #>           setting 'UseA1' to be 'FALSE' causes 'A1' to be ignored. If, #>           both these arguments are 'TRUE', this function takes care of #>           A1/A2 allele flips properly. Otherwise, A1 mismatches are #>           thrown out. Values of CHR/BP are allowed to vary. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>  SNPfile: Character string specifying the name of the plain-text file #>           with a column of SNP names. These could be LD clumped SNPs or #>           any other list of chosen SNPs for Meta analysis. This file #>           needs to be in 'DataDir'. #>  #> useSNPposition: Boolean value, 'TRUE' or 'FALSE' for using 'CHR', 'BP', #>           and 'A1' or not. The default is 'FALSE.' Note: if this is #>           'FALSE' then there will be no Manhattan and QQ plot will be #>           generated. #>  #>    UseA1: Boolean value, 'TRUE' or 'FALSE' for 'A1' to be used or not. #>           The default is 'FALSE'. #>  #>     GCse: Boolean value, 'TRUE' or 'FALSE' for applying study specific #>           genomic control to adjust each study for potential population #>           structure for all the SNPs. The default is 'TRUE'. If users #>           would want to apply genomic control separately for directly #>           genotyped and imputed SNPs prior using the function, set this #>           parameter as 'FALSE'. #>  #> plotname: Character string, specifying the plot name of the file #>           containing forest plots for the SNPs. The default is #>           “Meta_Analysis.plot”. #>  #> pval_filter: Character value as \"R\",\"F\" or \"W\", specifying whether #>           p-value threshold should be chosen based on “Random”, “Fixed” #>           or “Weighted” effect model for the SNPs to be included in the #>           forest plots. #>  #> top_snp_pval: Numeric value, specifying the threshold to be used to #>           filter the SNPs for the forest plots. The default is 1e-08. #>  #> max_top_snps: Integer value, specifying the maximum number of top SNPs #>           (SNPs with the lowest p-values) to be ploted in the forest #>           plot file. The default is 6. #>  #> chosen_snps_file: Character string specifying the name of the #>           plain-text file with a column of SNP names for the forest #>           plots. The default is NULL. #>  #>    byCHR: Boolean value, 'TRUE' or 'FALSE', specifying whether the meta #>           analysis will be performed chromosome wise or not. The #>           default is 'FALSE'. #>  #> pval_threshold_manplot: Numeric value, specifying the p-value threshold #>           for plotting Manhattan plots. #>  #> Value: #>  #>      A list object containing five dataframes. The first three #>      dataframes, such as Mfixed, Mrandom and Mweighted contain results #>      for fixed effect, random effect and weighted model. Each of these #>      dataframes can have maximum 12 columns, such as: #>  #>         • 'CHR' (Chromosome code) #>  #>         • 'BP' (Basepair position) #>  #>         • 'SNP' (SNP identifier) #>  #>         • 'A1' (First allele code) #>  #>         • 'A2' (Second allele code) #>  #>         • 'Q' (p-value for Cochrane's Q statistic) #>  #>         • 'I' (I^2 heterogeneity index (0-100)) #>  #>         • 'P' (P-value from mata analysis) #>  #>         • 'ES' (Effect-size estimate from mata analysis) #>  #>         • 'SE' (Standard Error from mata analysis) #>  #>         • 'CI_L' (Lower limit of confidence interval) #>  #>         • 'CI_U' (Uper limit of confidence interval) #>  #>      The fourth dataframe contains the same columns 'CHR', 'BP', 'SNP', #>      'A1', 'A2', 'Q', 'I'\", with column 'N'' ( Number of valid studies #>      for this SNP), P (Fixed-effects meta-analysis p-value), and other #>      columns as 'Fx...' (Study x (0-based input file indices) effect #>      estimate, Examples: F0, F1 etc.). #>  #>      The fifth dataframe, ProblemSNP has three columns, such as #>  #>         • 'File' (file name of input data), #>  #>         • 'SNP' (Problematic SNPs that are thrown) #>  #>         • 'Problem' (Problem code) #>  #>      Problem codes are: #>  #>         • BAD_CHR (Invalid chromosome code) #>  #>         • BAD_BP (Invalid base-position code), BAD_ES (Invalid #>           effect-size) #>  #>         • BAD_SE (Invalid standard error), MISSING_A1 (Missing allele 1 #>           label) #>  #>         • MISSING_A2 (Missing allele 2 label) #>  #>         • ALLELE_MISMATCH (Mismatching allele codes across files) #>  #>      A .pdf file comprising the forest plots of the SNPs is produced in #>      the ResultDir with Plotname as prefix. If 'useSNPposition' is set #>      'TRUE', a .jpeg file with Manhattan Plot and Q-Q plot will be in #>      the 'ResultDir' with Plotname as prefix. #>  #> References: #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #>      Willer CJ, Li Y, Abecasis GR (2010). \"METAL: fast and efficient #>      meta-analysis of genomewide association scans.\" _Bioinformatics_, #>      *26*(17), 2190-2191. doi:10.1093/bioinformatics/btq340 #>      <https://doi.org/10.1093/bioinformatics/btq340>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/20616382>. #>  #> Examples: #>  #>      data(\"Summary_Stat_Ex1\", package = \"GXwasR\") #>      data(\"Summary_Stat_Ex2\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      SummData <- list(Summary_Stat_Ex1, Summary_Stat_Ex2) #>      SNPfile <- \"UniqueLoci\" #>      useSNPposition <- FALSE #>      UseA1 <- TRUE #>      GCse <- TRUE #>      byCHR <- FALSE #>      pval_filter <- \"R\" #>      top_snp_pval <- 1e-08 #>      max_top_snps <- 10 #>      chosen_snps_file <- NULL #>      pval_threshold_manplot <- 1e-05 #>      plotname <- \"Meta_Analysis.plot\" #>      x <- MetaGWAS( #>          DataDir = DataDir, SummData = SummData, ResultDir = ResultDir, #>          SNPfile = NULL, useSNPposition = TRUE, UseA1 = UseA1, GCse = GCse, #>          plotname = \"Meta_Analysis.plot\", pval_filter, top_snp_pval, max_top_snps, #>          chosen_snps_file = NULL, byCHR, pval_threshold_manplot #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-15","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 15","title":"GXwasR Overview","text":"","code":"help(ComputePRS, package = \"GXwasR\") #> ComputePRS: Computing polygenic risk score (PRS) #>  #> Description: #>  #>      This function calculates the polygenic risk score, which is the #>      total of allele counts (genotypes) weighted by estimated effect #>      sizes from genome-wide association studies. It uses C+T filtering #>      techniques. The users could perform clumping procedure #>      choromosome-wise and genome-wide. Also, the function offers the #>      choice of including several genetic principal components along #>      with other covariates. Using this function, users have the freedom #>      to experiment with various clumping and thresholding arrangements #>      to test a wide range of various parameter values. #>  #> Usage: #>  #>      ComputePRS( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        summarystat, #>        phenofile, #>        covarfile = NULL, #>        effectsize = c(\"BETA\", \"OR\"), #>        ldclump = FALSE, #>        LDreference, #>        clump_p1, #>        clump_p2, #>        clump_r2, #>        clump_kb, #>        byCHR = TRUE, #>        pthreshold = c(0.001, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5), #>        highLD_regions, #>        ld_prunning = FALSE, #>        window_size = 50, #>        step_size = 5, #>        r2_threshold = 0.02, #>        nPC = 6, #>        pheno_type = \"binary\" #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the all the input #>           files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is tempdir(). #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files for the genotype data i.e., the target data #>           based on which clumping procedure will be performed. This #>           file needs to be in DataDir. If your target data are small #>           (e.g. N < 500) then you can use the 1000 Genomes Project #>           samples. Make sure to use the population that most closely #>           reflects represents the base sample. #>  #> summarystat: A dataframe object with GWAS summary statistics. #>  #>           The mandatory column headers in this dataframe are: #>  #>             • 'CHR'(Chromosome code) #>  #>             • 'BP'(Basepair position) #>  #>             • 'A1' (effect allele) #>  #>             • 'SNP' (i.e., SNP identifier) #>  #>             • 'BETA' or 'OR' (i.e., effect-size or logarithm of odds #>               ratio) #>  #>             • 'P' (i.e., p-values). #>  #>           Special Notes: The first three columns needed to be 'SNP', #>           'A1' and 'BETA' or 'OR'. #>  #> phenofile: A character string, specifying the name of the mandatory #>           phenotype file. This is a plain text file with no header #>           line; columns family ID, individual ID and phenotype columns. #>           For binary trait, the phenotypic value should be coded as 0 #>           or 1, then it will be recognized as a case-control study (0 #>           for controls and 1 for cases). Missing value should be #>           represented by \"-9\" or \"NA\". The interested phenotype column #>           should be labeled as \"Pheno1\". This file needs to be in #>           'DataDir'. #>  #> covarfile: A character string, specifying the name of the covariate #>           file which is a plain .text file with no header line; columns #>           are family ID, individual ID and the covariates. The default #>           is 'NULL'. This file needs to be in 'DataDir'. #>  #> effectsize: Boolean value, 'BETA' or 'OR', specifying the type of the #>           GWAS effectsize. The default is 'BETA'. #>  #>  ldclump: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           perform clumping or not. #>  #> LDreference: A character string, specifying the prefix of the PLINK #>           files of the population reference panel of the same ancestry, #>           and ideally the one that was used for imputing your target #>           dataset. These files should be in 'DataDir'. #>  #> clump_p1: Numeric value, specifying the significance threshold for #>           index SNPs if 'ldclump' was set to be 'TRUE'. The default is #>           0.0001. #>  #> clump_p2: Numeric value, specifying the secondary significance #>           threshold for clumped SNPs if 'ldclump' was set to be 'TRUE'. #>           The default is 0.01 #>  #> clump_r2: Numeric value, specifying the linkage disequilibrium (LD) #>           threshold for clumping if 'ldclump' was set to be 'TRUE'. The #>           default is 0.50. #>  #> clump_kb: Integer value, specifying the physical distance threshold in #>           base-pair for clumping if 'ldclump' was set to be 'TRUE'. The #>           default is 250. #>  #>    byCHR: Boolean value, 'TRUE' or 'FALSE', specifying chromosome-wise #>           clumping procedure if 'ldclump' was set to be 'TRUE'. The #>           default is 'TRUE' #>  #> pthreshold: Numeric vector, containing several p value thresholds to #>           maximize predictive ability of the derived polygenic scores. #>  #> highLD_regions: Character string, specifying the .txt file name with #>           known genomic regions with high LD. The default is 'NULL'. #>  #> ld_prunning: Boolean value, 'TRUE' or 'FALSE' for LD-based filtering #>           for computing genetic PC as covariates. #>  #> window_size: Integer value, specifying a window size in variant count #>           or kilobase for LD-based filtering in computing genetic PC. #>           The default is 50. #>  #> step_size: Integer value, specifying a variant count to shift the #>           window at the end of each step for LD filtering in computing #>           genetic PCs. The default is 5. #>  #> r2_threshold: Numeric value between 0 to 1 of pairwise r^2 threshold #>           for LD-based filtering in computing genetic PCs. The default #>           is 0.02. #>  #>      nPC: Positive integer value, specifying the number of genetic PCs #>           to be included as predictor in the PRS model fit. The default #>           is 6. #>  #> pheno_type: Boolean value, ‘binary’ or ‘quantitative’, specifying the #>           type of the trait. The default is ‘binary’. #>  #> Value: #>  #>      A list object containing a dataframe a numeric value, a GeneticPC #>      plot (if requested), and a PRS plot. The dataframe,PRS, contains #>      four mandatory columns, such as, IID (i.e., Individual ID), FID #>      (i.e., Family ID), Pheno1 (i.e., the trait for PRS) and Score #>      (i.e., the best PRS). Other columns of covariates could be there. #>      The numeric value, BestP contains the threshold of of the best #>      p-value for the best pRS model fit. #>  #>      Also, the function produces several plots such as p-value #>      thresholds vs PRS model fit and PRS distribution among male and #>      females. For case-control data, it shows PRS distribution among #>      cases and controls and ROC curves as well. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      data(\"Summary_Stat_Ex1\", package = \"GXwasR\") #>      data(\"Example_phenofile\", package = \"GXwasR\") #>      data(\"Example_covarfile\", package = \"GXwasR\") #>      data(\"Example_pthresoldfile\", package = \"GXwasR\") #>      data(\"highLD_hg19\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      summarystat <- Summary_Stat_Ex1[, c(2, 4, 7, 1, 3, 12)] #>      phenofile <- Example_phenofile # Cannot be NULL #>      # The interested phenotype column should be labeled as \"Pheno1\". #>      covarfile <- Example_covarfile #>      clump_p1 <- 0.0001 #>      clump_p2 <- 0.0001 #>      clump_kb <- 500 #>      clump_r2 <- 0.5 #>      byCHR <- TRUE #>      pthreshold <- Example_pthresoldfile$Threshold #>      ld_prunning <- TRUE #>      highLD_regions <- highLD_hg19 #>      window_size <- 50 #>      step_size <- 5 #>      r2_threshold <- 0.02 #>      nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification. #>      pheno_type <- \"binary\" #>       #>      PRSresult <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile, #>          effectsize = \"BETA\", LDreference = \"GXwasR_example\", ldclump = FALSE, clump_p1, clump_p2, #>          clump_r2, clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions, #>          ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6, #>          pheno_type = \"binary\" #>      ) #>       #>      ## This table shows 10 samples with phenotype, covariates and a PRS column. #>      PRS <- PRSresult$PRS #>      PRS[seq_len(10), ] #>      ## The best threshold #>      BestPvalue <- PRSresult$BestP$Threshold #>      BestPvalue"},{"path":"/articles/GXwasR_overview.html","id":"function-16","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 16","title":"GXwasR Overview","text":"","code":"help(GeneticCorrBT, package = \"GXwasR\") #> GeneticCorrBT: Computing genetic correlation between two traits. #>  #> Description: #>  #>      This function computes genetic correlation, a quantitative genetic #>      measure that describes the genetic link between two traits and has #>      been predicted to indicate pleiotropic gene activity or #>      correlation between causative loci in two traits. For example, it #>      does a bivariate GREML analysis to determine the genetic #>      association between two quantitative traits, two binary disease #>      traits from case-control studies, and between a quantitative trait #>      and a binary disease trait following (Yang et al. 2011; Lee et al. #>      2012). If users want, this function gives the flexibility to #>      compute the genetic correlation chromosome-wise. #>  #> Usage: #>  #>      GeneticCorrBT( #>        DataDir, #>        ResultDir, #>        finput, #>        byCHR = FALSE, #>        REMLalgo = c(0, 1, 2), #>        nitr = 100, #>        phenofile, #>        cat_covarfile = NULL, #>        quant_covarfile = NULL, #>        computeGRM = TRUE, #>        grmfile_name = NULL, #>        partGRM = FALSE, #>        autosome = TRUE, #>        Xsome = TRUE, #>        nGRM = 3, #>        cripticut = 0.025, #>        minMAF = NULL, #>        maxMAF = NULL, #>        excludeResidual = FALSE, #>        ncores = 2 #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the all the input #>           files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files for the genotype data. This file needs to be in #>           'DataDir'. #>  #>    byCHR: Boolean value, 'TRUE' or 'FALSE', specifying whether the #>           analysis will be performed chromosome wise or not. The #>           default is 'FALSE'. #>  #> REMLalgo: Integer value of 0, 1 or 2, specifying the algorithm to run #>           REML iterations, 0 for average information (AI), 1 for #>           Fisher-scoring and 2 for EM. The default option is 0, i.e. #>           AI-REML (1). #>  #>     nitr: Integer value, specifying the number of iterations for #>           performing the REML. The default is 100. #>  #> phenofile: A dataframe for Bivar RELM has four columns family ID, #>           individual ID and two trait columns. For binary trait, the #>           phenotypic value should be coded as 0 or 1, then it will be #>           recognized as a case-control study (0 for controls and 1 for #>           cases). Missing value should be represented by \"-9\" or \"NA\". #>  #> cat_covarfile: A character string, specifying the name of the #>           categorical covariate file which is a plain text file with no #>           header line; columns are family ID, individual ID and #>           discrete covariates. The default is 'NULL'. This file needs #>           to be in 'DataDir'. #>  #> quant_covarfile: A character string, specifying the name of the #>           quantitative covariate file which is a plain text file with #>           no header line; columns are family ID, individual ID and #>           continuous covariates. The default is 'NULL'. This file needs #>           to be in 'DataDir'. #>  #> computeGRM: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           compute GRM matrices or not. The default is 'TRUE'. #>  #> grmfile_name: A string of characters specifying the prefix of autosomal #>           .grm.bin file. Users need to provide separate GRM files for #>           autosomes and X chromosome in 'ResultDir'. The X chromosomal #>           GRM file should have \"x\" added in the autosomal prefix as #>           file name. #>  #>           For instance, if autosomal file is \"ABC.grm.bin\", then X #>           chromosomal file should be \"xABC.grm.bim\". If you are #>           providing chromosome-wise GRMs, then the prefix should add #>           \"ChrNumber_\" at the starting of the prefix like, #>           \"Chr1_ABC.grm.bin\". The default is 'NULL'. #>  #>  partGRM: Boolean value, 'TRUE' or 'FALSE', specifying whether the GRM #>           will be partitioned into n parts (by row) in GREML model. The #>           default is 'FALSE'. #>  #> autosome: Boolean value, 'TRUE' or 'FALSE', specifying whether estimate #>           of heritability will be done for autosomes or not. The #>           default is 'TRUE'. #>  #>    Xsome: Boolean value, 'TRUE' or 'FALSE', specifying whether estimate #>           of heritability will be done for X chromosome or not. The #>           default is 'TRUE'. #>  #>     nGRM: Integer value, specifying the number of the partition of the #>           GRM in GREML model. The default is 3. #>  #> cripticut: Numeric value, specifying the threshold to create a new GRM #>           of \"unrelated\" individuals in GREML model. The default is #>           arbitrary chosen as 0.025 following (Yang et al. 2011). #>  #>   minMAF: Positive numeric value (< maxMAF), specifying the minimum #>           threshold for the MAF filter of the SNPs in the Bivariate #>           GREML model. #>  #>   maxMAF: Positive numeric value (minMAF,1), specifying the maximum #>           threshold for the MAF filter of the SNPs in the Bivariate #>           GREML model. #>  #> excludeResidual: Boolean value, 'TRUE' or 'FALSE', specifying whether #>           to drop the residual covariance from the model. Recommended #>           to set this 'TRUE' if the traits were measured on different #>           individuals. The default is 'FALSE'. #>  #>   ncores: Integer value, specifying the number of cores to be used. #>  #> Value: #>  #>      A dataframe with minimum three columns: #>  #>         • Source\" (i.e., source of heritability) #>  #>         • Variance\" (i.e. estimated heritability) #>  #>         • SE\" (i.e., standard error of the estimated heritability) #>  #>      Source column will have rows, such as V(G)_tr1 (genetic variance #>      for trait 1), V(G)_tr2 (genetic variance for trait 2), C(G)_tr12 #>      (genetic covariance between traits 1 and 2),V(e)_tr1 (residual #>      variance for trait 1), V(e)_tr2 (residual variance for trait 2), #>      C(e)_tr12 (residual covariance between traits 1 and 2), Vp_tr1 #>      (proportion of variance explained by all SNPs for trait 1), Vp_tr2 #>      (proportion of variance explained by all SNPs for trait 2), #>      V(G)/Vp_tr1 (phenotypic variance for trait 1), V(G)/Vp_tr2 #>      (phenotypic variance for trait 2), rG (genetic correlation) and n #>      (sample size). In case of chromosome-wise analysis, there will be #>      'chromosome' column for chromosome code. #>  #> References: #>  #>      Lee SH, Wray NR, Goddard ME, Visscher PM (2012). \"Estimation of #>      pleiotropy between complex diseases using SNP-derived genomic #>      relationships and restricted maximum likelihood.\" #>      _Bioinformatics_, *28*, 2540-2542. #>      doi:10.1093/bioinformatics/bts474 #>      <https://doi.org/10.1093/bioinformatics/bts474>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/22843982>. #>  #>      Yang J, Lee SH, Goddard ME, Visscher PM (2011). \"GCTA: a tool for #>      Genome-wide Complex Trait Analysis.\" _American Journal of Human #>      Genetics_, *88*(1), 76-82. #>  #> Examples: #>  #>      data(\"Example_phenofile\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      byCHR <- TRUE #>      REMLalgo <- 0 #>      nitr <- 3 #>      ncores <- 3 #>      phenofile <- Example_phenofile # Cannot be NULL #>      cat_covarfile <- NULL #>      quant_covarfile <- NULL #>      partGRM <- FALSE # Partition the GRM into m parts (by row), #>      autosome <- TRUE #>      Xsome <- TRUE #>      cripticut <- 0.025 #>      minMAF <- 0.01 # if MAF filter apply #>      maxMAF <- 0.04 #>      excludeResidual <- TRUE #>       #>      genetic_correlation <- GeneticCorrBT( #>          DataDir = DataDir, ResultDir = ResultDir, finput = finput, byCHR = byCHR, #>          REMLalgo = 0, nitr = 10, phenofile = phenofile, cat_covarfile = NULL, quant_covarfile = NULL, #>          partGRM = FALSE, autosome = TRUE, Xsome = TRUE, nGRM = 3, #>          cripticut = 0.025, minMAF = NULL, maxMAF = NULL, excludeResidual = TRUE, ncores = ncores #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-17","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 17","title":"GXwasR Overview","text":"","code":"help(EstimateHerit, package = \"GXwasR\") #> EstimateHerit: Computing SNP heritability i.e., the proportion of #> phenotypic variance explained by SNPs. #>  #> Description: #>  #>      This functions performs two types of heritability estimation, #>      (i)GREML:Genomic relatedness matrix (GRM) restricted maximum #>      likelihood-based method following GCTA (Yang et al. 2011) and #>      (ii)LDSC: LD score regression-based method following #>      (Bulik-Sullivan et al. 2014; Privé et al. 2020). For the details, #>      please follow the associated paper. #>  #>      Prior to using this function, it is recommended to apply QCsnp and #>      QCsample to ensure data quality control. #>  #> Usage: #>  #>      EstimateHerit( #>        DataDir = NULL, #>        ResultDir = tempdir(), #>        finput = NULL, #>        precomputedLD = NULL, #>        indepSNPs = NULL, #>        summarystat = NULL, #>        ncores = 2, #>        model = c(\"LDSC\", \"GREML\"), #>        computeGRM = TRUE, #>        grmfile_name = NULL, #>        byCHR = FALSE, #>        r2_LD = 0, #>        LDSC_blocks = 20, #>        intercept = NULL, #>        chi2_thr1 = 30, #>        chi2_thr2 = Inf, #>        REMLalgo = c(0, 1, 2), #>        nitr = 100, #>        cat_covarfile = NULL, #>        quant_covarfile = NULL, #>        prevalence = NULL, #>        partGRM = FALSE, #>        autosome = TRUE, #>        Xsome = TRUE, #>        nGRM = 3, #>        cripticut = 0.025, #>        minMAF = NULL, #>        maxMAF = NULL, #>        hg = c(\"hg19\", \"hg38\"), #>        PlotIndepSNP = TRUE, #>        IndepSNP_window_size = 50, #>        IndepSNP_step_size = 5, #>        IndepSNP_r2_threshold = 0.02, #>        highLD_regions = NULL, #>        plotjpeg = TRUE, #>        plotname = \"Heritability_Plots\" #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the all the input #>           files. The default is 'NULL'. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files for the genotype data. This file needs to be in #>           'DataDir'. For LDSC model, if the original genotype data is #>           not available, Hapmap 3 or 1000Genome data can be used. If #>           use NULL, then you need to provide 'precomputedLD' argument. #>           See below. #>  #> precomputedLD: A dataframe object as LD matrix with columns: 'CHR', #>           'SNP', 'BP', 'ld_size', 'MAF', 'ld_score'. . The default is #>           'NULL'. #>  #> indepSNPs: A dataframe with independent SNP ids with column name #>           \"rsid\". The default is 'NULL'. #>  #> summarystat: A dataframe object with GWAS summary statistics. The #>           mandatory column headers in this dataframe are #>  #>             • 'chr' (Chromosome code), #>  #>             • 'pos' (Basepair position) #>  #>             • 'a1' (First allele code) #>  #>             • 'rsid' (i.e., SNP identifier) #>  #>             • 'beta' (i.e., effect-size or logarithm of odds ratio) #>  #>             • 'beta_se' (i.e., standard error of beta) #>  #>             • 'P' (i.e., p-values) #>  #>             • 'n_eff' (i.e., effective sample size) #>  #>           For case-control study, effective sample size should be 4 / #>           (1/<# of cases> + 1/<# of controls>). The default is 'NULL'. #>  #>   ncores: Integer value, specifying the number of cores to be used for #>           running LDSC model. The default is 2. #>  #>    model: Character string, specifying the heritability estimation #>           model. There are two options, “GREML” or “LDSC”. The default #>           is “GREML”. #>  #>           Note: argument For LDSC, DataDir and finput can be 'NULL'. #>  #> computeGRM: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           compute GRM matrices or not. The default is 'TRUE'. #>  #> grmfile_name: A string of characters specifying the prefix of autosomal #>           .grm.bin file. Users need to provide separate GRM files for #>           autosomes and X chromosome in 'ResultDir'. #>  #>           The X chromosomal GRM file should have \"x\" added in the #>           autosomal prefix as file name. For instance, if autosomal #>           file is \"ABC.grm.bin\", then X chromosomal file should be #>           \"xABC.grm.bim\". #>  #>           If you are providing chromosome-wise GRMs, then the prefix #>           should add \"ChrNumber_\" at the start of the prefix like, #>           \"Chr1_ABC.grm.bin\". The default is NULL. #>  #>    byCHR: Boolean value, 'TRUE' or 'FALSE', specifying whether the #>           analysis will be performed chromosome wise or not. The #>           default is 'FALSE'. #>  #>    r2_LD: Numeric value, specifying the LD threshold for clumping in #>           LDSC model. The default is 0. #>  #> LDSC_blocks: Integer value, specifying the block size for performing #>           jackknife variance estimator in LDSC model following (Privé #>           et al. 2020). The default is 200. #>  #> intercept: Numeric value to constrain the intercept to some value (e.g. #>           1) in LDSC regression. Default is 'NULL'. #>  #> chi2_thr1: Numeric value for threshold on chi2 in step 1 of LDSC #>           regression. Default is 30. #>  #> chi2_thr2: Numeric value for threshold on chi2 in step 2. Default is #>           'Inf' (none). #>  #> REMLalgo: Integer value of 0, 1 or 2, specifying the algorithm to run #>           REML iterations, 0 for average information (AI), 1 for #>           Fisher-scoring and 2 for EM. The default option is 0, i.e. #>           AI-REML (Yang et al. 2011). #>  #>     nitr: Integer value, specifying the number of iterations for #>           performing the REML. The default is 100. #>  #> cat_covarfile: A character string, specifying the name of the #>           categorical covariate file which is a plain text file with no #>           header line; columns are family ID, individual ID and #>           discrete covariates. The default is 'NULL'. This file needs #>           to be in 'DataDir'. #>  #> quant_covarfile: A character string, specifying the name of the #>           quantitative covariate file which is a plain text file with #>           no header line; columns are family ID, individual ID and #>           continuous covariates. The default is 'NULL'. This file needs #>           to be in 'DataDir'. #>  #> prevalence: Numeric value, specifying the disease prevalence. The #>           default is 'NULL'. #>  #>           Note: for the continuous trait value, users should use the #>           default. #>  #>  partGRM: Boolean value, 'TRUE' or 'FALSE', specifying whether the GRM #>           will be partitioned into n parts (by row) in GREML model. The #>           default is 'FALSE'. #>  #> autosome: Boolean value, 'TRUE' or 'FALSE', specifying whether estimate #>           of heritability will be done for autosomes or not. The #>           default is 'TRUE'. #>  #>    Xsome: Boolean value, 'TRUE' or 'FALSE', specifying whether estimate #>           of heritability will be done for X chromosome or not. The #>           default is 'TRUE'. #>  #>     nGRM: Integer value, specifying the number of the partition of the #>           GRM in GREML model. The default is 3. #>  #> cripticut: Numeric value, specifying the threshold to create a new GRM #>           of \"unrelated\" individuals in GREML model. The default is #>           arbitrary chosen as 0.025 following (Yang et al. 2011). #>  #>   minMAF: Positive numeric value (0,1), specifying the minimum #>           threshold for the MAF filter of the SNPs in the GREML model. #>           This value cannot be greater than 'maxMAF' parameter. The #>           default is 'NULL'. For 'NULL', maximum MAF value of the #>           genotype data will be computed and printed on the plot. #>  #>   maxMAF: Positive numeric value (0,1), specifying the maximum #>           threshold for the MAF filter of the SNPs in the GREML model. #>           This value cannot be less than 'minMAF' parameter. The #>           default is 'NULL'. For 'NULL', minimum MAF value of the #>           genotype data will be computed and printed on the plot. #>  #>       hg: Boolean value, specifying the genome built, “hg19” or “hg38” #>           to use chromosome length from UCSC genome browser and getting #>           genes and proteins according to this built. The default is #>           “hg19”. #>  #> PlotIndepSNP: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           use independent SNPs i.e., chromosome-wise LD pruned SNPs in #>           the plots or not. The default is 'TRUE'. #>  #> IndepSNP_window_size: Integer value, specifying a window size in #>           variant count or kilobase for LD-based filtering. The default #>           is 50. #>  #> IndepSNP_step_size: Integer value, specifying a variant count to shift #>           the window at the end of each step for LD filtering for #>           pruned SNPs in the plots. The default is 5. #>  #> IndepSNP_r2_threshold: Numeric value between 0 to 1 of pairwise r^2 #>           threshold for LD-based filtering for pruned SNPs in the #>           plots. The default is 0.02. #>  #> highLD_regions: Character string, specifying the .txt file name with #>           genomic regions with high LD for using in finding pruned SNPs #>           in the plots. This file needs to be in 'DataDir'. #>  #> plotjpeg: Boolean value, 'TRUE' or 'FALSE', specifying whether to save #>           the plots in jpeg file in 'ResultDir'. The default is 'TRUE'. #>  #> plotname: String of character value specifying the name of the jpeg #>           file with the plots. The default is \"Heritability_Plots\". #>  #> Value: #>  #>      A dataframe with maximum eight columns for GREML (here, three #>      columns if running genome-wide) and ten columns for LDSC model if #>      byCHR is 'TRUE'. The columns, such as, \"chromosome\"(i.e., #>      chromosome code),\"snp_proportion\" (i.e.,chromosome-wise SNP #>      proportion)\", \"no.of.genes\" (i.e., number of genes per #>      chromosome), \"no.of.proteins\" (i.e., number of genes per #>      chromosome),\"size_mb\" (i.e., chromosome length), \"Source\" (i.e., #>      source of heritability), \"Variance\" (i.e., estimated #>      heritability), and \"SE\" (i.e., standard error of the estimated #>      heritability) are common for both GREML and LDSC model. The #>      column, \"Intercept\" (i.e., LDSC regression intercept) and \"Int_SE\" #>      (i.e., standard error of the intercept) will be two extra columns #>      for LDSC models. Source column will have rows, such as 'V(1)' #>      (i.e., name of genetic variance), 'V(e)' (i.e., residual #>      variance), 'V(p)' (i.e., phenotypic variance), 'V(1)/Vp' (i.e., #>      ratio of genetic variance to phenotypic variance), and 'V(1)/Vp_L' #>      (i.e., ratio of genetic variance to phenotypic variance in #>      liability scale for binary phenotypes). If 'byCHR' is 'FALSE', #>      then the first five columns will not be reported in the dataframe. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      Bulik-Sullivan B, Finucane HK, Anttila V, Gusev A, Day FR, Loh P, #>      Consortium R, Consortium PG, of the Wellcome Trust Case Control #>      Consortium GCfAN, Perry JRB, Patterson N, Robinson EB, Daly MJ, #>      Price AL, Neale BM (2014). \"LD score regression distinguishes #>      confounding from polygenicity in genome-wide association studies.\" #>      _Nature Genetics_, *47*, 291-295. #>  #>      Privé F, Arbel J, Vilhjálmsson BJ (2020). \"LDpred2: better, #>      faster, stronger.\" _Bioinformatics_, *36*(22-23), 5424-5431. #>      doi:10.1093/bioinformatics/btaa1029 #>      <https://doi.org/10.1093/bioinformatics/btaa1029>. #>  #>      Yang J, Lee SH, Goddard ME, Visscher PM (2011). \"GCTA: a tool for #>      Genome-wide Complex Trait Analysis.\" _American Journal of Human #>      Genetics_, *88*(1), 76-82. #>  #> Examples: #>  #>      data(\"Summary_Stat_Ex1\", package = \"GXwasR\") #>      data(\"highLD_hg19\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      precomputedLD <- NULL #>      finput <- \"GXwasR_example\" #>      test.sumstats <- na.omit(Summary_Stat_Ex1[Summary_Stat_Ex1$TEST == \"ADD\", c(seq_len(4), 6:8)]) #>      colnames(test.sumstats) <- c(\"chr\", \"rsid\", \"pos\", \"a1\", \"n_eff\", \"beta\", \"beta_se\") #>      summarystat <- test.sumstats #>      ncores <- 3 #>      model <- \"GREML\" #>      byCHR <- FALSE #>      r2_LD <- 0 #>      LDSC_blocks <- 20 #>      REMLalgo <- 0 #>      nitr <- 3 #>      cat_covarfile <- NULL #>      quant_covarfile <- NULL #>      prevalence <- 0.01 #>      partGRM <- FALSE #>      autosome <- TRUE #>      Xsome <- TRUE #>      nGRM <- 3 #>      cripticut <- 0.025 #>      minMAF <- NULL #>      maxMAF <- NULL #>      hg <- \"hg19\" #>      PlotIndepSNP <- TRUE #>      IndepSNP_window_size <- 50 #>      IndepSNP_step_size <- 5 #>      IndepSNP_r2_threshold <- 0.02 #>      highLD_regions <- highLD_hg19 #>      H2 <- EstimateHerit( #>          DataDir = DataDir, ResultDir = ResultDir, finput = finput, #>          summarystat = NULL, ncores, model = \"GREML\", byCHR = TRUE, r2_LD = 0, #>          LDSC_blocks = 20, REMLalgo = 0, nitr = 100, cat_covarfile = NULL, quant_covarfile = NULL, #>          prevalence = 0.01, partGRM = FALSE, autosome = TRUE, Xsome = TRUE, nGRM = 3, #>          cripticut = 0.025, minMAF = NULL, maxMAF = NULL, hg = \"hg19\", PlotIndepSNP = TRUE, #>          IndepSNP_window_size = 50, IndepSNP_step_size = 5, IndepSNP_r2_threshold = 0.02, #>          highLD_regions = highLD_hg19 #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-18","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 18","title":"GXwasR Overview","text":"","code":"help(SexRegress, package = \"GXwasR\") #> SexRegress: Performing linear regression analysis with quantitative #> response variable. #>  #> Description: #>  #>      This function could be used to check association of two variables. #>      For instance, PRS with sex. #>  #> Usage: #>  #>      SexRegress(fdata, regressor_index, response_index) #>       #> Arguments: #>  #>    fdata: R dataframe object. The column with header 'response' should #>           contain the response variable. All other column are the #>           regressor. #>  #> regressor_index: Integer value, specifying the column number of the #>           main regressor variable. #>  #> response_index: Integer value, specifying the column number of the #>           response variable. #>  #> Value: #>  #>      Numeric value containing the regression estimate (\"Estimate\"), #>      standard error (\"Std. Error\"), statistics (\"t value\") and p-value #>      (Pr(>|t|)) #>  #> Examples: #>  #>      data(\"Regression_Ex\", package = \"GXwasR\") #>      fdata <- Regression_Ex #>      fdata$SEX <- as.factor(as.character(fdata$SEX)) #>      response_index <- 1 #>      regressor_index <- 2 #>       #>      x <- SexRegress(fdata, regressor_index, response_index)"},{"path":"/articles/GXwasR_overview.html","id":"function-19","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 19","title":"GXwasR Overview","text":"","code":"help(FilterPlinkSample, package = \"GXwasR\") #> FilterPlinkSample: Making PLINK files with desired samples. #>  #> Description: #>  #>      This function prepares PLINK binary files with the desired #>      samples. #>  #> Usage: #>  #>      FilterPlinkSample( #>        DataDir, #>        ResultDir, #>        finput, #>        foutput = NULL, #>        filter_sample = \"cases\", #>        keep_remove_sample_file = NULL, #>        keep = TRUE #>      ) #>       #> Arguments: #>  #>  DataDir: Character string for the file path of the all input files. #>  #> ResultDir: character string for the file path where the output PLINK #>           files will be stored. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files. #>  #> filter_sample: Character string, specifying the sample type to be #>           retained. The choices are, \"cases\", \"controls\", \"males\" and #>           \"females\". The default is \"cases\". #>  #> keep_remove_sample_file: Character string, specifying the prefix of a #>           space/tab-delimited text file with no header. For the samples #>           that we want to keep or remove, the family IDs should be in #>           the first column and within-family IDs in the second column. #>           This file needs to be in the 'DataDir'. The default is #>           'NULL'. #>  #>     keep: Boolean value, 'TRUE' or 'FALSE' for specifying desired #>           samples to keep or remove. The default is 'TRUE'. #>  #> Value: #>  #>      'NULL' #>  #>      The output PLINK files with passed samples will be saved in #>      ResultDir. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      foutput <- \"casesPlink\" #>      filter_sample <- \"cases\" #>      keep_remove_sample_file <- \"samples_example\" #>      keep <- FALSE #>       #>      FilterPlinkSample( #>          DataDir = DataDir, ResultDir = ResultDir, #>          finput = finput, foutput = foutput, keep_remove_sample_file = keep_remove_sample_file, #>          keep = keep #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-20","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 20","title":"GXwasR Overview","text":"","code":"help(ComputeGeneticPC, package = \"GXwasR\") #> ComputeGeneticPC: Computing principal components from genetic #> relationship matrix #>  #> Description: #>  #>      This function performs principal components analysis (PCA) based #>      on the variance-standardized relationship matrix (Purcell et al. #>      2007). #>  #>      Top principal components are generally used as covariates in #>      association analysis regressions to help correct for population #>      stratification #>  #> Usage: #>  #>      ComputeGeneticPC( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        countPC = 10, #>        plotPC = TRUE, #>        highLD_regions = NULL, #>        ld_prunning = TRUE, #>        window_size = 50, #>        step_size = 5, #>        r2_threshold = 0.02 #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. This file needs to be in 'DataDir.' #>  #>  countPC: Integer value, specifying the number of principal components. #>           The default is 10. #>  #>   plotPC: Boolean value, 'TRUE' or 'FALSE', specifying whether to plot #>           the first two PCs. #>  #> highLD_regions: A R dataframe with genomic regions with high LD for #>           using in finding pruned SNPs in the plots. The default is #>           'NULL'. #>  #> ld_prunning: Numeric value between 0 to 1 of pairwise r^2 threshold for #>           LD-based filtering for pruned SNPs in the plots. The default #>           is 0.02. #>  #> window_size: Integer value, specifying a window size in variant count #>           or kilobase for LD-based filtering. The default is 50. #>  #> step_size: Integer value, specifying a variant count to shift the #>           window at the end of each step for LD filtering for pruned #>           SNPs in the plots. The default is 5. #>  #> r2_threshold: Numeric value between 0 to 1 of pairwise r^2 threshold #>           for LD-based filtering for pruned SNPs in the plots. The #>           default is 0.02. #>  #> Value: #>  #>      A dataframe with genetic principal components. The first two #>      columns are IID (i.e., Individual Id) and FID (i.e., Family ID). #>      The other columns are PCs. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #> Examples: #>  #>      data(\"highLD_hg19\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      highLD_regions <- highLD_hg19 #>      ld_prunning <- \"TRUE\" #>      window_size <- 50 #>      step_size <- 5 #>      r2_threshold <- 0.02 #>      countPC <- 20 #>      ## Genetic PC #>      GP <- ComputeGeneticPC( #>          DataDir = DataDir, ResultDir = ResultDir, #>          finput = finput, highLD_regions = highLD_hg19, countPC = 20 #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-21","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 21","title":"GXwasR Overview","text":"","code":"help(ClumpLD, package = \"GXwasR\") #> ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs #>  #> Description: #>  #>      This function, which is based on empirical estimations of linkage #>      disequilibrium between SNPs, groups the SNP-based results across #>      one or more datasets or analysis. This approach can be used in two #>      basic scenarios: (i) To summarize the top X single SNP findings #>      from a genome-wide scan as fewer clusters of connected SNPs (i.e., #>      to assess how many independent loci are associated). (ii) To give #>      researchers a simple approach to merge sets of data from multiple #>      studies when those studies may have used various marker sets for #>      genotyping. #>  #>      The clumping process begins with the index SNPs that are #>      significant at threshold p1 and have not yet been clumped. It then #>      creates clumps of all additional SNPs that are within a specified #>      kb of the index SNP and that are in linkage disequilibrium with #>      the index SNP based on an r-squared threshold. Following that, #>      these SNPs are filtered based on the outcome for that SNP. As this #>      method is greedy (Purcell et al. 2007), each SNP will, at most, #>      only appear in one clump. The P value and ALLELES would always, at #>      random, be chosen from the first input file if the same SNP #>      appeared in several input files in SNPdata argument. Instead of #>      the best p-value, the function refer to the SNP that has the #>      strongest LD to the index as the best proxy. Based on the genotype #>      data, the SNP with the highest LD will be the same for all input #>      files. #>  #> Usage: #>  #>      ClumpLD( #>        DataDir, #>        finput, #>        SNPdata, #>        ResultDir = tempdir(), #>        clump_p1, #>        clump_p2, #>        clump_r2, #>        clump_kb, #>        byCHR = TRUE, #>        clump_best = TRUE, #>        clump_index_first = TRUE #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files which will be used to calculate linkage #>           disequilibrium between the SNPs. This actual genotype data #>           may or may not be the same dataset that was used to generate #>           the summary statistics. This file needs to be in 'DataDir'. #>  #>  SNPdata: A list of R dataframes containing a single or multiple #>           summary statistics with SNP and P (i.e., p-values) in #>           mandatory column headers. Other columns could be present. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #> clump_p1: Numeric value, specifying the significance threshold for #>           index SNPs. The default is 0.0001. #>  #> clump_p2: Numeric value, specifying the secondary significance #>           threshold for clumped SNPs. The default is 0.01 #>  #> clump_r2: Numeric value, specifying the LD threshold for clumping. The #>           default is 0.50. #>  #> clump_kb: Integer value, specifying the physical distance threshold in #>           base-pair for clumping. The default is 250. #>  #>    byCHR: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           perform the clumping chromosome-wise. #>  #> clump_best: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           select and output the best SNP from each clump. Default is #>           'TRUE'. #>  #> clump_index_first: Boolean value, 'TRUE' or 'FALSE', specifying whether #>           to force the index SNP to appear first in each clump. This #>           option should typically be 'TRUE' if clump_best is 'TRUE.' #>           Default is 'TRUE'. #>  #> Value: #>  #>      A list with two dataframes. #>  #>      BestClump: a dataframe with eight columns showing the single best #>      proxy SNP for each index SNP with columns \"INDEX\"(Index SNP #>      identifier), \"PSNP\"(Best proxy SNP), \"RSQ LD\"(r-squared) between #>      index and proxy, \"KB\"(Physical distance between index and proxy), #>      P(p-value for proxy SNP), \"ALLELES\"(The associated haplotypes for #>      the index and proxy SNP), and \"F\"(Which file used for clumping #>      from which this result came from). #>  #>      AllClump: a dataframe with eight columns providing a detailed #>      summary of each clump identified by PLINK. It includes \"INDEX_SNP\" #>      (the identifier for the index SNP that represents the clump), #>      \"SNP\" (the SNP being reported, which for the index SNP is the same #>      as INDEX_SNP), \"DISTANCE\" (the physical distance in base pairs #>      between the index SNP and the reported SNP, with 0.0 indicating #>      the index itself), \"RSQ\" (the r-squared value showing the degree #>      of linkage disequilibrium between the index SNP and the SNP in the #>      clump), \"ALLELES\" (the allele information, which in some cases may #>      appear misaligned if the data isn’t formatted as expected), \"F\" (a #>      statistic or indicator related to the association test, which may #>      be NA when not applicable), \"P\" (the p-value for the association #>      test of the SNP), and \"CHR\" (the chromosome on which the SNP is #>      located). #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #> Examples: #>  #>      data(\"Summary_Stat_Ex1\", package = \"GXwasR\") #>      data(\"Summary_Stat_Ex2\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      SNPdata <- list(Summary_Stat_Ex1, Summary_Stat_Ex2) #>      clump_p1 <- 0.0001 #>      clump_p2 <- 0.001 #>      clump_r2 <- 0.5 #>      clump_kb <- 250 #>      byCHR <- TRUE #>      clumpedResult <- ClumpLD( #>          DataDir, finput, SNPdata, ResultDir, clump_p1, #>          clump_p2, clump_r2, clump_kb, byCHR #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-22","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 22","title":"GXwasR Overview","text":"","code":"help(GetMFPlink, package = \"GXwasR\") #> GetMFPlink: Getting male and female PLINK binary files. #>  #> Description: #>  #>      This function prepares separate male and female PLINK binary files #>      from combined PLINK files. #>  #> Usage: #>  #>      GetMFPlink( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        foutput, #>        sex, #>        xplink = FALSE, #>        autoplink = FALSE #>      ) #>       #> Arguments: #>  #>  DataDir: Character string for the file path of the input PLINK binary #>           files. #>  #> ResultDir: Character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files. #>  #>      sex: Boolean value, 'males' or 'females', specifying output PLINK #>           binary files with male or female samples. #>  #>   xplink: Boolean value, 'TRUE' or 'FALSE', specifying output PLINK #>           binary files with only X chromosome or not. Default is #>           'FALSE.' #>  #> autoplink: Boolean value, 'TRUE' or 'FALSE', specifying output PLINK #>           binary files with only autosome or not. Default is 'FALSE.' #>  #> Value: #>  #>      None #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      foutput <- \"Test_output\" #>      sex <- \"females\" #>      x <- GetMFPlink( #>          DataDir = DataDir, ResultDir = ResultDir, #>          finput = finput, foutput = foutput, sex = sex, #>          xplink = FALSE, autoplink = FALSE #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-23","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 23","title":"GXwasR Overview","text":"","code":"help(plinkVCF, package = \"GXwasR\") #> plinkVCF: Converting VCF files to PLINK binary files and vice-versa. #>  #> Description: #>  #>      This function performs the conversion between VCF files to PLINK #>      binary formats. #>  #>      For VCF to PLINK files conversion, if you do not specify any FAM #>      file when you are converting from VCF to PLINK format, then PLINK #>      will just create a 'dummy' FAM file with the same name as your #>      dataset with missing phenotypes and missing sex. #>  #> Usage: #>  #>      plinkVCF( #>        DataDir, #>        ResultDir = tempdir(), #>        finput, #>        foutput, #>        VtoP = FALSE, #>        PtoV = TRUE, #>        Famfile = NULL, #>        PVbyCHR = TRUE #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files and all other input files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files or vcf files. This file needs to be in #>           'DataDir'. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files if filtering option for the SNPs is chosen. The #>           default is \"FALSE\". #>  #>     VtoP: Boolean value, 'TRUE' or 'FALSE', specifying the conversion #>           of VCF files to PLINK binary files or not. The default is #>           'TRUE'. #>  #>     PtoV: Boolean value, 'TRUE' or 'FALSE', specifying the conversion #>           of PLINK binary files to VCF files or not. The default is #>           'TRUE'. #>  #>  Famfile: Character string, specifying the name of the original .fam #>           file if VtoP was set to be 'TRUE'. This file needs to be in #>           'DataDir'. The default is 'NULL'. #>  #>  PVbyCHR: Boolean value, 'TRUE' or 'FALSE' specifying to do the PLINK #>           to vcf conversion chromosome-wise or not. The default is #>           'TRUE'. #>  #> Value: #>  #>      'NULL' #>  #>      The output files will be saved in 'ResultDir'. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      finput <- \"GXwasR_example\" # Plink file #>      foutput <- \"GXwasR_example1\" #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      PtoV <- TRUE #>      VtoP <- FALSE #>      Famfile <- NULL #>      PVbyCHR <- FALSE #>      plinkVCF(DataDir, ResultDir, finput, foutput, VtoP, PtoV, Famfile, PVbyCHR)"},{"path":"/articles/GXwasR_overview.html","id":"function-24","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 24","title":"GXwasR Overview","text":"","code":"help(MergeRegion, package = \"GXwasR\") #> MergeRegion: Merging two sets of PLINK binary files. #>  #> Description: #>  #>      This function combines the two genotype datasets based on either #>      common SNPs or all the SNPs between them. #>  #> Usage: #>  #>      MergeRegion( #>        DataDir, #>        ResultDir, #>        finput1, #>        finput2, #>        foutput, #>        use_common_snps = TRUE #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is tempdir(). #>  #>  finput1: Character string, specifying the prefix of the first input #>           PLINK binary files. #>  #>  finput2: Character string, specifying the prefix of the first input #>           PLINK binary files. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files if filtering option for the SNPs is chosen. The #>           default is \"FALSE\". #>  #> use_common_snps: Boolean value, TRUE or FALSE, specifying to use common #>           SNPs for merging or to use all the SNPs. #>  #> Value: #>  #>      NULL #>  #>      The output PLINK files will be saved in ResultDir. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput1 <- \"GXwasR_example\" #>      finput2 <- \"GXwasR_example_imputed\" #>      foutput <- \"Test_output\" #>      y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = TRUE)"},{"path":"/articles/GXwasR_overview.html","id":"function-25","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 25","title":"GXwasR Overview","text":"","code":"help(FilterAllele, package = \"GXwasR\") #> FilterAllele: Filtering out the multi-allelic variants #>  #> Description: #>  #>      This function filters out the multi-allelic SNPs from the input #>      dataset. #>  #> Usage: #>  #>      FilterAllele(DataDir, ResultDir, finput, foutput) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files. If multi-allelic variants are present, this #>           file will be produced after filtering out these variants. #>  #> Value: #>  #>      'NULL'. After multi-allelic variant filtering, the filtered PLINK #>      files with only biallelic SNPs will be saved in 'ResultDir'. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      foutput <- \"Filter_Test\" #>      x <- FilterAllele(DataDir, ResultDir, finput, foutput)"},{"path":"/articles/GXwasR_overview.html","id":"function-26","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 26","title":"GXwasR Overview","text":"","code":"help(PlinkSummary, package = \"GXwasR\") #> PlinkSummary: Summary of PLINK format genotype dataset #>  #> Description: #>  #>      PlinkSummary: Summary of PLINK format genotype dataset #>  #> Usage: #>  #>      PlinkSummary(DataDir, ResultDir = tempdir(), finput) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path of the PLINK program to #>           be set up. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. This file needs to be in DataDir. #>  #> Value: #>  #>      This function is called for its side effect: printing summary #>      statistics to the console. It returns 'NULL' invisibly. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>       #>      x <- PlinkSummary(DataDir, ResultDir, finput)"},{"path":"/articles/GXwasR_overview.html","id":"function-27","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 27","title":"GXwasR Overview","text":"","code":"help(FilterSNP, package = \"GXwasR\") #> FilterSNP: Filter out SNPs. #>  #> Description: #>  #>      FilterSNP: Filter out SNPs. #>  #> Usage: #>  #>      FilterSNP(DataDir, ResultDir, finput, foutput, SNPvec, extract = FALSE) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files. #>  #>  foutput: Character string, specifying the prefix of the output PLINK #>           binary files if the filtering option for the SNPs is chosen. #>           The default is \"FALSE\". #>  #>   SNPvec: R dataframe with SNP names to be excluded. #>  #>  extract: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           extract the snps or discard the snps. The default is 'FALSE'. #>  #> Value: #>  #>      'NULL'. The filtered file will be saved in 'ResultDir'. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      SNPvec <- c(\"rs6529954\", \"rs12858640\", \"rs5962098\") #>      finput <- \"GXwasR_example\" #>      foutput <- \"Filter_Test\" #>      FilterSNP(DataDir, ResultDir, finput, foutput, SNPvec = SNPvec, extract = TRUE)"},{"path":"/articles/GXwasR_overview.html","id":"function-28","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 28","title":"GXwasR Overview","text":"","code":"help(DummyCovar, package = \"GXwasR\") #> DummyCovar: Recode a categorical variable to a set of binary dummy #> variables. #>  #> Description: #>  #>      When dealing with categorical variables in genetic analysis using, #>      a common approach is to convert these into dummy variables for #>      proper analysis (Purcell et al. 2007). This function creates K-1 #>      new dummy variables for a variable with K categories. One level is #>      automatically excluded from the dummy variables which serves as #>      the reference category for subsequent analyses. This setup #>      implicitly sets the excluded that category as the baseline against #>      which other categories are compared. #>  #> Usage: #>  #>      DummyCovar(DataDir, ResultDir = DataDir, bfile, incovar, outcovar) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input PLINK #>           binary files. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>    bfile: Character string, specifying the prefix of the input PLINK #>           binary files for which covariate file will be generated. #>  #>  incovar: Character string, specifying the prefix of the input #>           covariate file. First two columns will be, FID (i.e., Family #>           ID) and IID (i.e., Sample ID) and rest of the columns are #>           covariates. #>  #> outcovar: Character string, specifying the prefix of the Output #>           covariate file #>  #> Value: #>  #>      R dataframe object with covariates #>  #> References: #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      bfile <- \"GXwasR_example\" #>      incovar <- \"covarfile_w_pc_age.txt\" #>      outcovar <- \"dummycovarfile\" #>      dummy_covars <- DummyCovar( #>          DataDir = DataDir, ResultDir = ResultDir, #>          bfile = bfile, incovar = incovar, #>          outcovar = outcovar #>      )"},{"path":"/articles/GXwasR_overview.html","id":"function-29","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 29","title":"GXwasR Overview","text":"","code":"help(GXWASmiami, package = \"GXwasR\") #> Miami plot #>  #> Description: #>  #>      This function generates Miami plots for GWAS and XWAS. #>  #> Usage: #>  #>      GXWASmiami( #>        ResultDir = tempdir(), #>        FemaleWAS, #>        MaleWAS, #>        snp_pval = 1e-08, #>        Xchr = FALSE #>      ) #>       #> Arguments: #>  #> ResultDir: Character string for the folder path where the outputs will #>           be saved. #>  #> FemaleWAS: R dataframe of summary statistics of GWAS or XWAS of female #>           samples with four columns, SNP(Variant), CHR(Chromosome #>           number), POS(Base pair position) and pvalue(P-value of the #>           test). This can be generated by running FM01comb or FM02comb #>           model with GXWAS function. #>  #>  MaleWAS: R dataframe of summary statistics of GWAS or XWAS of male #>           samples with four columns, SNP(Variant), CHR(Chromosome #>           number), POS(Base pair position) and pvalue(P-value of the #>           test). This can be generated by running FM01comb or FM02comb #>           model with GXWAS function. #>  #> snp_pval: Numeric value as p-value threshold for annotation. SNPs below #>           this p-value will be annotated on the plot. The default is #>           1e-08. #>  #>     Xchr: Boolean value, 'TRUE' or 'FALSE', specifying whether to #>           generate Miami plot for stratified XWAS or not. The default #>           is 'TRUE'. #>  #> Value: #>  #>      Invisibly returns 'NULL'. Generates and saves Miami plots as a #>      side effect. #>  #> Examples: #>  #>      data(\"Ffile\", package = \"GXwasR\") #>      data(\"Mfile\", package = \"GXwasR\") #>      FemaleWAS <- na.omit(Ffile[, c(\"SNP\", \"CHR\", \"BP\", \"P\")]) #>      colnames(FemaleWAS) <- c(\"SNP\", \"CHR\", \"POS\", \"pvalue\") #>      MaleWAS <- na.omit(Mfile[, c(\"SNP\", \"CHR\", \"BP\", \"P\")]) #>      colnames(MaleWAS) <- c(\"SNP\", \"CHR\", \"POS\", \"pvalue\") #>       #>      GXWASmiami(FemaleWAS = FemaleWAS, MaleWAS = MaleWAS, snp_pval = 0.05)"},{"path":"/articles/GXwasR_overview.html","id":"function-30","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 30","title":"GXwasR Overview","text":"","code":"help(SumstatGenCorr, package = \"GXwasR\") #> SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary #> Statistics #>  #> Description: #>  #>      This function calculates the genetic correlation between two #>      summary statistics using a specified reference linkage #>      disequilibrium (LD) matrix from the UK Biobank. #>  #> Usage: #>  #>      SumstatGenCorr( #>        ResultDir = tempdir(), #>        referenceLD, #>        sumstat1, #>        sumstat2, #>        Nref = 335265, #>        N0 = min(sumstat1$N), #>        eigen.cut = \"automatic\", #>        lim = exp(-18), #>        parallel = FALSE, #>        numCores = 2 #>      ) #>       #> Arguments: #>  #> ResultDir: Directory where results should be saved. #>  #> referenceLD: Reference LD matrix identifier. These are the LD matrices #>           and their eigen-decomposition from 335,265 genomic British UK #>           Biobank individuals. Two sets of reference panel are #>           provided: #>  #>            1. 307,519 QCed UK Biobank Axiom Array SNPs. The size is #>               about 7.5 GB after unzipping. #>  #>            2. 1,029,876 QCed UK Biobank imputed SNPs. The size is about #>               31 GB after unzipping. Although it takes more time, using #>               the imputed panel provides more accurate estimates of #>               genetic correlations. Therefore if the GWAS includes most #>               of the HapMap3 SNPs, then it is recommend using the #>               imputed reference panel. #>  #> sumstat1: Data frame for the first set of summary statistics. The input #>           data frame should include following columns: SNP, SNP ID; A1, #>           effect allele; A2, reference allele; N, sample size; Z, #>           z-score; If Z is not given, alternatively, you may provide: #>           b, estimate of marginal effect in GWAS; se, standard error of #>           the estimates of marginal effects in GWAS. #>  #> sumstat2: Data frame for the second set of summary statistics. The #>           input data frame should include following columns: SNP, SNP #>           ID; A1, effect allele; A2, reference allele; N, sample size; #>           Z, z-score; If Z is not given, alternatively, you may #>           provide: b, estimate of marginal effect in GWAS; se, standard #>           error of the estimates of marginal effects in GWAS. #>  #>     Nref: Sample size of the reference sample where LD is computed. If #>           the default UK Biobank reference sample is used, Nref = #>           335265 #>  #>       N0: Number of individuals included in both cohorts. The estimated #>           genetic correlation is usually robust against misspecified #>           N0. If not given, the default value is set to the minimum #>           sample size across all SNPs in cohort 1 and cohort 2. #>  #> eigen.cut: Which eigenvalues and eigenvectors in each LD score matrix #>           should be used for HDL. Users are allowed to specify a #>           numeric value between 0 and 1 for eigen.cut. For example, #>           eigen.cut = 0.99 means using the leading eigenvalues #>           explaining 99% of the variance and their correspondent #>           eigenvectors. If the default 'automatic' is used, the #>           eigen.cut gives the most stable heritability estimates will #>           be used. #>  #>      lim: Tolerance limitation, default lim = exp(-18). #>  #> parallel: Boolean value, TRUE or FALSE for whether to perform parallel #>           computation. The default is FALSE #>  #> numCores: The number of cores to be used. The default is 2. #>  #> Details: #>  #>      This function requires access to the reference LD data via an #>      environment variable. You must set one of the following #>      environment variables to the appropriate directory: #>  #>         • 'UKB_ARRAY_PATH' for the Axiom Array reference #>           ('UKB_array_SVD_eigen90_extraction') #>  #>         • 'UKB_IMPUTED_PATH' for the full imputed reference #>           ('UKB_imputed_SVD_eigen99_extraction') #>  #>         • 'UKB_IMPUTED_HAPMAP2_PATH' for the imputed HapMap2 subset #>           ('UKB_imputed_hapmap2_SVD_eigen99_extraction') #>  #> Value: #>  #>      A list is returned with: #>  #>         • 'rg': The estimated genetic correlation. #>  #>         • 'rg.se': The standard error of the estimated genetic #>           correlation. #>  #>         • 'P': P-value based on Wald test. #>  #>         • 'estimates.df': A detailed matrix includes the estimates and #>           standard errors of heritabilities, genetic covariance and #>           genetic correlation. #>  #>         • 'eigen.use': The eigen.cut used in computation. #>  #> References: #>  #>      Ning Z, Pawitan Y, Shen X (2020). \"High-definition likelihood #>      inference of genetic correlations across human complex traits.\" #>      _Nature Genetics_, *52*, 859-864. doi:10.1038/s41588-020-0676-4 #>      <https://doi.org/10.1038/s41588-020-0676-4>. #>  #> Examples: #>  #>      sumstat1 <- GXwasR:::simulateSumstats() #>      sumstat2 <- GXwasR:::simulateSumstats() #>      if (nzchar(Sys.getenv(\"UKB_IMPUTED_HAPMAP2_PATH\"))) { #>          res <- SumstatGenCorr( #>              ResultDir = tempdir(), #>              referenceLD = \"UKB_imputed_hapmap2_SVD_eigen99_extraction\", #>              sumstat1 = sumstat1, #>              sumstat2 = sumstat2, #>              parallel = TRUE #>          ) #>      }"},{"path":"/articles/GXwasR_overview.html","id":"function-31","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 31","title":"GXwasR Overview","text":"","code":"help(LDPrune, package = \"GXwasR\") #> LDPrune: Performs LD pruning on SNP data using PLINK #>  #> Description: #>  #>      This function utilizes PLINK to perform LD pruning on genetic #>      data. It identifies and removes SNPs that are in high linkage #>      disequilibrium with each other within specified windows. #>  #> Usage: #>  #>      LDPrune( #>        DataDir, #>        finput, #>        ResultDir = tempdir(), #>        window_size = 50, #>        step_size = 5, #>        r2_threshold = 0.2 #>      ) #>       #> Arguments: #>  #>  DataDir: Character string representing the file path of the input #>           PLINK binary files. #>  #>   finput: Character string specifying the prefix of the input PLINK #>           binary files. #>  #> ResultDir: Character string for the file path where all output files #>           will be stored, defaulting to a temporary directory. #>  #> window_size: Integer, specifying the number of SNPs to include in the #>           sliding window. #>  #> step_size: Integer, specifying the number of SNPs the window moves over #>           in each step. #>  #> r2_threshold: Numeric, specifying the R^2 threshold for LD pruning. #>  #> Value: #>  #>      Returns a character vector of SNP identifiers that remain after LD #>      pruning or NULL if an error occurs. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      prunedSNPs <- LDPrune(DataDir, finput, ResultDir, 50, 5, 0.2)"},{"path":"/articles/GXwasR_overview.html","id":"function-32","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 32","title":"GXwasR Overview","text":"","code":"help(executePlinkMAF, package = \"GXwasR\") #> executePlinkMAF: Execute PLINK to Calculate Minor Allele Frequencies #> (MAF) #>  #> Description: #>  #>      This function executes PLINK to calculate minor allele frequencies #>      (MAF) for a given dataset. It sets up the necessary PLINK #>      environment, runs the PLINK command, and returns the MAF results #>      as a DataFrame. Intermediate files generated by PLINK are cleaned #>      up after execution. #>  #> Usage: #>  #>      executePlinkMAF(DataDir, ResultDir, finput) #>       #> Arguments: #>  #>  DataDir: Character. Directory containing the input PLINK files (.bed, #>           .bim, .fam). #>  #> ResultDir: Character. Directory to store the output files generated by #>           PLINK. #>  #>   finput: Character. Base name of the PLINK input files (without #>           extensions). #>  #> Value: #>  #>      DataFrame containing the minor allele frequency (MAF) results. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      maf_data <- executePlinkMAF(DataDir, ResultDir, finput)"},{"path":"/articles/GXwasR_overview.html","id":"function-33","dir":"Articles","previous_headings":"Functions Overview > Table of Functions","what":"Function 33","title":"GXwasR Overview","text":"","code":"help(ComputeLD, package = \"GXwasR\") #> ComputeLD: Compute Linkage Disequilibrium (LD) for SNP Data #>  #> Description: #>  #>      This function computes linkage disequilibrium (LD) statistics for #>      SNP data using PLINK. It allows for computation across all SNPs or #>      within specific chromosomes. #>  #> Usage: #>  #>      ComputeLD(DataDir, ResultDir, finput, ByCHR = FALSE, CHRnum = NULL, r2_LD) #>       #> Arguments: #>  #>  DataDir: Character string representing the file path of the input #>           PLINK binary files. #>  #> ResultDir: Character string for the file path where all output files #>           will be stored, defaulting to a temporary directory. #>  #>   finput: Character string specifying the prefix of the input PLINK #>           binary files. #>  #>    ByCHR: Logical indicating whether to perform the computation by #>           chromosome. The default is FALSE. #>  #>   CHRnum: If ByCHR is TRUE, specifies the chromosome number for which #>           LD should be computed. The default is NULL. #>  #>    r2_LD: The threshold for r-squared LD values to report in the #>           output. #>  #> Value: #>  #>      Returns a data frame containing the computed LD values among SNPs, #>      read from the output file generated by PLINK. #>  #> Examples: #>  #>      snpld <- ComputeLD( #>          DataDir = GXwasR:::GXwasR_data(), ResultDir = tempdir(), #>          finput = \"GXwasR_example\", ByCHR = TRUE, CHRnum = 1, r2_LD = 0.2 #>      )"},{"path":"/articles/GXwasR_overview.html","id":"tutorials","dir":"Articles","previous_headings":"","what":"Tutorials","title":"GXwasR Overview","text":"Please follow tutorials learn functionality package GXwasR. Tutorial performing post-imputation QC followed sex-aware association tests: (vignette:Use GXwasR) Tutorial performing pre-imputation QC using GXwasR: https://boseb.github.io/GXwasR/articles/preimputationQC.html Tutorial performing post-imputation QC using GXwasR: https://boseb.github.io/GXwasR/articles/postimputationQC.html Tutorial running GWAS, XWAS Sex-differential Tests using GXwasR: https://boseb.github.io/GXwasR/articles/gwas_models.html Tutorial computing Polygenic Risk Score using GXwasR: https://boseb.github.io/GXwasR/articles/GXwasR_PRS.html Tutorial ancestry estimation: https://boseb.github.io/GXwasR/articles/decoding_ancestry.html Tutorial meta analysis using GXwasR: https://boseb.github.io/GXwasR/articles/meta_analysis.html Tutorial genetic correlation using GWAS Summary Statistics using GXwasR: https://boseb.github.io/GXwasR/articles/genetic_correlation_sumstat.html","code":""},{"path":[]},{"path":"/articles/GXwasR_overview.html","id":"qcsnp","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"QCsnp()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" geno <- NULL maf <- 0.05 casecontrol <- FALSE hweCase <- NULL hweControl <- NULL hweCase <- NULL monomorphicSNPs <- FALSE caldiffmiss <- FALSE ld_prunning <- FALSE x <- QCsnp(     DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput,     geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl,     ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs,     caldiffmiss = caldiffmiss ) #> ℹ 4214 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> ℹ 5467 variants removed due to minor allele threshold(s) #> ℹ No filter based on differential missingness will be applied. #> ✔ Output PLINK files prefixed as ,Test_output, with passed SNPs are saved in ResultDir. #> ℹ Input file has 26527 SNPs. #> ℹ Output file has 16846 SNPs after filtering. x #> $MonomorSNPs #> NULL #>  #> $DiffMissSNPs #> NULL"},{"path":"/articles/GXwasR_overview.html","id":"qcsample","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"QCsample()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" imiss <- 0.01 het <- 2 small_sample_mod <- FALSE IBD <- 0.2 IBDmatrix <- FALSE ambi_out <- TRUE #' x <- QCsample(     DataDir = DataDir, ResultDir = ResultDir, finput = finput,     foutput = foutput, imiss = imiss, het = het, IBD = IBD,     ambi_out = ambi_out ) #> • Plots are initiated. #> ℹ No. of samples filtered/flagged for missingness: 0 #> ℹ No. of samples filtered/flagged for heterozygosity threshold: 3 #> ℹ No. of samples filtered/flagged for missingness and heterozygosity: 3 #> ℹ No. of samples marked to be filtered out for IDB after missingness and heterozygosity filter: 2 #> ℹ No. of samples in input PLINK files: 276 #> ℹ No. of samples in output PLINK files: 271 #> ✔ Output PLINK files, Test_output with final samples are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ. x$HM x$Failed_Missingness x$Failed_heterozygosity x$Failed_IBD x$Missingness_results %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"ancestrycheck","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"AncestryCheck()","title":"GXwasR Overview","text":"","code":"data(\"highLD_hg19\", package = \"GXwasR\") data(\"example_data_study_sample_ancestry\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" reference <- \"HapMapIII_NCBI36\" highLD_regions <- highLD_hg19 study_pop <- example_data_study_sample_ancestry # PreimputeEX studyLD_window_size <- 50 studyLD_step_size <- 5 studyLD_r2_threshold <- 0.02 filterSNP <- TRUE studyLD <- FALSE referLD <- FALSE referLD_window_size <- 50 referLD_step_size <- 5 referLD_r2_threshold <- 0.02 outlier <- TRUE outlier_threshold <- 3 x <- AncestryCheck(     DataDir = DataDir, ResultDir = ResultDir, finput = finput,     reference = reference, highLD_regions = highLD_regions,     study_pop = study_pop, studyLD = studyLD, referLD = referLD,     outlierOf = \"EUR\", outlier = outlier, outlier_threshold = outlier_threshold ) #> 4214 ambiguous SNPs removed from study data. #> 111854 ambiguous SNPs removed from reference data. #> ! LD pruning is recommended for reference dataset. Set referLD = TRUE. #> ! LD pruning is recommended for study dataset. Set studyLD = TRUE. #>  #> ℹ Number of overlapping SNPs between study and reference data using rsID: 3722 #> ℹ No allele flips between study and reference data. #> ℹ 20 samples are outliers of selected reference population. #> ℹ 168 samples are NOT outliers of selected reference population. x$Outlier_samples %>% head() x$Samples_with_predicted_ancestry %>% head() x$NonOutlier_samples %>% head() x$pca_plot"},{"path":"/articles/GXwasR_overview.html","id":"sexcheck","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"SexCheck()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" LD <- TRUE LD_window_size <- 50 LD_step_size <- 5 LD_r2_threshold <- 0.02 fmax_F <- 0.2 mmin_F <- 0.8 impute_sex <- FALSE compute_freq <- FALSE  x <- SexCheck(     DataDir = DataDir, ResultDir = ResultDir, finput = finput, impute_sex = impute_sex,     compute_freq = compute_freq, LD_window_size = LD_window_size, LD_step_size = LD_step_size,     LD_r2_threshold = 0.02, fmax_F = 0.2, mmin_F = 0.8 )  # Checking if there is any wrong sex assignment problematic_sex <- x[x$STATUS != \"OK\", ] problematic_sex"},{"path":"/articles/GXwasR_overview.html","id":"xhwe","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"Xhwe()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" x <- Xhwe(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, foutput = foutput, filterSNP = TRUE ) #> ✔ Output PLINK files, prefixed as female, are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ #> This test is running on a case-control dataset with female samples. #> ℹ Failed SNPs are excluded from the output PLINK files prefixed as Test_output is in #> /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ x #> [1] \"rs56053951\" \"rs12353847\" \"rs5940058\""},{"path":"/articles/GXwasR_overview.html","id":"mafdiffsexcontrol","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"MAFdiffSexControl()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" x <- MAFdiffSexControl(DataDir, ResultDir, finput, filterSNP = TRUE, foutput = foutput) #> ℹ No SNP to be flagged or excluded. x #> NULL"},{"path":"/articles/GXwasR_overview.html","id":"filterregion","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"FilterRegion()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"PostimputeEX_QC1\" x <- FilterRegion(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, foutput = foutput, CHRX = TRUE, CHRY = FALSE,     filterPAR = TRUE, filterXTR = TRUE, filterAmpliconic = TRUE,     regionfile = FALSE, filterCHR = NULL, Hg = \"38\", exclude = TRUE ) #> ℹ chrX #> ✖ There is no PAR region in the input data. Argument filterPAR cannot set to be TRUE. #> ℹ Changing filterPAR to FALSE #> ✖ There is no XTR region in the input data. Argument filterXTR cannot set to be TRUE. #> ℹ Changing filterXTR to FALSE #> ℹ Ampliconic SNPs:9 #> ℹ 9 SNPs are discarded. #> ✔ PLINK files with passed SNPs are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as PostimputeEX_QC1 #> ✔ PLINK files with discarded SNPs are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as PostimputeEX_QC1_snps_extracted x #> $PAR #> NULL #>  #> $XTR #> NULL #>  #> $Ampliconic #>   CHR         SNP START       END A1 A2 #> 1  23  rs62602496     0  48349540  G  A #> 2  23   rs6612314     0  55442087  A  C #> 3  23 rs151231489     0  55445831  C  A #> 4  23  rs73498395     0  71740842  T  C #> 5  23      rs6527     0  73066891  A  C #> 6  23   rs4907822     0 102264099  A  G #> 7  23 rs142219143     0 102354248  G  A #> 8  23   rs5987512     0 102483549  G  C #> 9  23 rs139353379     0 103970756  G  A"},{"path":"/articles/GXwasR_overview.html","id":"gxwas","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"GXwas()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" standard_beta <- TRUE xsex <- FALSE sex <- TRUE Inphenocov <- NULL covartest <- NULL interaction <- FALSE MF.na.rm <- FALSE B <- 10000 MF.zero.sub <- 0.00001 trait <- \"binary\" xmodel <- \"FMcombx02\" combtest <- \"fisher.method\" snp_pval <- 1e-08 covarfile <- NULL ncores <- 0 MF.mc.cores <- 1 ResultGXwas <- GXwas(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, xmodel = xmodel, trait = trait, covarfile = covarfile,     sex = sex, xsex = xsex, combtest = combtest, MF.p.corr = \"none\",     snp_pval = snp_pval, plot.jpeg = TRUE, suggestiveline = 5, genomewideline = 7.3,     MF.mc.cores = 1, ncores = ncores ) #> • Running FMcombx02 model ResultGXwas %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"pvalcomb","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"PvalComb()","title":"GXwasR Overview","text":"","code":"data(\"Mfile\", package = \"GXwasR\") data(\"Ffile\", package = \"GXwasR\") SumstatMale <- Mfile colnames(SumstatMale)[3] <- \"POS\" SumstatFemale <- Ffile colnames(SumstatFemale)[3] <- \"POS\" PvalComb_Result <- PvalComb(     SumstatMale = SumstatMale, SumstatFemale = SumstatFemale,     combtest = \"fisher.method\", MF.mc.cores = 1, snp_pval = 0.001, plot.jpeg = FALSE,     suggestiveline = 3, genomewideline = 5.69897, ncores = 1 ) #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/Stratified_GWAS.png #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/Stratified_XWAS.png PvalComb_Result %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"sexdiff","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"SexDiff()","title":"GXwasR Overview","text":"","code":"data(\"Mfile\", package = \"GXwasR\") data(\"Ffile\", package = \"GXwasR\") Difftest <- SexDiff(Mfile, Ffile) significant_snps <- Difftest[Difftest$adjP < 0.05, ] significant_snps"},{"path":"/articles/GXwasR_overview.html","id":"sexdiffzscore","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"SexDiffZscore()","title":"GXwasR Overview","text":"","code":"data(\"Example_h2data\", package = \"GXwasR\") inputdata <- Example_h2data x <- SexDiffZscore(inputdata) x"},{"path":"/articles/GXwasR_overview.html","id":"diffzeroone","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"DiffZeroOne()","title":"GXwasR Overview","text":"","code":"data(\"Example_rgdata\", package = \"GXwasR\") inputdata <- Example_rgdata colnames(inputdata) <- c(\"Trait\", \"Stat\", \"SE\") x <- DiffZeroOne(inputdata, FALSE, TRUE) x"},{"path":"/articles/GXwasR_overview.html","id":"testxgene","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"TestXGene()","title":"GXwasR Overview","text":"","code":"data(\"XWAS_Summary_Example\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" sumstat <- XWAS_Summary_Example ref_data <- NULL gene_file <- \"Xlinkedgenes_hg19.txt\" gene_range <- 500000 max_gene <- 10 gene_approximation <- TRUE beta_par <- c(1, 25) weights_function <- NULL geno_variance_weights <- \"se.beta\" method <- \"kuonen\" acc_devies <- 1e-8 lim_devies <- 1e+6 rho <- TRUE skato_p_threshold <- 0.8 mac_threshold <- 3 sample_size <- 4000 reference_matrix_used <- FALSE regularize_fun <- \"LH\" pca_var_fraction <- 0.85 flm_basis_function <- \"fourier\" flm_num_basis <- 25 flm_poly_order <- 4 flip_genotypes <- FALSE omit_linear_variant <- FALSE kernel_p_method <- \"kuonen\" anno_type <- \"\" GenetestResult <- TestXGene(DataDir, ResultDir, finput, sumstat, gene_file,     gene_range, score_file, ref_data, max_gene, sample_size,     genebasedTest = \"SKAT\",     gene_approximation, beta_par, weights_function, geno_variance_weights,     kernel_p_method, acc_devies, lim_devies, rho, skato_p_threshold, anno_type,     mac_threshold, reference_matrix_used, regularize_fun, pca_var_fraction,     flm_basis_function, flm_num_basis, flm_poly_order, flip_genotypes,     omit_linear_variant ) #> ℹ 80 of 80 variants found in reference #> ℹ Effect sizes recoded for 0 variant(s) #> ✔ Allele frequencies found and linked #> ✔ File /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/gene.test.score.file.vcf.gz has been created and indexed #> ℹ 157 genes are having 321 SNPs #> • SNP-SNP correlation matrices are being created... #> ✔ SNP-SNP correlation matrices are done. #> ! Warning: No variants to analyze in gene uc004cqy.3, skipped #> ! Warning: No variants to analyze in gene uc004csf.3, skipped #> ! Warning: No variants to analyze in gene uc004csr.3, skipped #> ! Warning: No variants to analyze in gene uc004cst.2, skipped #> ! Warning: No variants to analyze in gene uc004csu.1, skipped #> ! Warning: No variants to analyze in gene uc004csx.4, skipped #> ! Warning: No variants to analyze in gene uc004cuw.3, skipped GenetestResult"},{"path":"/articles/GXwasR_overview.html","id":"metagwas","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"MetaGWAS()","title":"GXwasR Overview","text":"","code":"data(\"Summary_Stat_Ex1\", package = \"GXwasR\") data(\"Summary_Stat_Ex2\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() SummData <- list(Summary_Stat_Ex1, Summary_Stat_Ex2) SNPfile <- \"UniqueLoci\" useSNPposition <- FALSE UseA1 <- TRUE GCse <- TRUE byCHR <- FALSE pval_filter <- \"R\" top_snp_pval <- 1e-08 max_top_snps <- 10 chosen_snps_file <- NULL pval_threshold_manplot <- 1e-05 plotname <- \"Meta_Analysis.plot\" x <- MetaGWAS(     DataDir = DataDir, SummData = SummData, ResultDir = ResultDir,     SNPfile = NULL, useSNPposition = TRUE, UseA1 = UseA1, GCse = GCse,     plotname = \"Meta_Analysis.plot\", pval_filter, top_snp_pval, max_top_snps,     chosen_snps_file = NULL, byCHR, pval_threshold_manplot ) #> ℹ Processing file number 1 #> ℹ Processing file number 2 #> ℹ Applying study-specific genomic control. #> ℹ Applying study-specific genomic control. #> Processing chromosome #> ✔ Forest plot files for Meta_Analysis.plot SNPs have been created. #> ℹ You can find them in the directory: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ #> ✔ Forest plot files for Meta_Analysis.plot SNPs have been created. #> ℹ You can find them in the directory: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ x$Resultfixed %>% head() x$ProblemSNP %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"computeprs","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"ComputePRS()","title":"GXwasR Overview","text":"","code":"data(\"Summary_Stat_Ex1\", package = \"GXwasR\") data(\"Example_phenofile\", package = \"GXwasR\") data(\"Example_covarfile\", package = \"GXwasR\") data(\"Example_pthresoldfile\", package = \"GXwasR\") data(\"highLD_hg19\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" summarystat <- Summary_Stat_Ex1[, c(2, 4, 7, 1, 3, 12)] phenofile <- Example_phenofile # Cannot be NULL # The interested phenotype column should be labeled as \"Pheno1\". covarfile <- Example_covarfile clump_p1 <- 0.0001 clump_p2 <- 0.0001 clump_kb <- 500 clump_r2 <- 0.5 byCHR <- TRUE pthreshold <- Example_pthresoldfile$Threshold ld_prunning <- TRUE highLD_regions <- highLD_hg19 window_size <- 50 step_size <- 5 r2_threshold <- 0.02 nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification. pheno_type <- \"binary\"  PRSresult <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile,     effectsize = \"BETA\", LDreference = \"GXwasR_example\", ldclump = FALSE, clump_p1, clump_p2,     clump_r2, clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions,     ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6,     pheno_type = \"binary\" ) #> Warning: cannot remove file '/private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f', reason 'Directory not empty' #> ℹ 0.001 #> • Computing PRS for threshold 0.001 #> ℹ 0.05 #> • Computing PRS for threshold 0.05 #> ℹ 0.1 #> • Computing PRS for threshold 0.1 #> ℹ 0.2 #> • Computing PRS for threshold 0.2 #> ℹ 0.3 #> • Computing PRS for threshold 0.3 #> ℹ 0.4 #> • Computing PRS for threshold 0.4 #> ℹ 0.5 #> • Computing PRS for threshold 0.5 PRSresult$PRS %>% head() PRSresult$BestP PRSresult$PRS_plot #> Error in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, : Metric information not available for this family/device"},{"path":"/articles/GXwasR_overview.html","id":"geneticcorrbt","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"GeneticCorrBT()","title":"GXwasR Overview","text":"","code":"data(\"Example_phenofile\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" byCHR <- TRUE REMLalgo <- 0 nitr <- 3 ncores <- 3 phenofile <- Example_phenofile # Cannot be NULL cat_covarfile <- NULL quant_covarfile <- NULL partGRM <- FALSE # Partition the GRM into m parts (by row), autosome <- TRUE Xsome <- TRUE cripticut <- 0.025 minMAF <- 0.01 # if MAF filter apply maxMAF <- 0.04 excludeResidual <- TRUE  genetic_correlation <- GeneticCorrBT(     DataDir = DataDir, ResultDir = ResultDir, finput = finput, byCHR = byCHR,     REMLalgo = 0, nitr = 10, phenofile = phenofile, cat_covarfile = NULL, quant_covarfile = NULL,     partGRM = FALSE, autosome = TRUE, Xsome = TRUE, nGRM = 3,     cripticut = 0.025, minMAF = NULL, maxMAF = NULL, excludeResidual = TRUE, ncores = ncores ) #> Processing chromosome 1 #> Using GCTA version v1.94.4 Mac #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 2 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 3 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 4 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 5 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 6 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 7 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 8 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 9 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 10 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #>  #>  #> Processing chromosome 23 #> ✔ GRM has been saved in the file [/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/xGXwasR.grm.bin] #> ℹ Number of SNPs in each pair of individuals has been saved in the file [/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/xGXwasR.grm.N.bin] #>  #>  #>  #> Processing chromosome 24 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. genetic_correlation %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"estimateherit","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"EstimateHerit()","title":"GXwasR Overview","text":"","code":"data(\"Summary_Stat_Ex1\", package = \"GXwasR\") data(\"highLD_hg19\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() precomputedLD <- NULL finput <- \"GXwasR_example\" test.sumstats <- na.omit(Summary_Stat_Ex1[Summary_Stat_Ex1$TEST == \"ADD\", c(seq_len(4), 6:8)]) colnames(test.sumstats) <- c(\"chr\", \"rsid\", \"pos\", \"a1\", \"n_eff\", \"beta\", \"beta_se\") summarystat <- test.sumstats ncores <- 3 model <- \"GREML\" byCHR <- FALSE r2_LD <- 0 LDSC_blocks <- 20 REMLalgo <- 0 nitr <- 3 cat_covarfile <- NULL quant_covarfile <- NULL prevalence <- 0.01 partGRM <- FALSE autosome <- TRUE Xsome <- TRUE nGRM <- 3 cripticut <- 0.025 minMAF <- NULL maxMAF <- NULL hg <- \"hg19\" PlotIndepSNP <- TRUE IndepSNP_window_size <- 50 IndepSNP_step_size <- 5 IndepSNP_r2_threshold <- 0.02 highLD_regions <- highLD_hg19 H2 <- EstimateHerit(     DataDir = DataDir, ResultDir = ResultDir, finput = finput,     summarystat = NULL, ncores, model = \"GREML\", byCHR = TRUE, r2_LD = 0,     LDSC_blocks = 20, REMLalgo = 0, nitr = 100, cat_covarfile = NULL, quant_covarfile = NULL,     prevalence = 0.01, partGRM = FALSE, autosome = TRUE, Xsome = TRUE, nGRM = 3,     cripticut = 0.025, minMAF = NULL, maxMAF = NULL, hg = \"hg19\", PlotIndepSNP = TRUE,     IndepSNP_window_size = 50, IndepSNP_step_size = 5, IndepSNP_r2_threshold = 0.02,     highLD_regions = highLD_hg19 ) #> Processing chromosome 1 #> Processing chromosome 2 #> Processing chromosome 3 #> Processing chromosome 4 #> Processing chromosome 5 #> Processing chromosome 6 #> Processing chromosome 7 #> Processing chromosome 8 #> Processing chromosome 9 #> Processing chromosome 10 #> Processing chromosome 23 #> ✔ GRM has been saved in the file [/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/xGXwasR.grm.bin] #> ℹ Number of SNPs in each pair of individuals has been saved in the file [/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/xGXwasR.grm.N.bin] #>  #>  #>  #> Processing chromosome 24 #> ✔ Plots are saved in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ with name Heritability_Plots.jpeg #> ✔ All GRM related files are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ H2 %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"sexregress","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"SexRegress()","title":"GXwasR Overview","text":"","code":"data(\"Regression_Ex\", package = \"GXwasR\") fdata <- Regression_Ex fdata$SEX <- as.factor(as.character(fdata$SEX)) response_index <- 1 regressor_index <- 2  x <- SexRegress(fdata, regressor_index, response_index) x #>    Estimate  Std. Error     t value    Pr(>|t|)  #> 0.001305843 0.004337332 0.301070570 0.763594133"},{"path":"/articles/GXwasR_overview.html","id":"filterplinksample","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"FilterPlinkSample()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"casesPlink\" filter_sample <- \"cases\" keep_remove_sample_file <- \"samples_example\" keep <- FALSE  FilterPlinkSample(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, foutput = foutput, keep_remove_sample_file = keep_remove_sample_file,     keep = keep ) #> ✔ casesPlink PLINK files with desired samples are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ #> NULL"},{"path":"/articles/GXwasR_overview.html","id":"computegeneticpc","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"ComputeGeneticPC()","title":"GXwasR Overview","text":"","code":"data(\"highLD_hg19\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" highLD_regions <- highLD_hg19 ld_prunning <- \"TRUE\" window_size <- 50 step_size <- 5 r2_threshold <- 0.02 countPC <- 20 ## Genetic PC GP <- ComputeGeneticPC(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, highLD_regions = highLD_hg19, countPC = 20 ) #> Warning: cannot remove file '/private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f', reason 'Directory not empty' GP$PCs1 %>% head() GP$plot"},{"path":"/articles/GXwasR_overview.html","id":"clumpld","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"ClumpLD()","title":"GXwasR Overview","text":"","code":"data(\"Summary_Stat_Ex1\", package = \"GXwasR\") data(\"Summary_Stat_Ex2\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" SNPdata <- list(Summary_Stat_Ex1, Summary_Stat_Ex2) clump_p1 <- 0.0001 clump_p2 <- 0.001 clump_r2 <- 0.5 clump_kb <- 250 byCHR <- TRUE clumpedResult <- ClumpLD(     DataDir, finput, SNPdata, ResultDir, clump_p1,     clump_p2, clump_r2, clump_kb, byCHR ) #> • Processing summary statistics 1 #> • Processing summary statistics 2 #> • Running LD clumping for chromosome 1 #> ℹ No significant clump results for chromosome 1 #> • Running LD clumping for chromosome 2 #> ℹ No significant clump results for chromosome 2 #> • Running LD clumping for chromosome 3 #> ℹ No significant clump results for chromosome 3 #> • Running LD clumping for chromosome 4 #> ℹ No significant clump results for chromosome 4 #> • Running LD clumping for chromosome 5 #> ℹ No significant clump results for chromosome 5 #> • Running LD clumping for chromosome 6 #> ℹ No significant clump results for chromosome 6 #> • Running LD clumping for chromosome 7 #> ℹ No significant clump results for chromosome 7 #> • Running LD clumping for chromosome 8 #> ℹ No significant clump results for chromosome 8 #> • Running LD clumping for chromosome 9 #> ℹ No significant clump results for chromosome 9 #> • Running LD clumping for chromosome 10 #> ℹ No significant clump results for chromosome 10 #> • Running LD clumping for chromosome 23 #> • Running LD clumping for chromosome 24 #> ℹ No significant clump results for chromosome 24 clumpedResult #> $BestClump #>         INDEX       PSNP    RSQ     KB        P ALLELES      F    CHR #>        <char>     <char> <char> <char>   <char>  <char> <char> <char> #> 1:  rs6529954  rs6529954      *      0 4.41e-09   AA/GG      2     23 #> 2: rs12858640 rs12858640      *      0 3.89e-09   CC/TT      2     23 #> 3:  rs5962098  rs5962098      *      0 1.71e-06   AA/GG      2     23 #>  #> $AllClump #>      INDEX_SNP        SNP DISTANCE   RSQ  ALLELES     F        P   CHR #>         <char>     <char>    <num> <num>   <char> <num>    <num> <int> #>  1:  rs6529954  rs6529954      0.0 1.000  2.8e-09    NA       NA    23 #>  2:  rs6529954  rs5962098    -47.2 0.702    AG/GA     1 1.96e-06    23 #>  3:  rs6529954  rs5962098    -47.2 0.702    AG/GA     2 1.71e-06    23 #>  4:  rs6529954  rs6529954      0.0 1.000    AA/GG     2 4.41e-09    23 #>  5:  rs6529954 rs12858640     30.5 0.981    AC/GT     1 4.37e-09    23 #>  6:  rs6529954 rs12858640     30.5 0.981    AC/GT     2 3.89e-09    23 #>  7: rs12858640 rs12858640      0.0 1.000 4.37e-09    NA       NA    23 #>  8: rs12858640  rs5962098    -77.7 0.716    CG/TA     1 1.96e-06    23 #>  9: rs12858640  rs5962098    -77.7 0.716    CG/TA     2 1.71e-06    23 #> 10: rs12858640  rs6529954    -30.5 0.981    CA/TG     1 2.80e-09    23 #> 11: rs12858640  rs6529954    -30.5 0.981    CA/TG     2 4.41e-09    23 #> 12: rs12858640 rs12858640      0.0 1.000    CC/TT     2 3.89e-09    23 #> 13:  rs5962098  rs5962098      0.0 1.000 1.96e-06    NA       NA    23 #> 14:  rs5962098  rs5962098      0.0 1.000    AA/GG     2 1.71e-06    23 #> 15:  rs5962098  rs6529954     47.2 0.702    AG/GA     1 2.80e-09    23 #> 16:  rs5962098  rs6529954     47.2 0.702    AG/GA     2 4.41e-09    23 #> 17:  rs5962098 rs12858640     77.7 0.716    AT/GC     1 4.37e-09    23 #> 18:  rs5962098 rs12858640     77.7 0.716    AT/GC     2 3.89e-09    23"},{"path":"/articles/GXwasR_overview.html","id":"getmfplink","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"GetMFPlink()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" sex <- \"females\" x <- GetMFPlink(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, foutput = foutput, sex = sex,     xplink = FALSE, autoplink = FALSE ) #> ✔ Output PLINK files, prefixed as Test_output, are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ x #> NULL"},{"path":"/articles/GXwasR_overview.html","id":"plinkvcf","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"plinkVCF()","title":"GXwasR Overview","text":"","code":"finput <- \"GXwasR_example\" # Plink file foutput <- \"GXwasR_example1\" DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() PtoV <- TRUE VtoP <- FALSE Famfile <- NULL PVbyCHR <- FALSE plinkVCF(DataDir, ResultDir, finput, foutput, VtoP, PtoV, Famfile, PVbyCHR) #> ✔ Output files created in ResultDir: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ"},{"path":"/articles/GXwasR_overview.html","id":"mergeregion","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"MergeRegion()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput1 <- \"GXwasR_example\" finput2 <- \"GXwasR_example_imputed\" foutput <- \"Test_output\" y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = TRUE) #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as Test_output y #> NULL"},{"path":"/articles/GXwasR_overview.html","id":"filterallele","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"FilterAllele()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Filter_Test\" x <- FilterAllele(DataDir, ResultDir, finput, foutput) #> ℹ There is no multi-allelic SNP present in the input dataset. x #> NULL"},{"path":"/articles/GXwasR_overview.html","id":"plinksummary","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"PlinkSummary()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" x <- PlinkSummary(DataDir, ResultDir, finput) #> ℹ Dataset: GXwasR_example #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 12 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #>   - Chr: 24 #> ℹ Total number of SNPs: 26527 #> ℹ Total number of samples: 276 x #> NULL"},{"path":"/articles/GXwasR_overview.html","id":"filtersnp","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"FilterSNP","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() SNPvec <- c(\"rs6529954\", \"rs12858640\", \"rs5962098\") finput <- \"GXwasR_example\" foutput <- \"Filter_Test\" FilterSNP(DataDir, ResultDir, finput, foutput, SNPvec = SNPvec, extract = TRUE) #> ℹ 3 SNPs are extracted #> ✔ Plink files with extracted SNPs are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as Filter_Test #> NULL"},{"path":"/articles/GXwasR_overview.html","id":"dummycovar","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"DummyCovar()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() bfile <- \"GXwasR_example\" incovar <- \"covarfile_w_pc_age.txt\" outcovar <- \"dummycovarfile\" dummy_covars <- DummyCovar(     DataDir = DataDir, ResultDir = ResultDir,     bfile = bfile, incovar = incovar,     outcovar = outcovar ) #> ℹ Covariate file: dummycovarfile.cov is in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ dummy_covars %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"gxwasmiami","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"GXWASmiami()","title":"GXwasR Overview","text":"","code":"data(\"Ffile\", package = \"GXwasR\") data(\"Mfile\", package = \"GXwasR\") FemaleWAS <- na.omit(Ffile[, c(\"SNP\", \"CHR\", \"BP\", \"P\")]) colnames(FemaleWAS) <- c(\"SNP\", \"CHR\", \"POS\", \"pvalue\") MaleWAS <- na.omit(Mfile[, c(\"SNP\", \"CHR\", \"BP\", \"P\")]) colnames(MaleWAS) <- c(\"SNP\", \"CHR\", \"POS\", \"pvalue\")  GXWASmiami(FemaleWAS = FemaleWAS, MaleWAS = MaleWAS, snp_pval = 0.05) #> • Generating Miami plots for stratified test. #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/Stratified_GWAS.png #> ✔ Miami plot of stratified GWAS is saved in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ"},{"path":"/articles/GXwasR_overview.html","id":"sumstatgencorr","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"SumstatGenCorr()","title":"GXwasR Overview","text":"","code":"sumstat1 <- GXwasR:::simulateSumstats() sumstat2 <- GXwasR:::simulateSumstats() if (nzchar(Sys.getenv(\"UKB_IMPUTED_HAPMAP2_PATH\"))) {     res <- SumstatGenCorr(         ResultDir = tempdir(),         referenceLD = \"UKB_imputed_hapmap2_SVD_eigen99_extraction\",         sumstat1 = sumstat1,         sumstat2 = sumstat2,         parallel = TRUE     )     res } #> Analysis starts on Fri Aug  8 09:34:41 2025 #> ℹ 9321 out of 769306 (1.21%) SNPs in reference panel are available in GWAS 1. #> ℹ 9356 out of 769306 (1.22%) SNPs in reference panel are available in GWAS 2. #> ! Warning: More than 1% SNPs in reference panel are missed in GWAS 1. This may generate bias in estimation. Please make sure that you are using the correct reference panel. #> ! Warning: More than 1% SNPs in reference panel are missed in GWAS 2. This may generate bias in estimation. Please make sure that you are using the correct reference panel. #>    |                                                                                                                       |                                                                                                              |   0%   |                                                                                                                       |==                                                                                                            |   2%   |                                                                                                                       |====                                                                                                          |   3%   |                                                                                                                       |=====                                                                                                         |   5%   |                                                                                                                       |=======                                                                                                       |   6%   |                                                                                                                       |=========                                                                                                     |   8%   |                                                                                                                       |===========                                                                                                   |  10%   |                                                                                                                       |============                                                                                                  |  11%   |                                                                                                                       |==============                                                                                                |  13%   |                                                                                                                       |================                                                                                              |  15%   |                                                                                                                       |==================                                                                                            |  16%   |                                                                                                                       |====================                                                                                          |  18%   |                                                                                                                       |=====================                                                                                         |  19%   |                                                                                                                       |=======================                                                                                       |  21%   |                                                                                                                       |=========================                                                                                     |  23%   |                                                                                                                       |===========================                                                                                   |  24%   |                                                                                                                       |============================                                                                                  |  26%   |                                                                                                                       |==============================                                                                                |  27%   |                                                                                                                       |================================                                                                              |  29%   |                                                                                                                       |==================================                                                                            |  31%   |                                                                                                                       |===================================                                                                           |  32%   |                                                                                                                       |=====================================                                                                         |  34%   |                                                                                                                       |=======================================                                                                       |  35%   |                                                                                                                       |=========================================                                                                     |  37%   |                                                                                                                       |===========================================                                                                   |  39%   |                                                                                                                       |============================================                                                                  |  40%   |                                                                                                                       |==============================================                                                                |  42%   |                                                                                                                       |================================================                                                              |  44%   |                                                                                                                       |==================================================                                                            |  45%   |                                                                                                                       |===================================================                                                           |  47%   |                                                                                                                       |=====================================================                                                         |  48%   |                                                                                                                       |=======================================================                                                       |  50%   |                                                                                                                       |=========================================================                                                     |  52%   |                                                                                                                       |===========================================================                                                   |  53%   |                                                                                                                       |============================================================                                                  |  55%   |                                                                                                                       |==============================================================                                                |  56%   |                                                                                                                       |================================================================                                              |  58%   |                                                                                                                       |==================================================================                                            |  60%   |                                                                                                                       |===================================================================                                           |  61%   |                                                                                                                       |=====================================================================                                         |  63%   |                                                                                                                       |=======================================================================                                       |  65%   |                                                                                                                       |=========================================================================                                     |  66%   |                                                                                                                       |===========================================================================                                   |  68%   |                                                                                                                       |============================================================================                                  |  69%   |                                                                                                                       |==============================================================================                                |  71%   |                                                                                                                       |================================================================================                              |  73%   |                                                                                                                       |==================================================================================                            |  74%   |                                                                                                                       |===================================================================================                           |  76%   |                                                                                                                       |=====================================================================================                         |  77%   |                                                                                                                       |=======================================================================================                       |  79%   |                                                                                                                       |=========================================================================================                     |  81%   |                                                                                                                       |==========================================================================================                    |  82%   |                                                                                                                       |============================================================================================                  |  84%   |                                                                                                                       |==============================================================================================                |  85%   |                                                                                                                       |================================================================================================              |  87%   |                                                                                                                       |==================================================================================================            |  89%   |                                                                                                                       |===================================================================================================           |  90%   |                                                                                                                       |=====================================================================================================         |  92%   |                                                                                                                       |=======================================================================================================       |  94%   |                                                                                                                       |=========================================================================================================     |  95%   |                                                                                                                       |==========================================================================================================    |  97%   |                                                                                                                       |============================================================================================================  |  98%   |                                                                                                                       |==============================================================================================================| 100% #>  #>  #>  #>  #> Integrating piecewise resultsPoint estimates:• Heritability of phenotype 1:  2.62e-10 #> • Heritability of phenotype 2:  4.26e-09 #> • Genetic Covariance:  -5.60e-05 #> • Genetic Correlation:  -52946.2415ℹ Continuing computing standard error with jackknife #>    |                                                                                                                       |                                                                                                              |   0%   |                                                                                                                       |==                                                                                                            |   2% #>  #>  #> • Heritability of phenotype 1: 2.62e-10 ( 0.00e+00 ) #> • Heritability of phenotype 2: 4.26e-09 ( 0.00e+00 ) #> • Genetic Covariance: -5.60e-05 ( 0.00e+00 ) #> • Genetic Correlation: -52946.2415 ( 0.00e+00 ) #> • P: 0.00e+00 #>  #> Analysis finished at Fri Aug  8 09:35:19 2025 #> $rg #>            #> -52946.24  #>  #> $rg.se #> [1] 0 #>  #> $P #>    #> 0  #>  #> $estimates.df #>                          Estimate se #> Heritability_1       2.623944e-10  0 #> Heritability_2       4.257231e-09  0 #> Genetic_Covariance  -5.595978e-05  0 #> Genetic_Correlation -5.294624e+04  0 #>  #> $eigen.use #> [1] 0.95"},{"path":"/articles/GXwasR_overview.html","id":"ldprune","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"LDPrune()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" prunedSNPs <- LDPrune(DataDir, finput, ResultDir, 50, 5, 0.2) prunedSNPs %>% head() #> [1] \"rs143773730\" \"rs75530702\"  \"rs147281566\" \"rs35854196\"  \"rs115490086\" \"rs12041521\""},{"path":"/articles/GXwasR_overview.html","id":"executeplinkmaf","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"executePlinkMAF()","title":"GXwasR Overview","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" maf_data <- executePlinkMAF(DataDir, ResultDir, finput) maf_data %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"computeld","dir":"Articles","previous_headings":"Tutorials > Running Examples","what":"ComputeLD()","title":"GXwasR Overview","text":"","code":"snpld <- ComputeLD(     DataDir = GXwasR:::GXwasR_data(), ResultDir = tempdir(),     finput = \"GXwasR_example\", ByCHR = TRUE, CHRnum = 1, r2_LD = 0.2 ) snpld %>% head()"},{"path":"/articles/GXwasR_overview.html","id":"citing-gxwasr","dir":"Articles","previous_headings":"","what":"Citing GXwasR","title":"GXwasR Overview","text":"hope GXwasR useful research. Please use following information cite package overall approach. Thank !","code":"## Citation info citation(\"GXwasR\") #> To cite package 'GXwasR' in publications use: #>  #>   Bose B, Blostein F, Kim J, Winters J, Actkins KV, Mayer D, Congivaram H, Niarchou M, Edwards DV, Davis #>   LK, Stranger BE (2025). \"GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on #>   Complex Traits.\" _medRxiv 2025.06.10.25329327_. doi:10.1101/2025.06.10.25329327 #>   <https://doi.org/10.1101/2025.06.10.25329327>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on Complex Traits}, #>     author = {Banabithi Bose and Freida Blostein and Jeewoo Kim and Jessica Winters and Ky’Era V. Actkins and David Mayer and Harrsha Congivaram and Maria Niarchou and Digna Velez Edwards and Lea K. Davis and Barbara E. Stranger}, #>     journal = {medRxiv 2025.06.10.25329327}, #>     year = {2025}, #>     doi = {10.1101/2025.06.10.25329327}, #>   }"},{"path":"/articles/GXwasR_overview.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"GXwasR Overview","text":"GXwasR package (Bose, Blostein, Kim et al., 2025) made possible thanks : R (R Core Team, 2025) BiocStyle (Oleś, 2025) knitr (Xie, 2025) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux et al., 2024) sessioninfo (Wickham, Chang, Flight et al., 2025) testthat (Wickham, 2011) R session information.","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       macOS Sequoia 15.6 #>  system   aarch64, darwin24.4.0 #>  ui       unknown #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2025-08-08 #>  pandoc   3.6.3 @ /Applications/Positron.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown) #>  quarto   1.7.33 @ /usr/local/bin/quarto #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [2] CRAN (R 4.5.0) #>  backports              1.5.0      2024-05-23 [2] CRAN (R 4.5.1) #>  bibtex                 0.5.1      2023-01-26 [2] CRAN (R 4.5.0) #>  bigassertr             0.1.7      2025-06-27 [2] CRAN (R 4.5.1) #>  bigparallelr           0.3.2      2021-10-02 [2] CRAN (R 4.5.0) #>  bigsnpr                1.12.18    2024-11-26 [2] CRAN (R 4.5.1) #>  bigsparser             0.7.3      2024-09-06 [2] CRAN (R 4.5.1) #>  bigstatsr              1.6.2      2025-07-29 [2] CRAN (R 4.5.1) #>  Biobase                2.68.0     2025-04-15 [2] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [2] Bioconduc~ #>  BiocIO                 1.18.0     2025-04-15 [2] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [2] CRAN (R 4.5.0) #>  BiocParallel           1.42.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  BiocStyle              2.36.0     2025-04-15 [2] Bioconduc~ #>  Biostrings             2.76.0     2025-04-15 [2] Bioconduc~ #>  bit                    4.6.0      2025-03-06 [2] CRAN (R 4.5.1) #>  bit64                  4.6.0-1    2025-01-16 [2] CRAN (R 4.5.1) #>  bitops                 1.0-9      2024-10-03 [2] CRAN (R 4.5.0) #>  brio                   1.1.5      2024-04-24 [2] CRAN (R 4.5.1) #>  broom                  1.0.9      2025-07-28 [2] CRAN (R 4.5.1) #>  BSgenome               1.76.0     2025-04-15 [2] Bioconduc~ #>  cachem                 1.1.0      2024-05-16 [2] CRAN (R 4.5.0) #>  calibrate              1.7.7      2020-06-19 [2] CRAN (R 4.5.0) #>  callr                  3.7.6      2024-03-25 [2] CRAN (R 4.5.0) #>  car                    3.1-3      2024-09-27 [2] CRAN (R 4.5.0) #>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.5.0) #>  cli                    3.6.5      2025-04-23 [2] CRAN (R 4.5.0) #>  codetools              0.2-20     2024-03-31 [4] CRAN (R 4.5.1) #>  cowplot                1.2.0      2025-07-07 [2] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [2] CRAN (R 4.5.0) #>  curl                   6.4.0      2025-06-22 [2] CRAN (R 4.5.1) #>  data.table             1.17.8     2025-07-10 [2] CRAN (R 4.5.1) #>  DelayedArray           0.34.1     2025-04-17 [2] Bioconduc~ #>  devtools             * 2.4.5      2022-10-11 [3] CRAN (R 4.5.0) #>  digest                 0.6.37     2024-08-19 [2] CRAN (R 4.5.0) #>  doParallel             1.0.17     2022-02-07 [2] CRAN (R 4.5.0) #>  doRNG                  1.8.6.2    2025-04-02 [2] CRAN (R 4.5.0) #>  doSNOW                 1.0.20     2022-02-04 [2] CRAN (R 4.5.0) #>  dplyr                  1.1.4      2023-11-17 [2] CRAN (R 4.5.0) #>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.5.0) #>  evaluate               1.0.4      2025-06-18 [2] CRAN (R 4.5.1) #>  farver                 2.1.2      2024-05-13 [2] CRAN (R 4.5.0) #>  fastmap                1.2.0      2024-05-15 [2] CRAN (R 4.5.0) #>  flock                  0.7        2016-11-12 [2] CRAN (R 4.5.1) #>  foreach                1.5.2      2022-02-02 [2] CRAN (R 4.5.0) #>  Formula                1.2-5      2023-02-24 [2] CRAN (R 4.5.0) #>  fs                     1.6.6      2025-04-12 [2] CRAN (R 4.5.0) #>  gdsfmt                 1.44.1     2025-07-09 [2] Bioconduc~ #>  generics               0.1.4      2025-05-09 [2] CRAN (R 4.5.0) #>  GenomeInfoDb           1.44.1     2025-07-23 [2] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-04-21 [2] Bioconductor #>  GenomicAlignments      1.44.0     2025-04-15 [2] Bioconduc~ #>  GenomicRanges          1.60.0     2025-04-15 [2] Bioconduc~ #>  ggplot2                3.5.2      2025-04-09 [2] CRAN (R 4.5.0) #>  ggpubr                 0.6.1      2025-06-27 [2] CRAN (R 4.5.1) #>  ggrepel                0.9.6      2024-09-07 [2] CRAN (R 4.5.1) #>  ggsignif               0.6.4      2022-10-13 [2] CRAN (R 4.5.0) #>  glue                   1.8.0      2024-09-30 [2] CRAN (R 4.5.0) #>  gridExtra              2.3        2017-09-09 [2] CRAN (R 4.5.0) #>  gtable                 0.3.6      2024-10-25 [2] CRAN (R 4.5.0) #>  GXwasR               * 0.99.0     2025-08-08 [1] Bioconductor #>  hms                    1.1.3      2023-03-21 [2] CRAN (R 4.5.0) #>  htmltools              0.5.8.1    2024-04-04 [2] CRAN (R 4.5.0) #>  htmlwidgets            1.6.4      2023-12-06 [2] CRAN (R 4.5.0) #>  httpuv                 1.6.16     2025-04-16 [2] CRAN (R 4.5.1) #>  httr                   1.4.7      2023-08-15 [2] CRAN (R 4.5.0) #>  IRanges                2.42.0     2025-04-15 [2] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [2] CRAN (R 4.5.0) #>  jsonlite               2.0.0      2025-03-27 [2] CRAN (R 4.5.0) #>  knitr                  1.50       2025-03-16 [2] CRAN (R 4.5.0) #>  labeling               0.4.3      2023-08-29 [2] CRAN (R 4.5.0) #>  later                  1.4.2      2025-04-08 [2] CRAN (R 4.5.1) #>  lattice                0.22-7     2025-04-02 [4] CRAN (R 4.5.1) #>  lifecycle              1.0.4      2023-11-07 [2] CRAN (R 4.5.0) #>  lubridate              1.9.4      2024-12-08 [2] CRAN (R 4.5.1) #>  magrittr             * 2.0.3      2022-03-30 [2] CRAN (R 4.5.0) #>  MASS                   7.3-65     2025-02-28 [4] CRAN (R 4.5.1) #>  mathjaxr               1.8-0      2025-04-30 [2] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [4] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [2] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [2] CRAN (R 4.5.0) #>  memoise                2.0.1      2021-11-26 [2] CRAN (R 4.5.0) #>  mgcv                   1.9-3      2025-04-04 [4] CRAN (R 4.5.1) #>  mime                   0.13       2025-03-17 [2] CRAN (R 4.5.0) #>  miniUI                 0.1.2      2025-04-17 [3] CRAN (R 4.5.0) #>  nlme                   3.1-168    2025-03-31 [4] CRAN (R 4.5.1) #>  pillar                 1.11.0     2025-07-04 [2] CRAN (R 4.5.1) #>  pkgbuild               1.4.8      2025-05-26 [2] CRAN (R 4.5.0) #>  pkgconfig              2.0.3      2019-09-22 [2] CRAN (R 4.5.0) #>  pkgdev                 0.1.0.9060 2025-08-04 [2] Github (dieghernan/pkgdev@e56f2a8) #>  pkgload                1.4.0      2024-06-28 [2] CRAN (R 4.5.0) #>  plyr                   1.8.9      2023-10-02 [2] CRAN (R 4.5.1) #>  plyranges              1.28.0     2025-04-15 [2] Bioconduc~ #>  polynom                1.4-1      2022-04-11 [2] CRAN (R 4.5.0) #>  poolr                  1.2-0      2025-05-07 [2] CRAN (R 4.5.0) #>  prettyunits            1.2.0      2023-09-24 [2] CRAN (R 4.5.0) #>  printr               * 0.3        2023-03-08 [2] CRAN (R 4.5.0) #>  processx               3.8.6      2025-02-21 [2] CRAN (R 4.5.1) #>  profvis                0.4.0      2024-09-20 [3] CRAN (R 4.5.0) #>  progress               1.2.3      2023-12-06 [2] CRAN (R 4.5.0) #>  promises               1.3.3      2025-05-29 [2] CRAN (R 4.5.0) #>  ps                     1.9.1      2025-04-12 [2] CRAN (R 4.5.1) #>  purrr                  1.1.0      2025-07-10 [2] CRAN (R 4.5.1) #>  qqman                  0.1.9      2023-08-23 [2] CRAN (R 4.5.0) #>  R.methodsS3            1.8.2      2022-06-13 [2] CRAN (R 4.5.0) #>  R.oo                   1.27.1     2025-05-02 [2] CRAN (R 4.5.0) #>  R.utils                2.13.0     2025-02-24 [2] CRAN (R 4.5.0) #>  R6                     2.6.1      2025-02-15 [2] CRAN (R 4.5.0) #>  ragg                   1.4.0      2025-04-10 [3] CRAN (R 4.5.0) #>  rbibutils              2.3        2024-10-04 [2] CRAN (R 4.5.1) #>  RColorBrewer           1.1-3      2022-04-03 [2] CRAN (R 4.5.0) #>  Rcpp                   1.1.0      2025-07-02 [2] CRAN (R 4.5.1) #>  RCurl                  1.98-1.17  2025-03-22 [2] CRAN (R 4.5.0) #>  Rdpack                 2.6.4      2025-04-09 [2] CRAN (R 4.5.0) #>  RefManageR           * 1.4.0      2022-09-30 [2] CRAN (R 4.5.1) #>  regioneR               1.40.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  remotes                2.5.0      2024-03-17 [2] CRAN (R 4.5.0) #>  restfulr               0.0.16     2025-06-27 [2] CRAN (R 4.5.1) #>  rjson                  0.2.23     2024-09-16 [2] CRAN (R 4.5.0) #>  rlang                  1.1.6      2025-04-11 [2] CRAN (R 4.5.0) #>  rmarkdown            * 2.29       2024-11-04 [2] CRAN (R 4.5.0) #>  rmio                   0.4.0      2022-02-17 [2] CRAN (R 4.5.0) #>  rngtools               1.5.2      2021-09-20 [2] CRAN (R 4.5.0) #>  rprojroot              2.1.0      2025-07-12 [2] CRAN (R 4.5.1) #>  Rsamtools              2.24.0     2025-04-15 [2] Bioconduc~ #>  rstatix                0.7.2      2023-02-01 [2] CRAN (R 4.5.0) #>  rtracklayer            1.68.0     2025-04-15 [2] Bioconduc~ #>  S4Arrays               1.8.1      2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  S4Vectors              0.46.0     2025-04-15 [2] Bioconduc~ #>  scales                 1.4.0      2025-04-24 [2] CRAN (R 4.5.0) #>  seqminer               9.7        2024-10-02 [2] CRAN (R 4.5.1) #>  sessioninfo          * 1.2.3      2025-02-05 [2] CRAN (R 4.5.1) #>  shiny                  1.11.1     2025-07-03 [2] CRAN (R 4.5.1) #>  snow                   0.4-4      2021-10-27 [2] CRAN (R 4.5.0) #>  SNPRelate              1.42.0     2025-04-15 [2] Bioconduc~ #>  SparseArray            1.8.1      2025-07-23 [2] Bioconduc~ #>  stringi                1.8.7      2025-03-27 [2] CRAN (R 4.5.0) #>  stringr                1.5.1      2023-11-14 [2] CRAN (R 4.5.0) #>  sumFREGAT              1.2.5      2022-06-07 [2] CRAN (R 4.5.1) #>  SummarizedExperiment   1.38.1     2025-04-30 [2] Bioconductor 3.21 (R 4.5.0) #>  sys                    3.4.3      2024-10-04 [2] CRAN (R 4.5.0) #>  systemfonts            1.2.3      2025-04-30 [2] CRAN (R 4.5.0) #>  testthat             * 3.2.3      2025-01-13 [2] CRAN (R 4.5.1) #>  textshaping            1.0.1      2025-05-01 [3] CRAN (R 4.5.0) #>  tibble                 3.3.0      2025-06-08 [2] CRAN (R 4.5.0) #>  tidyr                  1.3.1      2024-01-24 [2] CRAN (R 4.5.1) #>  tidyselect             1.2.1      2024-03-11 [2] CRAN (R 4.5.0) #>  timechange             0.3.0      2024-01-18 [2] CRAN (R 4.5.1) #>  tzdb                   0.5.0      2025-03-15 [2] CRAN (R 4.5.1) #>  UCSC.utils             1.4.0      2025-04-15 [2] Bioconduc~ #>  urlchecker             1.0.1      2021-11-30 [3] CRAN (R 4.5.0) #>  usethis              * 3.1.0      2024-11-26 [2] CRAN (R 4.5.0) #>  vctrs                  0.6.5      2023-12-01 [2] CRAN (R 4.5.0) #>  vroom                  1.6.5      2023-12-05 [2] CRAN (R 4.5.1) #>  withr                  3.0.2      2024-10-28 [2] CRAN (R 4.5.0) #>  xfun                   0.52       2025-04-02 [2] CRAN (R 4.5.0) #>  XML                    3.99-0.18  2025-01-01 [2] CRAN (R 4.5.0) #>  xml2                   1.3.8      2025-03-14 [2] CRAN (R 4.5.1) #>  xtable                 1.8-4      2019-04-21 [2] CRAN (R 4.5.0) #>  XVector                0.48.0     2025-04-15 [2] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [2] CRAN (R 4.5.0) #>  #>  [1] /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f #>  [2] /Users/mayerdav/Library/R/arm64/4.5/library #>  [3] /opt/homebrew/lib/R/4.5/site-library #>  [4] /opt/homebrew/Cellar/r/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/GXwasR_overview.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"GXwasR Overview","text":"vignette generated using BiocStyle (Oleś, 2025) knitr (Xie, 2025) rmarkdown (Allaire, Xie, Dervieux et al., 2024) running behind scenes. Citations made RefManageR (McLean, 2017). [1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.29. 2024. URL: https://github.com/rstudio/rmarkdown. [2] B. Bose, F. Blostein, J. Kim, et al. “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits”. : medRxiv 2025.06.10.25329327 (2025). DOI: 10.1101/2025.06.10.25329327. [3] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [4] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.36.0. 2025. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [5] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2025. URL: https://www.R-project.org/. [6] H. Wickham. “testthat: Get Started Testing”. : R Journal 3 (2011), pp. 5–10. URL: https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. [7] H. Wickham, W. Chang, R. Flight, et al. sessioninfo: R Session Information. R package version 1.2.3. 2025. DOI: 10.32614/CRAN.package.sessioninfo. URL: https://CRAN.R-project.org/package=sessioninfo. [8] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.50. 2025. URL: https://yihui.org/knitr/.","code":""},{"path":"/articles/decoding_ancestry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"pursuit ancestral origins using genetic data become increasingly accessible sophisticated advent genomics technology. R package GXwasR enables identification individuals divergent ancestry genotype datasets. vignette provides -depth look GXwasR facilitates ancestry estimation, particularly focusing AncestryCheck() function.","code":""},{"path":"/articles/decoding_ancestry.html","id":"identifying-divergent-ancestry","dir":"Articles","previous_headings":"","what":"Identifying Divergent Ancestry","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"core ancestry estimation lies combining genotypes study population reference dataset, HapMap 1000 Genomes studies. integration allows detection population structure level reference dataset, revealing continental-scale ancestry differences.","code":""},{"path":"/articles/decoding_ancestry.html","id":"accessing-gxwasr-and-simulated-genotype-datasets","dir":"Articles","previous_headings":"","what":"Accessing GXwasR and Simulated Genotype Datasets","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"GXwasR readily available Bioconductor can installed using BiocManager::install(“GXwasR”). package includes simulated genotype dataset prefixed GXwasR_example plink bed files (.e., .bed, .fam, .bim), ideal users experiment . simulated dataset consists genotypes 276 individuals across 26,527 genetic markers, providing realistic scenario testing functionality. Let’s see details genotype dataset call ‘Study data’.","code":"library(GXwasR) #>  #> GXwasR: Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data #> Version 0.99.0 () installed #> Author: c( #>     person(given = \"Banabithi\", #>            family = \"Bose\", #>            role = c(\"cre\", \"aut\"), #>            email = \"banabithi.bose@gmail.com\", #>            comment = c(ORCID = \"0000-0003-0842-8768\")) #>            ) #> Maintainer: Banabithi Bose <banabithi.bose@gmail.com> #> Tutorial: https://github.com #> Use citation(\"GXwasR\") to know how to cite this work. DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" x <- PlinkSummary(DataDir, ResultDir, finput) #> ℹ Dataset: GXwasR_example #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 12 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #>   - Chr: 24 #> ℹ Total number of SNPs: 26527 #> ℹ Total number of samples: 276"},{"path":"/articles/decoding_ancestry.html","id":"ancestrycheck-function-overview","dir":"Articles","previous_headings":"","what":"AncestryCheck Function Overview","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"AncestryCheck comprehensive R function designed comprehensive ancestry analysis genetic studies. leveraging plink software via R platform,seamlessly integrates several critical steps: SNP filtering data integrity, linkage disequilibrium (LD) pruning reduce data complexity, correction chromosome mismatches, checking allele flips ensure data accuracy. Additionally, adeptly merges study reference datasets, conducts Principal Component Analysis (PCA) unravel population structures, incorporates outlier detection visualization. function pivotal comparing study samples’ self-reported ancestry reference populations, enabling detailed analysis population structure identification divergent ancestries.","code":""},{"path":"/articles/decoding_ancestry.html","id":"implemented-workflow-of-ancestry-estimation-in-ancestrycheck","dir":"Articles","previous_headings":"","what":"Implemented workflow of ancestry estimation in AncestryCheck","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"AncestryCheck() function GXwasR package sophisticated tool designed ancestry analysis genetic studies. provides comprehensive approach, data preparation advanced statistical analysis, estimating ancestral backgrounds. Let’s delve technical aspects workflow function:","code":""},{"path":"/articles/decoding_ancestry.html","id":"data-preparation","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"Data Preparation:","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"Directories initial quality check: ‘AncestryCheck’ function requires specific directories inputting PLINK binary files saving output files. stage, input genotype dataset, .e., study dataset, already undergone thorough quality control. GXwasR offers range functions facilitate preliminary quality check (QC) genotype datasets, essential accurate ancestry estimation. QC process typically includes filtering multi-allelic variants, selecting SNPs based genotype call rate, filtering specific chromosomes, SNP filtering grounded minor allele frequency, adherence Hardy-Weinberg equilibrium, sample selection based criteria like call rate, low missing rate, heterozygosity thresholds. ’s important apply filters appropriate sequence optimal dataset preparation. detailed understanding QC pipeline, users can refer comprehensive guide available https://boseb.github.io/GXwasR/articles/preimputationQC.html. Genomic Build X-Chromosome Compatibility: Users AncestryCheck function must ensure study reference datasets aligned genomic build, consistent chromosome coding across entire genome. alignment crucial, particularly since sex chromosomes (X Y) often different encoding conventions genomic datasets. AncestryCheck function equipped implicitly handle variations sex chromosome encoding. However, users advised employ tools like Liftover CrossMap verifying aligning genomic builds chromosome codes study reference datasets, thus ensuring compatibility accuracy ancestry estimation process. Reference Dataset Selection: function offers users flexibility select two established reference populations, , HapMap phase III[2] 1000 Genomes phase 3[3] Projects. specifically designed work seamlessly preprocessed genotype datasets reference panels. users seeking download process datasets, comprehensive guidance provided dedicated vignette. detailed resource, can accessed https://boseb.github.io/Processing_1000Genome/tutorial.html, offers step--step instructions effectively prepare reference datasets use ancestry analysis, ensuring users can make genetic studies selected reference populations.","code":""},{"path":"/articles/decoding_ancestry.html","id":"snp-filtering","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"SNP Filtering:","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"function incorporates crucial step SNP filtering study reference datasets. filtering process particularly focused excluding SNPs conform -T G-C base pairings. implementing filtering, AncestryCheck ensures overall quality reliability genetic data study reference datasets. step vital maintaining integrity analysis, helps eliminating potentially problematic SNPs skew ancestry estimation results.","code":""},{"path":"/articles/decoding_ancestry.html","id":"ld-pruning","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"LD Pruning:","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"function includes critical step LD-based filtering study reference datasets, essential simplifying genetic data removing variants high linkage disequilibrium. process especially significant conducting accurate PCA study dataset SNPs. default setting targets variants LD r2 value greater 0.2 within 50kb window. However, AncestryCheck offers users flexibility adjust parameters according specific research needs. Users can choose whether apply LD-based filtering can modify parameters like r2 threshold window size. adaptability ensures function can tailored variety study designs research objectives, making versatile tool ancestry analysis. ’AncestryCheck utilizes list pruned variants study data proportionately adjust reference dataset, aligning scale study data. harmonization crucial accurate comparative analysis ensures consistency ancestral estimation process.","code":""},{"path":"/articles/decoding_ancestry.html","id":"filter-for-known-high-ld-structure-","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"Filter for known high-LD structure.","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"‘AncestryCheck’ provides additional layer refinement offering option filter genomic ranges characterized high-LD [4]. feature particularly beneficial genomic builds hg19 hg38, targets removes regions within builds known high-LD structures. specific high-LD region files already incorporated GXwasR package, readily accessible use AncestryCheck. targeted filtering crucial enhancing quality accuracy genetic data analyzed, ensuring resulting ancestry estimation precise reliable possible.","code":""},{"path":"/articles/decoding_ancestry.html","id":"genotype-data-processing-for-merge","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"Genotype Data Processing for Merge:","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"function includes meticulous process prepare genotype data merging, addressing key issues otherwise compromise accuracy analysis: Correcting Mismatches: function systematically corrects mismatches chromosome IDs, positions, allele annotations. step essential ensure study reference data align accurately, providing reliable basis subsequent analysis. rectifying discrepancies, AncestryCheck safeguards potential errors arise inconsistencies datasets. Handling Allele Flips: Allele flips frequent complication genotype data, alleles may reported reverse order. function adept identifying rectifying flips, thereby preserving integrity genetic information. Given importance accurately matching SNPs, ability correct allele flips crucial error-free dataset merging. Dealing Sex Chromosomes: encoding sex chromosomes often differs autosomal chromosomes, can introduce additional complexity matching study reference datasets. AncestryCheck designed handle variations effectively. Removing Mismatches Post-Flipping: allele flipping process, function performs thorough check identify remaining mismatches. alleles still aligned correctly flipping process identified removed reference dataset. final step ensures perfectly matched SNPs retained merged dataset, thereby enhancing accuracy ancestral analysis. comprehensive steps, AncestryCheck ensures genotype datasets optimally prepared merging, laying solid foundation accurate reliable ancestry estimation.","code":""},{"path":"/articles/decoding_ancestry.html","id":"principal-component-analysis-pca","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"Principal Component Analysis (PCA):","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"Merging Datasets: preprocessing, study reference datasets merged. Executing PCA: PCA performed combined dataset, providing insights genetic variance ancestral components. implementing PCA harmonized genetic data, AncestryCheck effectively translates nuanced genetic variations interpretable patterns, facilitating deeper understanding ancestral backgrounds inherent study population. step fundamental transforming raw genetic data meaningful insights human ancestry genetic diversity.","code":""},{"path":"/articles/decoding_ancestry.html","id":"reference-populations","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"Reference Populations:","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"HapMap: combined used HapMap data following populations: AFR = ASW (African Ancestry SW USA), LWK (Luhya Webuye, Kenya), MKK (Maasai Kinyawa, Kenya), YRI (Yoruba Ibadan, Nigeria). EAS = CHB (Han Chinese Beijing, China), CHD (Chinese Metropolitan Denver, CO, USA), JPT (Japanese Tokyo, Japan). EUR = CEU (CEPH/Utah Collection) TSI (Toscani Italia). SAS = GIH (Gujarati Indians Houston, Texas, USA). 1000Genomes: used 1000Genomes data following super populations: AFR = ASW (African Ancestry Southwest US), ACB (African Caribbean Barbados), ESN (Esan Nigeria), GWD (Gambian Western Division, Gambia), LWK (Luhya Webuye, Kenya), MSL (Mende Sierra Leone), YRI (Yoruba Ibadan, Nigeria). EAS = CDX (Chinese Dai Xishuangbanna, China), CHB (Han Chinese Bejing, China), JPT (Japanese Tokyo, Japan), KHV (Kinh Ho Chi Minh City, Vietnam), CHS (Southern Han Chinese, China). EUR = GBR (British England Scotland), FIN (Finnish Finland), IBS (Iberian populations Spain), TSI (Toscani Italy), CEU (Utah residents Northern Western European ancestry). SAS = BEB (Bengali Bangladesh), GIH (Gujarati Indian Houston,TX), ITU (Indian Telugu UK), PJL (Punjabi Lahore,Pakistan), STU (Sri Lankan Tamil UK). information can found : http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/phase3/20131219.populations.tsv","code":""},{"path":"/articles/decoding_ancestry.html","id":"outlier-detection-and-ancestry-assignment-analysis","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"Outlier Detection and Ancestry Assignment Analysis:","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"Flexibility Reference Population Selection: key feature function versatility handling various reference populations. Users freedom select specific reference population study samples’ ancestry labels compared. instance, setting parameter outlierOf EUR (.e., Ref_EUR) enables identification non-European outliers European context. reference populations like AFR (African), EAS (East Asian), SAS (South Asian) can also used, allowing wide range comparative ancestral analyses. flexibility ensures AncestryCheck can cater diverse research needs objectives. Setting Outlier/Prediction Thresholds: function allows users define specific thresholds outlier detection/ancestry assignement, adding layer customization analysis. employs methodical approach calculating PC1 PC2 Z-scores subject relation mean standard deviation PC1 PC2 reference population. Samples PC1 PC2 Z-scores within user-defined threshold predicted ancestry reference population. example, case European reference samples, function computes mean standard deviation first two principal components (mean(PC1 Ref_EUR), sd(PC1 Ref_EUR), mean(PC2 Ref_EUR), sd(PC2 Ref_EUR)). calculates Z-scores PC1 PC2 (Z-score PC1 Ref_EUR <- (PC1 - mean(PC1 Ref_EUR))/sd(PC1 Ref_EUR), Z-score PC2 Ref_EUR <- (PC2 - mean(PC2 Ref_EUR))/sd(PC2 Ref_EUR) ) samples relation European Reference. study sample whose PC1 PC2 Z-score considered outlier European population. approach particularly effective pinpointing samples ancestral backgrounds significantly deviate selected reference population, providing clear quantifiable method identify analyze outliers.","code":""},{"path":"/articles/decoding_ancestry.html","id":"visualization-and-reporting","dir":"Articles","previous_headings":"Implemented workflow of ancestry estimation in AncestryCheck","what":"Visualization and Reporting:","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"PCA Plot Visualization: One insightful aspects AncestryCheck ability visually present results PCA. done color-coded scatter plot displays first two principal components. graphical representation instrumental highlighting genetic similarities differences among analyzed populations. plotting individuals scatter plot, researchers can easily discern underlying genetic structure observe study samples cluster diverge various reference populations. Resultant Dataframe: Following PCA outlier analysis, AncestryCheck generates dataframe lists identified outlier samples. output particularly useful researchers, provides clear organized view samples significantly differ genetically chosen reference population. information crucial detailed investigations interpretations genetic ancestry. Comprehensive Reporting: addition visual tabular outputs, function also produces detailed reports covering various aspects analysis. reports include information allele flips thorough breakdown outlier analysis. comprehensive reporting enhances overall understanding genetic structure ancestry estimations, providing multi-dimensional view results. feature AncestryCheck particularly valuable researchers require -depth documentation interpretation genetic data.","code":""},{"path":"/articles/decoding_ancestry.html","id":"ancestrycheck-parameters-in-brief","dir":"Articles","previous_headings":"","what":"AncestryCheck parameters in brief","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"AncestryCheck function takes several arguments customize operations: DataDir: Directory containing input PLINK files. ResultDir: Directory storing output files; defaults temporary directory. finput: Prefix PLINK binary files study samples. reference: Choice reference population data, either ‘HapMapIII_NCBI36’ ‘ThousandGenome’. filterSNP: Flag enable disable SNP filtering. studyLD referLD: Flags applying LD-based filtering study reference data, respectively. studyLD_window_size, studyLD_step_size, studyLD_r2_threshold, referLD_window_size, referLD_step_size, referLD_r2_threshold: Parameters LD pruning. highLD_regions: Dataframe known high LD regions. study_pop: Dataframe containing sample IDs ancestry labels study samples. outlier: Flag enable disable outlier detection. outlierOf: Reference ancestry name detecting outlier samples. outlier_threshold: Numeric threshold outlier detection.","code":""},{"path":"/articles/decoding_ancestry.html","id":"detailed-parameter-description","dir":"Articles","previous_headings":"","what":"Detailed parameter description","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"exploring practical application AncestryCheck function, essential understand details arguments implications: DataDir: parameter requires character string specifying file path input PLINK binary files. essential indicating study’s genetic data stored. ResultDir (default = tempdir()): argument character string file path output files stored. specified, defaults R’s temporary directory. finput: parameter specifies prefix input PLINK binary files study samples. reference (default = c(“HapMapIII_NCBI36”, “ThousandGenome”)): vector indicating choice reference population. options include HapMap Phase 3 1000 Genomes Phase III. filterSNP (default = TRUE): Indicates whether filter SNPs. ’s set TRUE default can changed FALSE direct joining study reference samples possible. studyLD (default = TRUE): Boolean value determines whether LD-based filtering applied study genotype data. studyLD_window_size (default = 50): integer defining window size variant count kilobase LD-based filtering variants study data. studyLD_step_size (default = 5): Specifies variant count shift window end step LD filtering study data. studyLD_r2_threshold (default = 0.02): numeric value 0 1 setting pairwise r2 threshold LD-based filtering study data. referLD (default = FALSE): Determines whether LD-based filtering applied reference genotype data. referLD_window_size (default = 50), referLD_step_size (default = 5), referLD_r2_threshold (default = 0.02): parameters define window size, step size, r2 threshold LD filtering reference data, similar study data settings. highLD_regions: parameter requires dataframe containing known high LD regions. dataframe Anderson et. al.[4], ‘highLD_hg19’ hg19 genome built provided package. study_pop: dataframe containing two columns study: sample ID (IID) ancestry label. example dataframe prefixed ‘example_data_study_sample_ancestry’ ‘GXwasR_example’ data. outlier (default = FALSE): Boolean value specifying whether outlier detection performed. outlierOf (default = “EUR”): parameter specifies reference ancestry name detecting outlier samples. outlier_threshold (default = 3): Specifies numeric threshold outlier detection. threshold multiplied Euclidean distance center PC1 PC2 maximum Euclidean distance reference samples determine outliers. parameters default values allow significant degree customization AncestryCheck function, enabling users tailor analysis specific research needs.","code":""},{"path":"/articles/decoding_ancestry.html","id":"ancestrycheck-usage-using-hapmapiii-reference","dir":"Articles","previous_headings":"","what":"AncestryCheck Usage using HapMapIII Reference","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"function can used following manner study data reference data HapMapIII: plot shows distribution individual genetic samples along first two principal components (PC1 PC2). point represents genetic sample, color-coded based reference populations (Ref_ASIAN, Ref_CEU, Ref_YRI) study populations (Study_EUR_FIN, Study_EUR_GBR, Study_EUR_TSI). points spread across PCA plot, cluster likely representing genetic similarity within group differences groups. reference populations, Ref_AFR, Ref_EAS, Ref_EUR, Ref_SAS clustered distinctively, suggesting clear genetic differentiation populations. study populations overlap Ref_EUR (Euoprean) reference population, indicating European ancestry, study subgroup (FIN, GBR, TSI) forming subclusters, suggesting finer-scale differences ancestry within Europe. Since study dataset simulated CEU 1000 Genome dataset, surprising see outlier samples. Specifically, TSI population highly similar CEU.","code":"# Define parameters library(GXwasR) data(\"highLD_hg19\", package = \"GXwasR\") data(\"example_data_study_sample_ancestry\", package = \"GXwasR\")  # Call the AncestryCheck function hapmap_results <- AncestryCheck(     DataDir = GXwasR:::GXwasR_data(),     ResultDir = tempdir(),     finput = \"GXwasR_example\",     reference = \"HapMapIII_NCBI36\",     filterSNP = TRUE,     studyLD = TRUE,     studyLD_window_size = 50,     studyLD_step_size = 5,     studyLD_r2_threshold = 0.02,     referLD = FALSE,     referLD_window_size = 50,     referLD_step_size = 5,     referLD_r2_threshold = 0.02,     highLD_regions = highLD_hg19,     study_pop = example_data_study_sample_ancestry,     outlier = TRUE,     outlierOf = \"EUR\",     outlier_threshold = 3 ) #> ℹ 'HapMapIII_NCBI36' reference data found at /Users/mayerdav/Downloads/HapMapIII_NCBI36. #> Using PLINK v1.9.0-b.7.7 64-bit (22 Oct 2024) #> 4214 ambiguous SNPs removed from study data. #> 111854 ambiguous SNPs removed from reference data. #> ! LD pruning is recommended for reference dataset. Set referLD = TRUE. #> ✔ LD pruning was performed for study dataset. #>  #> ℹ Number of overlapping SNPs between study and reference data using rsID: 1096 #> ℹ No allele flips between study and reference data. #> ℹ 9 samples are outliers of selected reference population. #> ℹ 179 samples are NOT outliers of selected reference population. #> This message is displayed once every 8 hours. hapmap_results$pca_plot Samples_with_predicted_ancestry <- hapmap_results[[\"Samples_with_predicted_ancestry\"]]  outlier <- hapmap_results[[\"Outlier_samples\"]] outlier #>       FID     IID #> 1 EUR_FIN HG00189 #> 2 EUR_FIN HG00280 #> 3 EUR_FIN HG00315 #> 4 EUR_FIN HG00332 #> 5 EUR_FIN HG00349 #> 6 EUR_FIN HG00350 #> 7 EUR_FIN HG00377 #> 8 EUR_FIN HG00383 #> 9 EUR_TSI NA20537  Samples_with_predicted_ancestry[seq_len(5), ] #>       FID     IID Predicted Ancestry #> 1 EUR_GBR HG00096                EUR #> 2 EUR_GBR HG00097                EUR #> 3 EUR_GBR HG00099                EUR #> 4 EUR_GBR HG00100                EUR #> 5 EUR_GBR HG00101                EUR"},{"path":"/articles/decoding_ancestry.html","id":"ancestrycheck-using-thousandgenome-reference","dir":"Articles","previous_headings":"","what":"AncestryCheck Using ThousandGenome Reference","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"function can used following manner study data reference data ThousandGenome: lack outlier samples—significantly distanced reference group—suggests homogeneity ancestry study population. Given study data simulated based EUR population 1000 Genomes project data, absence outliers aligns expectations. precise clustering absence outliers reaffirm simulation parameters also shows reliability ancestry estimation methods employed. accuracy crucial genetic studies, reinforces confidence PCA’s ability discern delineate ancestry precision.","code":"# Define parameters data(\"highLD_hg19\", package = \"GXwasR\") data(\"example_data_study_sample_ancestry\", package = \"GXwasR\")  thousandgenome_results <- AncestryCheck(   DataDir = GXwasR:::GXwasR_data(),    ResultDir = tempdir(),    finput = \"GXwasR_example\",    reference = \"ThousandGenome\",    highLD_regions = highLD_hg19,    study_pop = example_data_study_sample_ancestry,    studyLD = TRUE,    referLD = TRUE,    outlierOf = \"EUR\",    outlier = TRUE,    outlier_threshold = 5   ) #> 4214 ambiguous SNPs removed from study data. #> No A-T or G-C SNPs found in reference data. #> ✔ LD pruning was performed for reference dataset. #> ✔ LD pruning was performed for study dataset. #>  #> ℹ Number of overlapping SNPs between study and reference data using rsID: 1005 #> ℹ No allele flips between study and reference data. #> ✖ There is no outlier sample. #> ✖ There are no non-outlier samples.   thousandgenome_results$pca_plot Samples_with_predicted_ancestry <- thousandgenome_results[[\"Samples_with_predicted_ancestry\"]]  outlier <- thousandgenome_results[[\"Outlier_samples\"]] outlier #> [1] FID IID #> <0 rows> (or 0-length row.names)  Samples_with_predicted_ancestry[seq_len(5), ] #>       FID  IID Predicted Ancestry #> NA   <NA> <NA>               <NA> #> NA.1 <NA> <NA>               <NA> #> NA.2 <NA> <NA>               <NA> #> NA.3 <NA> <NA>               <NA> #> NA.4 <NA> <NA>               <NA>"},{"path":"/articles/decoding_ancestry.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"combination genotype datasets study populations comprehensive reference datasets, followed PCA, provides nuanced view ancestry. GXwasR package simplifies process, offering researchers enthusiasts robust tool ancestry estimation. efficient approach enhances understanding genetic diversity also strengthens connection ancestral past.","code":""},{"path":"/articles/decoding_ancestry.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"Purcell et. al.,(2007). PLINK: Tool Set Whole-Genome Association Population-Based Linkage Analyses. American Journal Human Genetics, 81(3), 559-575. https://doi.org/10.1086/519795. International HapMap 3 Consortium. Integrating common rare genetic variation diverse human populations. Nature 467, 52–58 (2010). https://doi.org/10.1038/nature09298 1000 Genomes Project Consortium. global reference human genetic variation. Nature 526, 68–74 (2015). https://doi.org/10.1038/nature15393 Anderson CA, Pettersson FH, Clarke GM, Cardon LR, Morris AP, Zondervan KT. Data quality control genetic case-control association studies. Nat Protoc. 2010 Sep;5(9):1564-73. doi: 10.1038/nprot.2010.116. Epub 2010 Aug 26. PMID: 21085122; PMCID: PMC3025522.","code":""},{"path":"/articles/decoding_ancestry.html","id":"citing-gxwasr","dir":"Articles","previous_headings":"","what":"Citing GXwasR","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"hope GXwasR useful research. Please use following information cite package overall approach. Thank !","code":"## Citation info citation(\"GXwasR\") #> To cite package 'GXwasR' in publications use: #>  #>   Bose B, Blostein F, Kim J, Winters J, Actkins KV, Mayer D, Congivaram H, Niarchou M, Edwards DV, Davis LK, Stranger BE (2025). \"GXwasR: A Toolkit #>   for Investigating Sex-Differentiated Genetic Effects on Complex Traits.\" _medRxiv 2025.06.10.25329327_. doi:10.1101/2025.06.10.25329327 #>   <https://doi.org/10.1101/2025.06.10.25329327>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on Complex Traits}, #>     author = {Banabithi Bose and Freida Blostein and Jeewoo Kim and Jessica Winters and Ky’Era V. Actkins and David Mayer and Harrsha Congivaram and Maria Niarchou and Digna Velez Edwards and Lea K. Davis and Barbara E. Stranger}, #>     journal = {medRxiv 2025.06.10.25329327}, #>     year = {2025}, #>     doi = {10.1101/2025.06.10.25329327}, #>   }"},{"path":"/articles/decoding_ancestry.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"GXwasR package (Bose, Blostein, Kim, Winters, Actkins, Mayer, Congivaram, Niarchou, Edwards, Davis, Stranger, 2025) made possible thanks : R (R Core Team, 2025) BiocStyle (Oleś, 2025) knitr (Xie, 2025) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux, McPherson, Luraschi, Ushey, Atkins, Wickham, Cheng, Chang, Iannone, 2024) sessioninfo (Wickham, Chang, Flight, Müller, Hester, 2025) testthat (Wickham, 2011) package developed using biocthis. R session information.","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       macOS Sequoia 15.6 #>  system   aarch64, darwin24.4.0 #>  ui       unknown #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2025-08-08 #>  pandoc   3.6.3 @ /Applications/Positron.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown) #>  quarto   1.7.33 @ /usr/local/bin/quarto #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [2] CRAN (R 4.5.0) #>  backports              1.5.0      2024-05-23 [2] CRAN (R 4.5.1) #>  bibtex                 0.5.1      2023-01-26 [2] CRAN (R 4.5.0) #>  bigassertr             0.1.7      2025-06-27 [2] CRAN (R 4.5.1) #>  bigparallelr           0.3.2      2021-10-02 [2] CRAN (R 4.5.0) #>  bigsnpr                1.12.18    2024-11-26 [2] CRAN (R 4.5.1) #>  bigsparser             0.7.3      2024-09-06 [2] CRAN (R 4.5.1) #>  bigstatsr              1.6.2      2025-07-29 [2] CRAN (R 4.5.1) #>  Biobase                2.68.0     2025-04-15 [2] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [2] Bioconduc~ #>  BiocIO                 1.18.0     2025-04-15 [2] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [2] CRAN (R 4.5.0) #>  BiocParallel           1.42.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  BiocStyle              2.36.0     2025-04-15 [2] Bioconduc~ #>  Biostrings             2.76.0     2025-04-15 [2] Bioconduc~ #>  bit                    4.6.0      2025-03-06 [2] CRAN (R 4.5.1) #>  bit64                  4.6.0-1    2025-01-16 [2] CRAN (R 4.5.1) #>  bitops                 1.0-9      2024-10-03 [2] CRAN (R 4.5.0) #>  brio                   1.1.5      2024-04-24 [2] CRAN (R 4.5.1) #>  broom                  1.0.9      2025-07-28 [2] CRAN (R 4.5.1) #>  BSgenome               1.76.0     2025-04-15 [2] Bioconduc~ #>  cachem                 1.1.0      2024-05-16 [2] CRAN (R 4.5.0) #>  calibrate              1.7.7      2020-06-19 [2] CRAN (R 4.5.0) #>  callr                  3.7.6      2024-03-25 [2] CRAN (R 4.5.0) #>  car                    3.1-3      2024-09-27 [2] CRAN (R 4.5.0) #>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.5.0) #>  cli                    3.6.5      2025-04-23 [2] CRAN (R 4.5.0) #>  codetools              0.2-20     2024-03-31 [4] CRAN (R 4.5.1) #>  cowplot                1.2.0      2025-07-07 [2] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [2] CRAN (R 4.5.0) #>  curl                   6.4.0      2025-06-22 [2] CRAN (R 4.5.1) #>  data.table             1.17.8     2025-07-10 [2] CRAN (R 4.5.1) #>  DelayedArray           0.34.1     2025-04-17 [2] Bioconduc~ #>  devtools             * 2.4.5      2022-10-11 [3] CRAN (R 4.5.0) #>  digest                 0.6.37     2024-08-19 [2] CRAN (R 4.5.0) #>  doParallel             1.0.17     2022-02-07 [2] CRAN (R 4.5.0) #>  doRNG                  1.8.6.2    2025-04-02 [2] CRAN (R 4.5.0) #>  dplyr                  1.1.4      2023-11-17 [2] CRAN (R 4.5.0) #>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.5.0) #>  evaluate               1.0.4      2025-06-18 [2] CRAN (R 4.5.1) #>  farver                 2.1.2      2024-05-13 [2] CRAN (R 4.5.0) #>  fastmap                1.2.0      2024-05-15 [2] CRAN (R 4.5.0) #>  flock                  0.7        2016-11-12 [2] CRAN (R 4.5.1) #>  foreach                1.5.2      2022-02-02 [2] CRAN (R 4.5.0) #>  Formula                1.2-5      2023-02-24 [2] CRAN (R 4.5.0) #>  fs                     1.6.6      2025-04-12 [2] CRAN (R 4.5.0) #>  gdsfmt                 1.44.1     2025-07-09 [2] Bioconduc~ #>  generics               0.1.4      2025-05-09 [2] CRAN (R 4.5.0) #>  GenomeInfoDb           1.44.1     2025-07-23 [2] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-04-21 [2] Bioconductor #>  GenomicAlignments      1.44.0     2025-04-15 [2] Bioconduc~ #>  GenomicRanges          1.60.0     2025-04-15 [2] Bioconduc~ #>  ggplot2                3.5.2      2025-04-09 [2] CRAN (R 4.5.0) #>  ggpubr                 0.6.1      2025-06-27 [2] CRAN (R 4.5.1) #>  ggrepel                0.9.6      2024-09-07 [2] CRAN (R 4.5.1) #>  ggsignif               0.6.4      2022-10-13 [2] CRAN (R 4.5.0) #>  glue                   1.8.0      2024-09-30 [2] CRAN (R 4.5.0) #>  gridExtra              2.3        2017-09-09 [2] CRAN (R 4.5.0) #>  gtable                 0.3.6      2024-10-25 [2] CRAN (R 4.5.0) #>  GXwasR               * 0.99.0     2025-08-08 [1] Bioconductor #>  hms                    1.1.3      2023-03-21 [2] CRAN (R 4.5.0) #>  htmltools              0.5.8.1    2024-04-04 [2] CRAN (R 4.5.0) #>  htmlwidgets            1.6.4      2023-12-06 [2] CRAN (R 4.5.0) #>  httpuv                 1.6.16     2025-04-16 [2] CRAN (R 4.5.1) #>  httr                   1.4.7      2023-08-15 [2] CRAN (R 4.5.0) #>  IRanges                2.42.0     2025-04-15 [2] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [2] CRAN (R 4.5.0) #>  jsonlite               2.0.0      2025-03-27 [2] CRAN (R 4.5.0) #>  knitr                  1.50       2025-03-16 [2] CRAN (R 4.5.0) #>  labeling               0.4.3      2023-08-29 [2] CRAN (R 4.5.0) #>  later                  1.4.2      2025-04-08 [2] CRAN (R 4.5.1) #>  lattice                0.22-7     2025-04-02 [4] CRAN (R 4.5.1) #>  lifecycle              1.0.4      2023-11-07 [2] CRAN (R 4.5.0) #>  lubridate              1.9.4      2024-12-08 [2] CRAN (R 4.5.1) #>  magrittr               2.0.3      2022-03-30 [2] CRAN (R 4.5.0) #>  MASS                   7.3-65     2025-02-28 [4] CRAN (R 4.5.1) #>  mathjaxr               1.8-0      2025-04-30 [2] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [4] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [2] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [2] CRAN (R 4.5.0) #>  memoise                2.0.1      2021-11-26 [2] CRAN (R 4.5.0) #>  mime                   0.13       2025-03-17 [2] CRAN (R 4.5.0) #>  miniUI                 0.1.2      2025-04-17 [3] CRAN (R 4.5.0) #>  pillar                 1.11.0     2025-07-04 [2] CRAN (R 4.5.1) #>  pkgbuild               1.4.8      2025-05-26 [2] CRAN (R 4.5.0) #>  pkgconfig              2.0.3      2019-09-22 [2] CRAN (R 4.5.0) #>  pkgdev                 0.1.0.9060 2025-08-04 [2] Github (dieghernan/pkgdev@e56f2a8) #>  pkgload                1.4.0      2024-06-28 [2] CRAN (R 4.5.0) #>  plyr                   1.8.9      2023-10-02 [2] CRAN (R 4.5.1) #>  plyranges              1.28.0     2025-04-15 [2] Bioconduc~ #>  poolr                  1.2-0      2025-05-07 [2] CRAN (R 4.5.0) #>  prettyunits            1.2.0      2023-09-24 [2] CRAN (R 4.5.0) #>  processx               3.8.6      2025-02-21 [2] CRAN (R 4.5.1) #>  profvis                0.4.0      2024-09-20 [3] CRAN (R 4.5.0) #>  progress               1.2.3      2023-12-06 [2] CRAN (R 4.5.0) #>  promises               1.3.3      2025-05-29 [2] CRAN (R 4.5.0) #>  ps                     1.9.1      2025-04-12 [2] CRAN (R 4.5.1) #>  purrr                  1.1.0      2025-07-10 [2] CRAN (R 4.5.1) #>  qqman                  0.1.9      2023-08-23 [2] CRAN (R 4.5.0) #>  R.methodsS3            1.8.2      2022-06-13 [2] CRAN (R 4.5.0) #>  R.oo                   1.27.1     2025-05-02 [2] CRAN (R 4.5.0) #>  R.utils                2.13.0     2025-02-24 [2] CRAN (R 4.5.0) #>  R6                     2.6.1      2025-02-15 [2] CRAN (R 4.5.0) #>  rbibutils              2.3        2024-10-04 [2] CRAN (R 4.5.1) #>  RColorBrewer           1.1-3      2022-04-03 [2] CRAN (R 4.5.0) #>  Rcpp                   1.1.0      2025-07-02 [2] CRAN (R 4.5.1) #>  RCurl                  1.98-1.17  2025-03-22 [2] CRAN (R 4.5.0) #>  Rdpack                 2.6.4      2025-04-09 [2] CRAN (R 4.5.0) #>  RefManageR           * 1.4.0      2022-09-30 [2] CRAN (R 4.5.1) #>  regioneR               1.40.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  remotes                2.5.0      2024-03-17 [2] CRAN (R 4.5.0) #>  restfulr               0.0.16     2025-06-27 [2] CRAN (R 4.5.1) #>  rjson                  0.2.23     2024-09-16 [2] CRAN (R 4.5.0) #>  rlang                  1.1.6      2025-04-11 [2] CRAN (R 4.5.0) #>  rmarkdown              2.29       2024-11-04 [2] CRAN (R 4.5.0) #>  rmio                   0.4.0      2022-02-17 [2] CRAN (R 4.5.0) #>  rngtools               1.5.2      2021-09-20 [2] CRAN (R 4.5.0) #>  rprojroot              2.1.0      2025-07-12 [2] CRAN (R 4.5.1) #>  Rsamtools              2.24.0     2025-04-15 [2] Bioconduc~ #>  rstatix                0.7.2      2023-02-01 [2] CRAN (R 4.5.0) #>  rtracklayer            1.68.0     2025-04-15 [2] Bioconduc~ #>  S4Arrays               1.8.1      2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  S4Vectors              0.46.0     2025-04-15 [2] Bioconduc~ #>  scales                 1.4.0      2025-04-24 [2] CRAN (R 4.5.0) #>  sessioninfo          * 1.2.3      2025-02-05 [2] CRAN (R 4.5.1) #>  shiny                  1.11.1     2025-07-03 [2] CRAN (R 4.5.1) #>  SNPRelate              1.42.0     2025-04-15 [2] Bioconduc~ #>  SparseArray            1.8.1      2025-07-23 [2] Bioconduc~ #>  stringi                1.8.7      2025-03-27 [2] CRAN (R 4.5.0) #>  stringr                1.5.1      2023-11-14 [2] CRAN (R 4.5.0) #>  sumFREGAT              1.2.5      2022-06-07 [2] CRAN (R 4.5.1) #>  SummarizedExperiment   1.38.1     2025-04-30 [2] Bioconductor 3.21 (R 4.5.0) #>  sys                    3.4.3      2024-10-04 [2] CRAN (R 4.5.0) #>  testthat             * 3.2.3      2025-01-13 [2] CRAN (R 4.5.1) #>  tibble                 3.3.0      2025-06-08 [2] CRAN (R 4.5.0) #>  tidyr                  1.3.1      2024-01-24 [2] CRAN (R 4.5.1) #>  tidyselect             1.2.1      2024-03-11 [2] CRAN (R 4.5.0) #>  timechange             0.3.0      2024-01-18 [2] CRAN (R 4.5.1) #>  tzdb                   0.5.0      2025-03-15 [2] CRAN (R 4.5.1) #>  UCSC.utils             1.4.0      2025-04-15 [2] Bioconduc~ #>  urlchecker             1.0.1      2021-11-30 [3] CRAN (R 4.5.0) #>  usethis              * 3.1.0      2024-11-26 [2] CRAN (R 4.5.0) #>  vctrs                  0.6.5      2023-12-01 [2] CRAN (R 4.5.0) #>  vroom                  1.6.5      2023-12-05 [2] CRAN (R 4.5.1) #>  withr                  3.0.2      2024-10-28 [2] CRAN (R 4.5.0) #>  xfun                   0.52       2025-04-02 [2] CRAN (R 4.5.0) #>  XML                    3.99-0.18  2025-01-01 [2] CRAN (R 4.5.0) #>  xml2                   1.3.8      2025-03-14 [2] CRAN (R 4.5.1) #>  xtable                 1.8-4      2019-04-21 [2] CRAN (R 4.5.0) #>  XVector                0.48.0     2025-04-15 [2] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [2] CRAN (R 4.5.0) #>  #>  [1] /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f #>  [2] /Users/mayerdav/Library/R/arm64/4.5/library #>  [3] /opt/homebrew/lib/R/4.5/site-library #>  [4] /opt/homebrew/Cellar/r/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/decoding_ancestry.html","id":"bibliography","dir":"Articles","previous_headings":"Reproducibility","what":"Bibliography","title":"Decoding Ancestry: A Guide to Using GXwasR for Genetic Ancestry Estimation","text":"vignette generated using BiocStyle (Oleś, 2025) knitr (Xie, 2025) rmarkdown (Allaire, Xie, Dervieux et al., 2024) running behind scenes. Citations made RefManageR (McLean, 2017). [1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.29. 2024. URL: https://github.com/rstudio/rmarkdown. [2] B. Bose, F. Blostein, J. Kim, et al. “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits”. : medRxiv 2025.06.10.25329327 (2025). DOI: 10.1101/2025.06.10.25329327. [3] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [4] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.36.0. 2025. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [5] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2025. URL: https://www.R-project.org/. [6] H. Wickham. “testthat: Get Started Testing”. : R Journal 3 (2011), pp. 5–10. URL: https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. [7] H. Wickham, W. Chang, R. Flight, et al. sessioninfo: R Session Information. R package version 1.2.3. 2025. DOI: 10.32614/CRAN.package.sessioninfo. URL: https://CRAN.R-project.org/package=sessioninfo. [8] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.50. 2025. URL: https://yihui.org/knitr/.","code":""},{"path":"/articles/genetic_correlation_sumstat.html","id":"gxwasr-function-sumstatgencorr","dir":"Articles","previous_headings":"","what":"GXwasR function SumstatGenCorr()","title":"Genetic Correlation using GWAS Summary Statistics","text":"SumstatGenCorr: Genetic Correlation Calculation GWAS Summary Statistics function calculates genetic correlation two summary statistics using specified reference LD matrix UK Biobank Hapmap2 following Ning Z, Pawitan Y, Shen X (2020). High-definition likelihood inference genetic correlations across human complex traits, Nature Genetics. function utilizes precomputed eigenvalues eigenvectors LD correlation matrices European ancestry population. LD matrices eigen-decomposition three different sets: 1) UKB_imputed_hapmap2_SVD_eigen99_extraction: 769,306 QCed UK Biobank imputed HapMap2 SNPs: one GWAS includes HapMap 2 SNPs, many SNPs (1%) HapMap 3 reference panel absent, HapMap2 panel proper used computing genetic correlation. size 18 GB unzipping 2) UKB_imputed_SVD_eigen99_extraction: 1,029,876 QCed UK Biobank imputed SNPs. size 31 GB unzipping. Although takes time, using imputed panel provides accurate estimates genetic correlations. reference panels imputed SNPs based genotypes UK Biobank, imputed HRC UK10K + 1000 Genomes. Therefore GWAS includes HapMap3 SNPs, recommend using imputed reference panel. 3) UKB_array_SVD_eigen90_extraction: 307,519 QCed UK Biobank Axiom Array SNPs. size 7.5 GB unzipping.","code":"library(GXwasR) help(SumstatGenCorr)"},{"path":"/articles/genetic_correlation_sumstat.html","id":"example-ukb-imputed-hapmap2-data-neale-lab","dir":"Articles","previous_headings":"","what":"Example: UKB Imputed HapMap2 Data (Neale Lab)","title":"Genetic Correlation using GWAS Summary Statistics","text":"Birth weight type 2 diabetes based summary statistics around 20,000 individuals.","code":"ResultDir <- tempdir() sumstat1 <- readRDS(\"gwas1.imputed.example.rds\") sumstat2 <- readRDS(\"gwas2.imputed.example.rds\") referenceLD = \"UKB_imputed_hapmap2_SVD_eigen99_extraction\" res <- SumstatGenCorr(ResultDir=ResultDir, referenceLD =referenceLD, sumstat1=sumstat1, sumstat2=sumstat2) #> Analysis starts on Fri Aug  8 09:29:59 2025 #> ℹ 0 SNPs were removed in GWAS 1 due to missing N or missing test statistic. #> ℹ 0 SNPs were removed in GWAS 2 due to missing N or missing test statistic. #> ℹ 769306 out of 769306 (100%) SNPs in reference panel are available in GWAS 1. #> ℹ 769306 out of 769306 (100%) SNPs in reference panel are available in GWAS 2. #>  ■                                  2% (1/62) #>  ■■                                 3% (2/62) #>  ■■                                 5% (3/62) #>  ■■■                                6% (4/62) #>  ■■■                                8% (5/62) #>  ■■■■                              10% (6/62) #>  ■■■■                              11% (7/62) #>  ■■■■■                             13% (8/62) #>  ■■■■■                             15% (9/62) #>  ■■■■■■                            16% (10/62) #>  ■■■■■■                            18% (11/62) #>  ■■■■■■■                           19% (12/62) #>  ■■■■■■■                           21% (13/62) #>  ■■■■■■■■                          23% (14/62) #>  ■■■■■■■■                          24% (15/62) #>  ■■■■■■■■■                         26% (16/62) #>  ■■■■■■■■■                         27% (17/62) #>  ■■■■■■■■■■                        29% (18/62) #>  ■■■■■■■■■■                        31% (19/62) #>  ■■■■■■■■■■■                       32% (20/62) #>  ■■■■■■■■■■■                       34% (21/62) #>  ■■■■■■■■■■■■                      35% (22/62) #>  ■■■■■■■■■■■■                      37% (23/62) #>  ■■■■■■■■■■■■■                     39% (24/62) #>  ■■■■■■■■■■■■■                     40% (25/62) #>  ■■■■■■■■■■■■■■                    42% (26/62) #>  ■■■■■■■■■■■■■■                    44% (27/62) #>  ■■■■■■■■■■■■■■■                   45% (28/62) #>  ■■■■■■■■■■■■■■■                   47% (29/62) #>  ■■■■■■■■■■■■■■■■                  48% (30/62) #>  ■■■■■■■■■■■■■■■■                  50% (31/62) #>  ■■■■■■■■■■■■■■■■                  52% (32/62) #>  ■■■■■■■■■■■■■■■■■                 53% (33/62) #>  ■■■■■■■■■■■■■■■■■                 55% (34/62) #>  ■■■■■■■■■■■■■■■■■■                56% (35/62) #>  ■■■■■■■■■■■■■■■■■■                58% (36/62) #>  ■■■■■■■■■■■■■■■■■■■               60% (37/62) #>  ■■■■■■■■■■■■■■■■■■■               61% (38/62) #>  ■■■■■■■■■■■■■■■■■■■■              63% (39/62) #>  ■■■■■■■■■■■■■■■■■■■■              65% (40/62) #>  ■■■■■■■■■■■■■■■■■■■■■             66% (41/62) #>  ■■■■■■■■■■■■■■■■■■■■■             68% (42/62) #>  ■■■■■■■■■■■■■■■■■■■■■■            69% (43/62) #>  ■■■■■■■■■■■■■■■■■■■■■■            71% (44/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■           73% (45/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■           74% (46/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■          76% (47/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■          77% (48/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■         79% (49/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■         81% (50/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■        82% (51/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■        84% (52/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■       85% (53/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% (54/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      89% (55/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      90% (56/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     92% (57/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     94% (58/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    95% (59/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    97% (60/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■   98% (61/62) #>                                                #>  #>  #>  #> Integrating piecewise results #> Point estimates: #> • Heritability of phenotype 1:  0.1008 #> • Heritability of phenotype 2:  0.0066 #> • Genetic Covariance:  -0.006 #> • Genetic Correlation:  -0.2318 #> ℹ Continuing computing standard error with jackknife #>  ■                                  2% (1/62) #>  ■■                                 3% (2/62) #>  ■■                                 5% (3/62) #>  ■■■                                6% (4/62) #>  ■■■                                8% (5/62) #>  ■■■■                              10% (6/62) #>  ■■■■                              11% (7/62) #>  ■■■■■                             13% (8/62) #>  ■■■■■                             15% (9/62) #>  ■■■■■■                            16% (10/62) #>  ■■■■■■                            18% (11/62) #>  ■■■■■■■                           19% (12/62) #>  ■■■■■■■                           21% (13/62) #>  ■■■■■■■■                          23% (14/62) #>  ■■■■■■■■                          24% (15/62) #>  ■■■■■■■■■                         26% (16/62) #>  ■■■■■■■■■                         27% (17/62) #>  ■■■■■■■■■■                        29% (18/62) #>  ■■■■■■■■■■                        31% (19/62) #>  ■■■■■■■■■■■                       32% (20/62) #>  ■■■■■■■■■■■                       34% (21/62) #>  ■■■■■■■■■■■■                      35% (22/62) #>  ■■■■■■■■■■■■                      37% (23/62) #>  ■■■■■■■■■■■■■                     39% (24/62) #>  ■■■■■■■■■■■■■                     40% (25/62) #>  ■■■■■■■■■■■■■■                    42% (26/62) #>  ■■■■■■■■■■■■■■                    44% (27/62) #>  ■■■■■■■■■■■■■■■                   45% (28/62) #>  ■■■■■■■■■■■■■■■                   47% (29/62) #>  ■■■■■■■■■■■■■■■■                  48% (30/62) #>  ■■■■■■■■■■■■■■■■                  50% (31/62) #>  ■■■■■■■■■■■■■■■■                  52% (32/62) #>  ■■■■■■■■■■■■■■■■■                 53% (33/62) #>  ■■■■■■■■■■■■■■■■■                 55% (34/62) #>  ■■■■■■■■■■■■■■■■■■                56% (35/62) #>  ■■■■■■■■■■■■■■■■■■                58% (36/62) #>  ■■■■■■■■■■■■■■■■■■■               60% (37/62) #>  ■■■■■■■■■■■■■■■■■■■               61% (38/62) #>  ■■■■■■■■■■■■■■■■■■■■              63% (39/62) #>  ■■■■■■■■■■■■■■■■■■■■              65% (40/62) #>  ■■■■■■■■■■■■■■■■■■■■■             66% (41/62) #>  ■■■■■■■■■■■■■■■■■■■■■             68% (42/62) #>  ■■■■■■■■■■■■■■■■■■■■■■            69% (43/62) #>  ■■■■■■■■■■■■■■■■■■■■■■            71% (44/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■           73% (45/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■           74% (46/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■          76% (47/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■          77% (48/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■         79% (49/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■         81% (50/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■        82% (51/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■        84% (52/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■       85% (53/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■       87% (54/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      89% (55/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      90% (56/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     92% (57/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     94% (58/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    95% (59/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    97% (60/62) #>  ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■   98% (61/62) #>                                                #>  #>  #>  #> • Heritability of phenotype 1: 0.1008 ( 0.0046 ) #> • Heritability of phenotype 2: 0.0066 ( 8e-04 ) #> • Genetic Covariance: -0.006 ( 0.0011 ) #> • Genetic Correlation: -0.2318 ( 0.0428 ) #> • P: 6.19e-08 #>  #>  #>  #> Analysis finished at Fri Aug  8 09:32:03 2025"},{"path":"/articles/genetic_correlation_sumstat.html","id":"example-hdl-sample-data-20k-snps-ukb-array-svd-eigen90","dir":"Articles","previous_headings":"","what":"Example: HDL Sample Data (20K SNPs, UKB Array SVD Eigen90)","title":"Genetic Correlation using GWAS Summary Statistics","text":"Small number SNPs anyways good. Note: Singularities ill-conditioned matrices can occur due collinear SNPs, insufficient variation, extremely small values, causing numerical instability non-convergence.","code":"gwas1.example <- readRDS('gwas1.array.example.rds') gwas2.example <- readRDS('gwas2.array.example.rds') referenceLD = \"UKB_array_SVD_eigen90_extraction\" res <- SumstatGenCorr(ResultDir=ResultDir, referenceLD =referenceLD, sumstat1=gwas1.example, sumstat2=gwas2.example) #> Analysis starts on Fri Aug  8 09:32:03 2025 #> Error in estimating Genetic Correlation: attempt to set an attribute on NULL"},{"path":"/articles/genetic_correlation_sumstat.html","id":"hdl-decoded","dir":"Articles","previous_headings":"Example: HDL Sample Data (20K SNPs, UKB Array SVD Eigen90)","what":"HDL decoded","title":"Genetic Correlation using GWAS Summary Statistics","text":"Checking provided likelihood functions (llfun llfun.gcov.part.2), ’s possible similar summary statistics (e.g., identical Z-scores) two traits can lead convergence issues algorithm due several reasons: 1. Collinearity Identical Data: summary statistics identical two traits: Collinearity: covariance matrix may become singular nearly singular, can make optimization unstable. Example snippet identical Z-scores may cause collinearity issues Identical Statistics: functions rely variability traits, identical statistics can lead flat undefined likelihood surface, causing numerical instability. Example identical summary stats lead flat likelihood surface 2. Flat Likelihood Surface: data identical, likelihood surface might flat, meaning algorithm difficulty finding unique solution due lack gradients. llfun.gcov.part.2, covariance (h12) may end zero undefined ’s variance data. 3. Optimization Method Sensitivity: numerical optimization (‘optim’) used finding best fit sensitive data quality. Identical data can result values don’t fit assumptions cause overflows likelihood calculations. may results Algorithm failed converge trying different initial values. 4. Variance Estimates: variance estimates (lamh2, lam22.1) sensitive differences summary statistics. Identical data may result variance estimates small large, leading numerical instability log-likelihood calculations.","code":"llfun.gcov.part.2 <- function(param, h11, h22, rho12, M, N1, N2, N0, Nref,                               lam0, lam1, lam2, bstar1, bstar2, lim = exp(-10)){    # Estimating covariance matrices    lam11 = h11[1] / M * lam1^2 - h11[1] * lam1 / Nref + h11[2] * lam1 / N1    lam22 = h22[1] / M * lam2^2 - h22[1] * lam2 / Nref + h22[2] * lam2 / N2    lam12 = if (N0 > 0) h12 / M * lam1 * lam2 + N0 / (N1 * N2) * int * lam1 else h12 / M * lam1 * lam2     # High collinearity leads to potential singularity    if (is.singular(matrix(c(lam11, lam12, lam12, lam22), nrow = 2))) {        stop(\"Singular matrix due to collinearity\")    } } llfun <- function(param, N, M, Nref = 1000, lam, bstar, lim = exp(-10)){    h2 = param[1]    int = param[2]    lamh2 = h2 / M * lam^2 - h2 * lam / Nref + int * lam / N     if (all(bstar == bstar[1])) {        stop(\"Identical statistics detected, leading to undefined likelihood surface\")    }     lamh2 = ifelse(lamh2 < lim, lim, lamh2)    ll = sum(log(lamh2)) + sum(bstar^2 / (lamh2))    return(ll) }"},{"path":"/articles/genetic_correlation_sumstat.html","id":"why-ukb-imputed-eigen99-fails-to-converge-while-ukb-array-eigen90-succeeds","dir":"Articles","previous_headings":"Example: HDL Sample Data (20K SNPs, UKB Array SVD Eigen90)","what":"Why UKB Imputed (Eigen99) Fails to Converge While UKB Array (Eigen90) Succeeds","title":"Genetic Correlation using GWAS Summary Statistics","text":"Expected Genetic Correlation: using identical summary statistics, genetic correlation theoretically expected close 1, traits . However, can vary practice due quality data specific nuances LD reference panel. Sensitivity LD Reference Panels: Different LD panels can distinct effects computation, especially cases identical summary statistics: LD Structure: Panels better-defined LD structures (like Axiom array) may produce stable covariance matrices, leading better convergence. Imputation Accuracy: LD panels imputed SNPs (like HRC, 1000 Genomes, HapMap3 panel) may introduce noise, making convergence challenging. Effect Imputation Rare Variants: Imputed panels often larger number SNPs, including rare variants, can introduce noise increase complexity covariance structure. additional noise potential artifacts imputation make difficult algorithm converge, especially working identical summary statistics. Impact Multicollinearity: Identical summary statistics can lead high multicollinearity, may mitigated differently depending LD reference panel. High multicollinearity can destabilize covariance matrix calculations, resulting non-convergence one panel . summary, differences convergence two LD panels computing genetic correlation identical summary statistics highlight importance : LD structure quality Imputation noise inherent properties SNPs panels Axiom array may offer cleaner, stable set SNPs well-defined LD, critical achieving convergence genetic correlation computation","code":""},{"path":"/articles/genetic_correlation_sumstat.html","id":"trying-the-genomicsem-package","dir":"Articles","previous_headings":"Example: HDL Sample Data (20K SNPs, UKB Array SVD Eigen90)","what":"Trying the GenomicSEM Package","title":"Genetic Correlation using GWAS Summary Statistics","text":"763976 769306 (99.31%) SNPs reference panel available GWAS Data1.txt Estimation cell: 1 : 3 cells ongoing … 100% Estimation cell: 2 : 3 cells ongoing … 100% 301051 769306 (39.13%) SNPs reference panel available GWAS Data2.txt Warning: 1% SNPs reference panel missed GWAS. may generate bias estimation. Please make sure using correct reference panel. Estimation cell: 3 : 3 cells ongoing … 100%Warning message: cov2cor(V) : diag(.) 0 NA entries; non-finite result doubtful thought happening DBgap summary statistics hg18, whereas hg19, also hm3 hg19. cov2cor(V) : diag(.) 0 NA entries; non-finite result doubtful Hence, updated SNPs using proper bim file use. realized happening DBgap’s summary statistics imputed. used .Bed file made summary statistics processed via Crossmap update coordinates got lower overlap DBgap reference panel Hapmap3 provided GenomicSem.","code":""},{"path":"/articles/genetic_correlation_sumstat.html","id":"can-ld-pruned-snps-be-used-in-this-computation","dir":"Articles","previous_headings":"Example: HDL Sample Data (20K SNPs, UKB Array SVD Eigen90)","what":"Can LD-Pruned SNPs Be Used in This Computation?","title":"Genetic Correlation using GWAS Summary Statistics","text":"answer . use LD pruned SNPs: 32641 769306 (4.24%) SNPs reference panel available GWAS Data1.txt Warning: 1% SNPs reference panel missed GWAS. may generate bias estimation. Please make sure using correct reference panel.","code":""},{"path":"/articles/genetic_correlation_sumstat.html","id":"what-happened-when-correlating-the-same-dataset-in-genomicsem","dir":"Articles","previous_headings":"Example: HDL Sample Data (20K SNPs, UKB Array SVD Eigen90)","what":"What Happened When Correlating the Same Dataset in GenomicSEM","title":"Genetic Correlation using GWAS Summary Statistics","text":"converge. two summary statistics exactly , covariance equal variance either one statistics. presence value variance 𝐷1 𝐷2 suggest similar traits measurements conditions different outcomes based conditions methods measurement leading negative covariance.","code":""},{"path":"/articles/genetic_correlation_sumstat.html","id":"conclusion","dir":"Articles","previous_headings":"Example: HDL Sample Data (20K SNPs, UKB Array SVD Eigen90)","what":"Conclusion","title":"Genetic Correlation using GWAS Summary Statistics","text":"genetic correlation analysis sensitive number SNPs summary statistics quality LD reference panel. Panscan datasets, result : Heritability phenotype 1: 0.00e+00 (0.00e+00) Heritability phenotype 2: 0.00e+00 (0.00e+00) Genetic Covariance: -0.1536 (0.1436) Genetic Correlation: -Inf (NA) Warning: Heritability one trait estimated 0, may due : Note: True heritability pancreatic cancer 21%. Summary statistics may give estimate. Potential Calculation Issues HDL Package: uses likelihood-based methods can also run numerical difficulties low zero heritability data, possibly leading non-finite results. Relevant Sections HDL Algorithm: Heritability Calculation: heritability trait calculated using linear models (lm()) squared z-scores LD scores. Later, likelihood-based methods (optim()) refine estimates. , small number SNPs significant hits may lead low variation leads towards zero heritability estimate. Genetic Covariance: Genetic covariance traits calculated using linear model (lm()) product z-scores. Genetic Correlation: genetic correlation (rg) derived dividing genetic covariance square root product heritability values: genetic correlation (rgr_g) can calculated shown : rg=h12h11⋅h22 r_g = \\frac{h_{12}}{\\sqrt{h_{11} \\cdot h_{22}}} : - h11h_{11} heritability Trait 1 - h22h_{22} heritability Trait 2 - h12h_{12} genetic covariance two traits Impact Zero Heritability Zero Heritability: heritability one traits zero, implies genetic factors don’t explain variance trait. Mathematical Impact: calculation h11 h22 zero, denominator becomes zero. results division zero, mathematical operations typically yields NaN, Inf, -Inf. Analysis Impact number SNPs overlap reference LD panel quality reference significantly impact genetic correlation computation. best LD panel: Best LD reference panel Panscan seems UKB_array_SVD_eigen90_extraction due accurate heritability estimate. UK Biobank Axiom Array extensive genomic coverage, including common rare variants hapmap 1000 genome. quality SNPs higher Axiom array. Also meant EUR UKB. Number SNPs: SNPs summary statistics generate variation, leading accurate results. LD Reference Panel: choice LD reference panel crucial accurate computation, algorithm sensitive LD information quality overlap GWAS data. factors: 1. Difficulty Detecting Genetic Associations combination small sample size low heritability makes challenging detect genetic associations accurately. Genetic factors may account small portion trait’s variability, overshadowed environmental factors measurement errors. challenge becomes pronounced reliance summary statistics. 2. Larger Sample Sizes Imputed Summary Statistics Required Increasing sample size necessary enhance statistical power, making easier detect even minor genetic influences pancreatic cancer. However, limited sample size current dataset hinders approach, making challenging achieve sufficient power reliable results. 3. Statistical Significance Noise limited sample size, signal--noise ratio data diminished. makes difficult distinguish true genetic effects random fluctuations, leading higher likelihood false positives (type errors) missing true effects (type II errors). instability exacerbated using summary statistics. 4. Polygenic Traits Pancreatic cancer’s genetic basis likely involves many genes small effects, underscoring polygenic nature. dilution effect sizes complicates identification significant genetic variants underpowered datasets. 5. Impact Heritability Estimates small sample size low heritability bias estimates, genetic architecture pancreatic cancer includes non-additive factors like gene-gene gene-environment interactions. 6. Meta-Analyses Collaborative Efforts Given difficulties small sample size low heritability, GWAS pancreatic cancer often require meta-analyses collaborations pool data resources, boosting statistical power reliability.","code":"1) The true heritability is very small;              2) The sample size is too small;              3) Many SNPs in the chosen reference panel misses in the GWAS.              4) There is a severe mismatch between the GWAS population and the population for computing reference panel"},{"path":"/articles/genetic_correlation_sumstat.html","id":"summary","dir":"Articles","previous_headings":"Example: HDL Sample Data (20K SNPs, UKB Array SVD Eigen90)","what":"Summary","title":"Genetic Correlation using GWAS Summary Statistics","text":"summary, genetic correlation analysis highly sensitive number SNPs quality LD reference panel. SNPs summary statistics provide variation yield better results, good overlap reference LD panel enhances quality genetic correlation computations. Also, good sample size required power estimation.","code":""},{"path":"/articles/genetic_correlation_sumstat.html","id":"citing-gxwasr","dir":"Articles","previous_headings":"","what":"Citing GXwasR","title":"Genetic Correlation using GWAS Summary Statistics","text":"hope GXwasR useful research. Please use following information cite package overall approach. Thank !","code":"## Citation info citation(\"GXwasR\") #> To cite package 'GXwasR' in publications use: #>  #>   Bose B, Blostein F, Kim J, Winters J, Actkins KV, Mayer D, Congivaram H, Niarchou M, Edwards DV, Davis #>   LK, Stranger BE (2025). \"GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on #>   Complex Traits.\" _medRxiv 2025.06.10.25329327_. doi:10.1101/2025.06.10.25329327 #>   <https://doi.org/10.1101/2025.06.10.25329327>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on Complex Traits}, #>     author = {Banabithi Bose and Freida Blostein and Jeewoo Kim and Jessica Winters and Ky’Era V. Actkins and David Mayer and Harrsha Congivaram and Maria Niarchou and Digna Velez Edwards and Lea K. Davis and Barbara E. Stranger}, #>     journal = {medRxiv 2025.06.10.25329327}, #>     year = {2025}, #>     doi = {10.1101/2025.06.10.25329327}, #>   }"},{"path":"/articles/genetic_correlation_sumstat.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Genetic Correlation using GWAS Summary Statistics","text":"GXwasR package (Bose, Blostein, Kim et al., 2025) made possible thanks : R (R Core Team, 2025) BiocStyle (Oleś, 2025) knitr (Xie, 2025) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux et al., 2024) sessioninfo (Wickham, Chang, Flight et al., 2025) testthat (Wickham, 2011) package developed using biocthis. R session information.","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       macOS Sequoia 15.6 #>  system   aarch64, darwin24.4.0 #>  ui       unknown #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2025-08-08 #>  pandoc   3.6.3 @ /Applications/Positron.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown) #>  quarto   1.7.33 @ /usr/local/bin/quarto #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [2] CRAN (R 4.5.0) #>  backports              1.5.0      2024-05-23 [2] CRAN (R 4.5.1) #>  bibtex                 0.5.1      2023-01-26 [2] CRAN (R 4.5.0) #>  bigassertr             0.1.7      2025-06-27 [2] CRAN (R 4.5.1) #>  bigparallelr           0.3.2      2021-10-02 [2] CRAN (R 4.5.0) #>  bigsnpr                1.12.18    2024-11-26 [2] CRAN (R 4.5.1) #>  bigsparser             0.7.3      2024-09-06 [2] CRAN (R 4.5.1) #>  bigstatsr              1.6.2      2025-07-29 [2] CRAN (R 4.5.1) #>  Biobase                2.68.0     2025-04-15 [2] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [2] Bioconduc~ #>  BiocIO                 1.18.0     2025-04-15 [2] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [2] CRAN (R 4.5.0) #>  BiocParallel           1.42.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  BiocStyle              2.36.0     2025-04-15 [2] Bioconduc~ #>  Biostrings             2.76.0     2025-04-15 [2] Bioconduc~ #>  bit                    4.6.0      2025-03-06 [2] CRAN (R 4.5.1) #>  bit64                  4.6.0-1    2025-01-16 [2] CRAN (R 4.5.1) #>  bitops                 1.0-9      2024-10-03 [2] CRAN (R 4.5.0) #>  brio                   1.1.5      2024-04-24 [2] CRAN (R 4.5.1) #>  broom                  1.0.9      2025-07-28 [2] CRAN (R 4.5.1) #>  BSgenome               1.76.0     2025-04-15 [2] Bioconduc~ #>  cachem                 1.1.0      2024-05-16 [2] CRAN (R 4.5.0) #>  calibrate              1.7.7      2020-06-19 [2] CRAN (R 4.5.0) #>  callr                  3.7.6      2024-03-25 [2] CRAN (R 4.5.0) #>  car                    3.1-3      2024-09-27 [2] CRAN (R 4.5.0) #>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.5.0) #>  cli                    3.6.5      2025-04-23 [2] CRAN (R 4.5.0) #>  codetools              0.2-20     2024-03-31 [4] CRAN (R 4.5.1) #>  cowplot                1.2.0      2025-07-07 [2] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [2] CRAN (R 4.5.0) #>  curl                   6.4.0      2025-06-22 [2] CRAN (R 4.5.1) #>  data.table             1.17.8     2025-07-10 [2] CRAN (R 4.5.1) #>  DelayedArray           0.34.1     2025-04-17 [2] Bioconduc~ #>  devtools             * 2.4.5      2022-10-11 [3] CRAN (R 4.5.0) #>  digest                 0.6.37     2024-08-19 [2] CRAN (R 4.5.0) #>  doParallel             1.0.17     2022-02-07 [2] CRAN (R 4.5.0) #>  doRNG                  1.8.6.2    2025-04-02 [2] CRAN (R 4.5.0) #>  dplyr                  1.1.4      2023-11-17 [2] CRAN (R 4.5.0) #>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.5.0) #>  evaluate               1.0.4      2025-06-18 [2] CRAN (R 4.5.1) #>  farver                 2.1.2      2024-05-13 [2] CRAN (R 4.5.0) #>  fastmap                1.2.0      2024-05-15 [2] CRAN (R 4.5.0) #>  flock                  0.7        2016-11-12 [2] CRAN (R 4.5.1) #>  foreach                1.5.2      2022-02-02 [2] CRAN (R 4.5.0) #>  Formula                1.2-5      2023-02-24 [2] CRAN (R 4.5.0) #>  fs                     1.6.6      2025-04-12 [2] CRAN (R 4.5.0) #>  gdsfmt                 1.44.1     2025-07-09 [2] Bioconduc~ #>  generics               0.1.4      2025-05-09 [2] CRAN (R 4.5.0) #>  GenomeInfoDb           1.44.1     2025-07-23 [2] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-04-21 [2] Bioconductor #>  GenomicAlignments      1.44.0     2025-04-15 [2] Bioconduc~ #>  GenomicRanges          1.60.0     2025-04-15 [2] Bioconduc~ #>  ggplot2                3.5.2      2025-04-09 [2] CRAN (R 4.5.0) #>  ggpubr                 0.6.1      2025-06-27 [2] CRAN (R 4.5.1) #>  ggrepel                0.9.6      2024-09-07 [2] CRAN (R 4.5.1) #>  ggsignif               0.6.4      2022-10-13 [2] CRAN (R 4.5.0) #>  glue                   1.8.0      2024-09-30 [2] CRAN (R 4.5.0) #>  gridExtra              2.3        2017-09-09 [2] CRAN (R 4.5.0) #>  gtable                 0.3.6      2024-10-25 [2] CRAN (R 4.5.0) #>  GXwasR               * 0.99.0     2025-08-08 [1] Bioconductor #>  hms                    1.1.3      2023-03-21 [2] CRAN (R 4.5.0) #>  htmltools              0.5.8.1    2024-04-04 [2] CRAN (R 4.5.0) #>  htmlwidgets            1.6.4      2023-12-06 [2] CRAN (R 4.5.0) #>  httpuv                 1.6.16     2025-04-16 [2] CRAN (R 4.5.1) #>  httr                   1.4.7      2023-08-15 [2] CRAN (R 4.5.0) #>  IRanges                2.42.0     2025-04-15 [2] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [2] CRAN (R 4.5.0) #>  jsonlite               2.0.0      2025-03-27 [2] CRAN (R 4.5.0) #>  knitr                  1.50       2025-03-16 [2] CRAN (R 4.5.0) #>  labeling               0.4.3      2023-08-29 [2] CRAN (R 4.5.0) #>  later                  1.4.2      2025-04-08 [2] CRAN (R 4.5.1) #>  lattice                0.22-7     2025-04-02 [4] CRAN (R 4.5.1) #>  lifecycle              1.0.4      2023-11-07 [2] CRAN (R 4.5.0) #>  lubridate              1.9.4      2024-12-08 [2] CRAN (R 4.5.1) #>  magrittr               2.0.3      2022-03-30 [2] CRAN (R 4.5.0) #>  MASS                   7.3-65     2025-02-28 [4] CRAN (R 4.5.1) #>  mathjaxr               1.8-0      2025-04-30 [2] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [4] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [2] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [2] CRAN (R 4.5.0) #>  memoise                2.0.1      2021-11-26 [2] CRAN (R 4.5.0) #>  mime                   0.13       2025-03-17 [2] CRAN (R 4.5.0) #>  miniUI                 0.1.2      2025-04-17 [3] CRAN (R 4.5.0) #>  pillar                 1.11.0     2025-07-04 [2] CRAN (R 4.5.1) #>  pkgbuild               1.4.8      2025-05-26 [2] CRAN (R 4.5.0) #>  pkgconfig              2.0.3      2019-09-22 [2] CRAN (R 4.5.0) #>  pkgdev                 0.1.0.9060 2025-08-04 [2] Github (dieghernan/pkgdev@e56f2a8) #>  pkgload                1.4.0      2024-06-28 [2] CRAN (R 4.5.0) #>  plyr                   1.8.9      2023-10-02 [2] CRAN (R 4.5.1) #>  plyranges              1.28.0     2025-04-15 [2] Bioconduc~ #>  poolr                  1.2-0      2025-05-07 [2] CRAN (R 4.5.0) #>  prettyunits            1.2.0      2023-09-24 [2] CRAN (R 4.5.0) #>  processx               3.8.6      2025-02-21 [2] CRAN (R 4.5.1) #>  profvis                0.4.0      2024-09-20 [3] CRAN (R 4.5.0) #>  progress               1.2.3      2023-12-06 [2] CRAN (R 4.5.0) #>  promises               1.3.3      2025-05-29 [2] CRAN (R 4.5.0) #>  ps                     1.9.1      2025-04-12 [2] CRAN (R 4.5.1) #>  purrr                  1.1.0      2025-07-10 [2] CRAN (R 4.5.1) #>  qqman                  0.1.9      2023-08-23 [2] CRAN (R 4.5.0) #>  R.methodsS3            1.8.2      2022-06-13 [2] CRAN (R 4.5.0) #>  R.oo                   1.27.1     2025-05-02 [2] CRAN (R 4.5.0) #>  R.utils                2.13.0     2025-02-24 [2] CRAN (R 4.5.0) #>  R6                     2.6.1      2025-02-15 [2] CRAN (R 4.5.0) #>  rbibutils              2.3        2024-10-04 [2] CRAN (R 4.5.1) #>  RColorBrewer           1.1-3      2022-04-03 [2] CRAN (R 4.5.0) #>  Rcpp                   1.1.0      2025-07-02 [2] CRAN (R 4.5.1) #>  RCurl                  1.98-1.17  2025-03-22 [2] CRAN (R 4.5.0) #>  Rdpack                 2.6.4      2025-04-09 [2] CRAN (R 4.5.0) #>  RefManageR           * 1.4.0      2022-09-30 [2] CRAN (R 4.5.1) #>  regioneR               1.40.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  remotes                2.5.0      2024-03-17 [2] CRAN (R 4.5.0) #>  restfulr               0.0.16     2025-06-27 [2] CRAN (R 4.5.1) #>  rjson                  0.2.23     2024-09-16 [2] CRAN (R 4.5.0) #>  rlang                  1.1.6      2025-04-11 [2] CRAN (R 4.5.0) #>  rmarkdown              2.29       2024-11-04 [2] CRAN (R 4.5.0) #>  rmio                   0.4.0      2022-02-17 [2] CRAN (R 4.5.0) #>  rngtools               1.5.2      2021-09-20 [2] CRAN (R 4.5.0) #>  rprojroot              2.1.0      2025-07-12 [2] CRAN (R 4.5.1) #>  Rsamtools              2.24.0     2025-04-15 [2] Bioconduc~ #>  rstatix                0.7.2      2023-02-01 [2] CRAN (R 4.5.0) #>  rtracklayer            1.68.0     2025-04-15 [2] Bioconduc~ #>  S4Arrays               1.8.1      2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  S4Vectors              0.46.0     2025-04-15 [2] Bioconduc~ #>  scales                 1.4.0      2025-04-24 [2] CRAN (R 4.5.0) #>  sessioninfo          * 1.2.3      2025-02-05 [2] CRAN (R 4.5.1) #>  shiny                  1.11.1     2025-07-03 [2] CRAN (R 4.5.1) #>  SNPRelate              1.42.0     2025-04-15 [2] Bioconduc~ #>  SparseArray            1.8.1      2025-07-23 [2] Bioconduc~ #>  stringi                1.8.7      2025-03-27 [2] CRAN (R 4.5.0) #>  stringr                1.5.1      2023-11-14 [2] CRAN (R 4.5.0) #>  sumFREGAT              1.2.5      2022-06-07 [2] CRAN (R 4.5.1) #>  SummarizedExperiment   1.38.1     2025-04-30 [2] Bioconductor 3.21 (R 4.5.0) #>  sys                    3.4.3      2024-10-04 [2] CRAN (R 4.5.0) #>  testthat             * 3.2.3      2025-01-13 [2] CRAN (R 4.5.1) #>  tibble                 3.3.0      2025-06-08 [2] CRAN (R 4.5.0) #>  tidyr                  1.3.1      2024-01-24 [2] CRAN (R 4.5.1) #>  tidyselect             1.2.1      2024-03-11 [2] CRAN (R 4.5.0) #>  timechange             0.3.0      2024-01-18 [2] CRAN (R 4.5.1) #>  tzdb                   0.5.0      2025-03-15 [2] CRAN (R 4.5.1) #>  UCSC.utils             1.4.0      2025-04-15 [2] Bioconduc~ #>  urlchecker             1.0.1      2021-11-30 [3] CRAN (R 4.5.0) #>  usethis              * 3.1.0      2024-11-26 [2] CRAN (R 4.5.0) #>  vctrs                  0.6.5      2023-12-01 [2] CRAN (R 4.5.0) #>  vroom                  1.6.5      2023-12-05 [2] CRAN (R 4.5.1) #>  withr                  3.0.2      2024-10-28 [2] CRAN (R 4.5.0) #>  xfun                   0.52       2025-04-02 [2] CRAN (R 4.5.0) #>  XML                    3.99-0.18  2025-01-01 [2] CRAN (R 4.5.0) #>  xml2                   1.3.8      2025-03-14 [2] CRAN (R 4.5.1) #>  xtable                 1.8-4      2019-04-21 [2] CRAN (R 4.5.0) #>  XVector                0.48.0     2025-04-15 [2] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [2] CRAN (R 4.5.0) #>  #>  [1] /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f #>  [2] /Users/mayerdav/Library/R/arm64/4.5/library #>  [3] /opt/homebrew/lib/R/4.5/site-library #>  [4] /opt/homebrew/Cellar/r/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/genetic_correlation_sumstat.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"Genetic Correlation using GWAS Summary Statistics","text":"vignette generated using BiocStyle (Oleś, 2025) knitr (Xie, 2025) rmarkdown (Allaire, Xie, Dervieux et al., 2024) running behind scenes. Citations made RefManageR (McLean, 2017). [1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.29. 2024. URL: https://github.com/rstudio/rmarkdown. [2] B. Bose, F. Blostein, J. Kim, et al. “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits”. : medRxiv 2025.06.10.25329327 (2025). DOI: 10.1101/2025.06.10.25329327. [3] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [4] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.36.0. 2025. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [5] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2025. URL: https://www.R-project.org/. [6] H. Wickham. “testthat: Get Started Testing”. : R Journal 3 (2011), pp. 5–10. URL: https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. [7] H. Wickham, W. Chang, R. Flight, et al. sessioninfo: R Session Information. R package version 1.2.3. 2025. DOI: 10.32614/CRAN.package.sessioninfo. URL: https://CRAN.R-project.org/package=sessioninfo. [8] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.50. 2025. URL: https://yihui.org/knitr/.","code":""},{"path":"/articles/gwas_models.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"document contains example running GWAS XWAS model Sex-differential tests. Users must perform pre-imputation post-imputation quality control (QC) genotype dataset proceed tutorial actual scenario. Please follow detailed QC-ed steps provided : GXwasR_Preimputation GXwasR_Postimputation.","code":""},{"path":"/articles/gwas_models.html","id":"example-datasets","dir":"Articles","previous_headings":"","what":"Example Datasets","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"PLINK bed, bim, fam files three mandatory files representing genotype dataset run tutorial. know file extensions, please check https://www.cog-genomics.org/plink/1.9/formats. GXwasR_example: GXwasR_example.bed GXwasR_example.bim GXwasR_example.fam plink files contain genotypes 276 individuals (males females) simulated 1000Genome European decent 26515 variants across twelve chromosomes (1-10,23,24). dataset contains 125 males, 151 females, 108 cases 168 controls. utilize set plink files proxy pre-imputated genotype data.","code":""},{"path":"/articles/gwas_models.html","id":"loading-the-gxwasr-library","dir":"Articles","previous_headings":"","what":"Loading the GXwasR library","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"","code":"## Call some libraries library(GXwasR) library(printr) #> Registered S3 method overwritten by 'printr': #>   method                from      #>   knit_print.data.frame rmarkdown library(rmarkdown)"},{"path":"/articles/gwas_models.html","id":"learn-about-all-the-gxwasr-functions","dir":"Articles","previous_headings":"","what":"Learn about all the GXwasR functions","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"","code":"browseVignettes(\"GXwasR\")"},{"path":"/articles/gwas_models.html","id":"example-dataset-summary","dir":"Articles","previous_headings":"","what":"Example Dataset Summary","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"Dataset: GXwasR_example","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" x <- PlinkSummary(DataDir, ResultDir, finput) #> ℹ Dataset: GXwasR_example #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 12 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #>   - Chr: 24 #> ℹ Total number of SNPs: 26527 #> ℹ Total number of samples: 276"},{"path":[]},{"path":"/articles/gwas_models.html","id":"function-gxwas","dir":"Articles","previous_headings":"Sex-combined and sex-stratified GWAS with XWAS","what":"Function: GXwas()","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"","code":"help(GXwas, package = GXwasR) #> GXwas: Running genome-wide association study (GWAS) and #> X-chromosome-wide association study (XWAS) models. #>  #> Description: #>  #>      This function runs GWAS models in autosomes with several #>      alternative XWAS models. Models such as #>      \"FMcombx01\",\"FMcombx02\",and \"FMstratified\" can be applied to both #>      binary and quantitative traits, while \"GWAcxci\" can only be #>      applied to a binary trait. #>  #>      For binary and quantitative features, this function uses logistic #>      and linear regression, allowing for multiple covariates and the #>      interactions with those covariates in a multiple-regression #>      approach. These models are all run using the additive effects of #>      SNPs, and each additional minor allele's influence is represented #>      by the direction of the regression coefficient. #>  #>      This function attempts to identify the multi-collinearity among #>      predictors by displaying NA for the test statistic and a p-value #>      for all terms in the model. The more terms you add, the more #>      likely you are to run into issues. #>  #>      For details about the different XWAS model, please follow the #>      associated publication. #>  #> Usage: #>  #>      GXwas( #>        DataDir, #>        ResultDir, #>        finput, #>        trait = c(\"binary\", \"quantitative\"), #>        standard_beta = TRUE, #>        xmodel = c(\"FMcombx01\", \"FMcombx02\", \"FMstratified\", \"GWAScxci\"), #>        sex = FALSE, #>        xsex = FALSE, #>        covarfile = NULL, #>        interaction = FALSE, #>        covartest = c(\"ALL\"), #>        Inphenocov = c(\"ALL\"), #>        combtest = c(\"fisher.method\", \"fisher.method.perm\", \"stouffer.method\"), #>        MF.zero.sub = 1e-05, #>        B = 10000, #>        MF.mc.cores = 1, #>        MF.na.rm = FALSE, #>        MF.p.corr = \"none\", #>        plot.jpeg = FALSE, #>        plotname = \"GXwas.plot\", #>        snp_pval = 1e-08, #>        annotateTopSnp = FALSE, #>        suggestiveline = 5, #>        genomewideline = 7.3, #>        ncores = 0 #>      ) #>       #> Arguments: #>  #>  DataDir: Character string for the file path of the input PLINK binary #>           files. #>  #> ResultDir: Character string for the folder path where the outputs will #>           be saved. #>  #>   finput: Character string, specifying the prefix of the input PLINK #>           binary files with both male and female samples. This file #>           needs to be in 'DataDir'. #>  #>           Note: Case/control phenotypes are expected to be encoded as #>           1=unaffected (control), 2=affected (case); 0 is accepted as #>           an alternate missing value encoding. The missing case/control #>           or quantitative phenotypes are expected to be encoded as #>           'NA'/'nan' (any capitalization) or -9. #>  #>    trait: Boolean value, 'binary' or 'quantitative' for the phenotype #>           i.e. the trait. #>  #> standard_beta: Boolean value, 'TRUE' or 'FALSE' in case of quantitative #>           trait for standardizing the trait or phenotype values (mean #>           0, unit variance), so the resulting coefficients will be #>           standardized. The default is 'TRUE'. #>  #>   xmodel: Models \"FMcombx01\",\"FMcombx02\",and \"FMstratified\" can be #>           chosen for both binary and quantitative traits while #>           \"GWAcxci\" can only apply to the binary trait. These models #>           take care of the X-chromosomal marker. Three female genotypes #>           are coded by 0, 1, and 2 in FM01 and FM02. The two genotypes #>           of males that follow the X-chromosome inactivation (XCI) #>           pattern as random (XCI-R) in the FM01 model are coded by 0 #>           and 1, while the two genotypes that follow the XCI is escaped #>           (XCI-E) in the FM02 model are coded by 0 and 1. To reflect #>           the dose compensation connection between the sexes, FM02 #>           treats men as homozygous females. #>  #>           In the \"FMstratified\" associations are tested separately for #>           males and females, and then the combined p values are #>           computed the Fisher's method, Fisher's method with #>           permutation, or Stouffer's method(1,3-7]. An X-chromosome #>           inactivation (XCI) pattern, or coding technique for #>           X-chromosomal genotypes between sexes, is not required for #>           the XCGA. By simultaneously accounting for four distinct XCI #>           patterns, namely XCI-R, XCI-E, XCI-SN (XCI fully toward #>           normal allele), and XCI-SR (XCI fully toward risk allele), #>           this model may maintain a respectably high power (Su et al. #>           2022). #>  #>           Note: 'sex' shouldn't be provided as a covariate in the XCGA #>           model. #>  #>      sex: Boolean value, 'TRUE' or 'FALSE' for using sex as covariate #>           in association test. It is applicable genome-wide. #>  #>           The default is FALSE. #>  #>     xsex: Boolean value, 'TRUE' or 'FALSE' for using sex as covariate #>           in association test for X-chromosomal SNPs. The default is #>           FALSE. This will overwrite 'sex' argument for X-chromosome. #>  #> covarfile: Character string for the full name of the covariate file in #>           .txt format. This file should be placed in 'DataDir'. #>  #>           Note about the covariate file: The first column of this file #>           should be 'FID', the second column should be 'IID' and the #>           other columns should be covariates. The primary header line #>           should be there starting with “FID”, and “IID” followed by #>           covariate names. If an individual is not present in the #>           covariate file, or if the individual has a missing phenotype #>           value (i.e. -9 by default) for the covariate, then that #>           individual is set to missing (i.e. will be excluded from #>           association analysis). It is important to note that for #>           stratified GWAS model, if PCs are included as covar then it #>           should be generated separately for each cohort and then #>           included in the covarfile. Use the function 'DummyCovar' to #>           generate a new covariate file with categorical variables #>           down-coded as binary dummy variables for the covariate file #>           with categorical variables. For instance, if a variable has K #>           categories, K-1 new dummy variables are constructed, and the #>           original covariate is now estimated with a coefficient for #>           each category. #>  #> interaction: Boolean value, 'TRUE' or 'FALSE' for including SNP x #>           covariate interaction term/terms from the association #>           analysis. The default is 'FALSE'. If a permutation procedure #>           is chosen then the interaction will be automatically 'FALSE'. #>           For the interaction with the two covariates COV1 and COV2, #>           the model will look like: Y = b0 + b1.ADD + b2.COV1 + b3.COV2 #>           + b4.ADD x COV1 + b5.ADD x COV2 + e. When interaction factors #>           are incorporated into the model, the main effects' #>           significance is not always determined simply; rather, it #>           depends on the arbitrary coding of the variables. To put it #>           another way, you should probably just interpret the p-value #>           for the interaction. Also, The p-values for the covariates do #>           not represent the test for the SNP-phenotype association #>           after controlling for the covariate. That is the first row #>           (ADD). Rather, the covariate term is the test associated with #>           the covariate-phenotype association. These p-values might be #>           extremely significant (e.g. if one covaries for smoking in an #>           analysis of heart disease, etc) but this does not mean that #>           the SNP has a highly significant effect necessarily. Note #>           that, this feature is not valid for XCGA model for XWAS part. #>  #> covartest: Vector value with 'NULL',\"ALL\" or covariate name/names to be #>           included in the test. The default is 'NULL.' For instance, #>           the user can choose “AGE” and “SEX” as covartest = c(“AGE”, #>           “SEX”) or all the covariates as covartest = c(“ALL”). #>  #> Inphenocov: Vector of integer values starting from 1 to extract the #>           terms which user wants from the above model: Y = b0 + b1.ADD #>           + b2.COV1 + b3.COV2 + b4.ADDxCOV1 + b5.ADDxCOV2 + e. The #>           terms will appear in order as (Purcell et al. 2007) for ADD, #>           (Su et al. 2022) for COV1, (Rhodes 2002) for ADD x COV1, and #>           (Moreau and others 2003) for ADD x COV2. If the user wants to #>           extract the terms for COV1 and ADD x COV1, they need to #>           specify it as c(2,4). The default is c(“ALL”). #>  #>           Note: This feature is not valid for the XCGA model for the #>           XWAS part. #>  #> combtest: Character vector specifying method for combining p-values #>           after stratified GWAS/XWAS models. Choices are #>           “stouffer.method”, \"fisher.method\" and \"fisher.method.perm\". #>           For fisher.method the function for combining p-values uses a #>           statistic, S = -2 ∑^k /log p, which follows a χ^2 #>           distribution with 2k degrees of freedom (Fisher 1925). #>  #>           For fisher.method.perm, using p-values from stratified tests, #>           the summary statistic for combining p-values is S = -2 ∑ /log #>           p. A p-value for this statistic can be derived by randomly #>           generating summary statistics (Rhodes 2002). Therefore, a #>           p-value is randomly sampled from each contributing study, and #>           a random statistic is calculated. The fraction of random #>           statistics greater or equal to S then gives the final #>           p-value. #>  #>           For stouffer.method ,the function applies Stouffer’s method #>           (Stouffer et al. 1949) to the p-values assuming that the #>           p-values to be combined are independent. Letting p1, p2, . . #>           . , pk denote the individual (one- or two-sided) p-values of #>           the k hypothesis tests to be combined, the test statistic is #>           then computed with $z = ∑^k_{1}frac{z_{i}}{sqrt(k)}$ where #>           $z_{i}$ = Φ−1 (1 – $p_{i}$) and Φ −1 (·) denotes the inverse #>           of the cumulative distribution function of a standard normal #>           distribution. Under the joint null hypothesis, the test #>           statistic follows a standard normal distribution which is #>           used to compute the combined p-value. This functionality is #>           taken from the R package poolr (Cinar and Viechtbauer 2022). #>  #>           Note that only p-values between 0 and 1 are allowed to be #>           passed to these methods. #>  #>           Note: Though this parameter is enabled for both autosome GWAS #>           and XWAS, the combining pvalue after sex-stratified test is #>           recommended to ChrX only. #>  #> MF.zero.sub: Small numeric value for substituting p-values of 0 in in #>           stratified GWAS with FM01comb and FM02comb XWAS models. The #>           default is 0.00001. As log(0) results in Inf this replaces #>           p-values of 0 by default with a small float. #>  #>        B: Integer value specifying the number of permutation in case of #>           using fisher.method.perm method in stratified GWAS with #>           FM01comb and FM02comb XWAS models. The default is 10000. #>  #> MF.mc.cores: Number of cores used for fisher.method.perm in stratified #>           GWAS with FM01comb and FM02comb XWAS models. #>  #> MF.na.rm: Boolean value, 'TRUE' or 'FALSE' for removing p-values of NA #>           in stratified GWAS with FM01comb and FM02comb XWAS in case of #>           using Fisher’s and Stouffer’s methods. The default is FALSE. #>  #> MF.p.corr: Character vector specifying method for correcting the #>           summary p-values for FMfcomb and FMscomb models. Choices are #>           \"bonferroni\", \"BH\" and \"none\" for Bonferroni, #>           Benjamini-Hochberg and none, respectively. The default is #>           \"none\". #>  #> plot.jpeg: Boolean value, 'TRUE' or 'FALSE' for saving the plots in #>           .jpeg file. The default is TRUE. #>  #> plotname: A character string specifying the prefix of the file for #>           plots. This file will be saved in DataDir. The default is #>           \"GXwas.plot\". #>  #> snp_pval: Numeric value as p-value threshold for annotation. SNPs below #>           this p-value will be annotated on the plot. The default is #>           1e-08. #>  #> annotateTopSnp: Boolean value, 'TRUE' or 'FALSE. If TRUE, it only #>           annotates the top hit on each chromosome that is below the #>           snp_pval threshold. The default is FALSE. #>  #> suggestiveline: The default is 5 (for p-value 1e-05). #>  #> genomewideline: The default is 7.3 (for p-value 5e-08). #>  #>   ncores: Integer value, specifying the number of cores for parallel #>           processing. The default is 0 (no parallel computation). #>  #> Value: #>  #>      A dataframe with GWAS (with XWAS for X-chromosomal variants) along #>      with Manhattan and Q-Q plots. In the case of the stratified test, #>      the return is a list containing three dataframes, namely, FWAS, #>      MWAS, and MFWAS with association results in only female, only #>      male, and both cohorts, respectively. This will be accompanied by #>      Miami and Q-Q plots. The individual manhattan and Q-Q-plots for #>      stratified tests prefixed with xmodel type will be in the DataDir. #>  #> Author(s): #>  #>      Banabithi Bose #>  #> References: #>  #>      Cinar O, Viechtbauer W (2022). \"The poolr package for combining #>      independent and dependent p values.\" _Journal of Statistical #>      Software_, *101*(1), 1-42. doi:10.18637/jss.v101.i01 #>      <https://doi.org/10.18637/jss.v101.i01>. #>  #>      Fisher RA (1925). _Statistical Methods for Research Workers_. #>      Oliver and Boyd, Edinburgh. #>  #>      Moreau Y, others (2003). \"Comparison and meta-analysis of #>      microarray data: from the bench to the computer desk.\" _Trends in #>      Genetics_, *19*(10), 570-577. #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #>      Rhodes DR (2002). \"Meta-analysis of microarrays: interstudy #>      validation of gene expression profiles reveals pathway #>      dysregulation in prostate cancer.\" _Cancer Research_, *62*(15), #>      4427-4433. #>  #>      Stouffer SA, Suchman EA, DeVinney LC, Star SA, Williams RM (1949). #>      _The American Soldier: Adjustment During Army Life_, volume 1. #>      Princeton University Press, Princeton, NJ. #>  #>      Su Y, Hu J, Yin P, Jiang H, Chen S, Dai M, Chen Z, Wang P (2022). #>      \"XCMAX4: A Robust X Chromosomal Genetic Association Test #>      Accounting for Covariates.\" _Genes (Basel)_, *13*(5), 847. #>      doi:10.3390/genes13050847 <https://doi.org/10.3390/genes13050847>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/35627231>. #>  #> Examples: #>  #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      finput <- \"GXwasR_example\" #>      standard_beta <- TRUE #>      xsex <- FALSE #>      sex <- TRUE #>      Inphenocov <- NULL #>      covartest <- NULL #>      interaction <- FALSE #>      MF.na.rm <- FALSE #>      B <- 10000 #>      MF.zero.sub <- 0.00001 #>      trait <- \"binary\" #>      xmodel <- \"FMcombx02\" #>      combtest <- \"fisher.method\" #>      snp_pval <- 1e-08 #>      covarfile <- NULL #>      ncores <- 0 #>      MF.mc.cores <- 1 #>      ResultGXwas <- GXwas( #>          DataDir = DataDir, ResultDir = ResultDir, #>          finput = finput, xmodel = xmodel, trait = trait, covarfile = covarfile, #>          sex = sex, xsex = xsex, combtest = combtest, MF.p.corr = \"none\", #>          snp_pval = snp_pval, plot.jpeg = TRUE, suggestiveline = 5, genomewideline = 7.3, #>          MF.mc.cores = 1, ncores = ncores #>      )"},{"path":"/articles/gwas_models.html","id":"running-gxwas","dir":"Articles","previous_headings":"Sex-combined and sex-stratified GWAS with XWAS","what":"Running GXwas","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"Dataframe containing result stratified model Stratified GWAS result male cohort. Stratified GWAS result female cohort. know function GXwas() run different GWAS XWAS models different arguments, please follow tutorial: https://boseb.github.io/GXwasR/articles/GXwasR_overview.html","code":"## Running DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" standard_beta <- TRUE xsex <- FALSE sex <- TRUE Inphenocov <- NULL covartest <- NULL interaction <- FALSE MF.na.rm <- FALSE B <- 10000 MF.zero.sub <- 0.00001 trait <- \"binary\" xmodel <- \"FMstratified\" combtest <- \"fisher.method\" snp_pval <- 1e-08 covarfile <- NULL ncores <- 0 plot.jpeg <- FALSE MF.mc.cores <- 1 genomewideline <- 7.3 suggestiveline <- 5 plotname <- \"GXwas.plot\" annotateTopSnp <- FALSE MF.na.rm <- FALSE B <- 10000 MF.zero.sub <- 0.00001 MF.p.corr <- \"none\" plotname <- \"GXwas.plot\" ResultGXwas <- GXwas(DataDir = DataDir, ResultDir = ResultDir, finput = finput, xmodel = xmodel, trait = trait, covarfile = covarfile, sex = sex, xsex = xsex, combtest = combtest, MF.p.corr = \"none\", snp_pval = snp_pval, plot.jpeg = plot.jpeg, suggestiveline = 5, genomewideline = 7.3, MF.mc.cores = 1, ncores = ncores) #> • Running FMstratified model #> • Stratified test is running for females #> • Stratified test is running for males #> ℹ If you want parallel computation, please provide non-zero value for argument ncores. #> ℹ Plots are initiated. #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/Stratified_GWAS.png #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/Stratified_XWAS.png #> Three data frames have been created and saved: #> • CombinedWAS #> • MaleWAS #> • FemaleWAS #> ℹ You can find them in the directory: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ # Outputs knitr::kable(ResultGXwas$CombinedWAS[1:5, ], caption = \"Dataframe containing the result of stratified model\") knitr::kable(ResultGXwas$MaleWAS[1:5, ], caption = \"Stratified GWAS result with male cohort.\") knitr::kable(ResultGXwas$FemaleWAS[1:5, ], caption = \"Stratified GWAS result with female cohort.\") ## Top ten associations in female-specific study: load(\"FemaleWAS.Rda\") x1 <- FemaleWAS x2 <- x1[x1$TEST == \"ADD\", ] x3 <- x2[order(x2$P), ] x <- x3[1:10, -c(5:6)] ## Top ten associations in male-specific study: load(\"MaleWAS.Rda\") x1 <- MaleWAS x2 <- x1[x1$TEST == \"ADD\", ] x3 <- x2[order(x2$P), ] x <- x3[1:10, -c(5:6)] ## Top ten associations in FM02comb model: load(\"CombinedWAS.Rda\") x1 <- CombinedWAS x2 <- x1[order(x1$P), ] x <- x2[1:10, ]"},{"path":"/articles/gwas_models.html","id":"performing-sex-differential-test","dir":"Articles","previous_headings":"","what":"Performing sex-differential test","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"Now, perform sex-differential test:","code":""},{"path":"/articles/gwas_models.html","id":"function-sexdiff","dir":"Articles","previous_headings":"Performing sex-differential test","what":"Function: SexDiff()","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"","code":"help(SexDiff, package = GXwasR) #> SexDiff: Sex difference in effect size for each SNP using t-test. #>  #> Description: #>  #>      This function uses the GWAS summary statistics from sex-stratified #>      tests like \"FMstratified\", to evaluate the difference in effect #>      size between males and females at each SNP using a t-test. #>  #>      The input dataframes should only include X-chromosome in order to #>      obtain results for sex differences based solely on X-linked loci. #>  #> Usage: #>  #>      SexDiff(Mfile, Ffile) #>       #> Arguments: #>  #>    Mfile: R dataframe of summary statistics of GWAS or XWAS of male #>           samples with six mandatory columns, #>           SNP(Variant),CHR(Chromosome number), BP(Base pair #>           position),A1(Minor allele),BETA_M(Effect size) and #>           SE_M(Standard error). This can be generated by running #>           FM01comb or \"FMstratified\" model with GXWAS function. #>  #>    Ffile: R dataframe of summary statistics of GWAS or XWAS of male #>           samples with six mandatory columns, #>           SNP(Variant),CHR(Chromosome number), BP(Base pair #>           position),A1(Minor allele),BETA_F(Effect size) and #>           SE_F(Standard error). This can be generated by running #>           FM01comb or \"FMstratified\" model with GXWAS function. #>  #> Value: #>  #>      R dataframe with seven columns: #>  #>         • 'SNP' (Variant) #>  #>         • 'CHR' (Chromosome number) #>  #>         • 'BP' (Base pair position) #>  #>         • 'A1' (Minor allele) #>  #>         • 'tstat' (t-statistics for effect-size test) #>  #>         • 'P' (p-value) and #>  #>         • 'adjP' (Bonferroni corrected p-value) #>  #> Author(s): #>  #>      Banabithi Bose #>  #> Examples: #>  #>      data(\"Mfile\", package = \"GXwasR\") #>      data(\"Ffile\", package = \"GXwasR\") #>      Difftest <- SexDiff(Mfile, Ffile) #>      significant_snps <- Difftest[Difftest$adjP < 0.05, ]"},{"path":"/articles/gwas_models.html","id":"running-sexdiff","dir":"Articles","previous_headings":"Performing sex-differential test","what":"Running SexDiff","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"SNPs significant sex-differential effect.","code":"## Running ## Running the function x1 <- MaleWAS x1 <- x1[x1$TEST == \"ADD\", ] x1 <- x1[, c(1:4, 7:8)] colnames(x1) <- c(\"CHR\", \"SNP\", \"BP\", \"A1\", \"BETA_M\", \"SE_M\") x2 <- FemaleWAS x2 <- x2[x2$TEST == \"ADD\", ] x2 <- x2[, c(1:4, 7:8)] colnames(x2) <- c(\"CHR\", \"SNP\", \"BP\", \"A1\", \"BETA_F\", \"SE_F\") Difftest <- SexDiff(Mfile = x1, Ffile = x2) ## Significant SNPs with sex-differential effect sig.snps <- Difftest[Difftest$adjP < 0.05, ] colnames(sig.snps) <- c(\"SNP\", \"CHR\", \"BP\", \"A1\", \"T_statistic\", \"Pvalue\", \"Adjusted_Pvalue\") knitr::kable(sig.snps, caption = \"SNPs with significant sex-differential effect.\")"},{"path":"/articles/gwas_models.html","id":"citing-gxwasr","dir":"Articles","previous_headings":"","what":"Citing GXwasR","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"hope GXwasR useful research. Please use following information cite package overall approach. Thank !","code":"## Citation info citation(\"GXwasR\") #> To cite package 'GXwasR' in publications use: #>  #>   Bose B, Blostein F, Kim J, Winters J, Actkins KV, Mayer D, Congivaram H, Niarchou M, Edwards DV, Davis #>   LK, Stranger BE (2025). \"GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on #>   Complex Traits.\" _medRxiv 2025.06.10.25329327_. doi:10.1101/2025.06.10.25329327 #>   <https://doi.org/10.1101/2025.06.10.25329327>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on Complex Traits}, #>     author = {Banabithi Bose and Freida Blostein and Jeewoo Kim and Jessica Winters and Ky’Era V. Actkins and David Mayer and Harrsha Congivaram and Maria Niarchou and Digna Velez Edwards and Lea K. Davis and Barbara E. Stranger}, #>     journal = {medRxiv 2025.06.10.25329327}, #>     year = {2025}, #>     doi = {10.1101/2025.06.10.25329327}, #>   }"},{"path":"/articles/gwas_models.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"GXwasR package (Bose, Blostein, Kim et al., 2025) made possible thanks : R (R Core Team, 2025) BiocStyle (Oleś, 2025) knitr (Xie, 2025) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux et al., 2024) sessioninfo (Wickham, Chang, Flight et al., 2025) testthat (Wickham, 2011) package developed using biocthis. R session information.","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       macOS Sequoia 15.6 #>  system   aarch64, darwin24.4.0 #>  ui       unknown #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2025-08-08 #>  pandoc   3.6.3 @ /Applications/Positron.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown) #>  quarto   1.7.33 @ /usr/local/bin/quarto #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [2] CRAN (R 4.5.0) #>  backports              1.5.0      2024-05-23 [2] CRAN (R 4.5.1) #>  bibtex                 0.5.1      2023-01-26 [2] CRAN (R 4.5.0) #>  bigassertr             0.1.7      2025-06-27 [2] CRAN (R 4.5.1) #>  bigparallelr           0.3.2      2021-10-02 [2] CRAN (R 4.5.0) #>  bigsnpr                1.12.18    2024-11-26 [2] CRAN (R 4.5.1) #>  bigsparser             0.7.3      2024-09-06 [2] CRAN (R 4.5.1) #>  bigstatsr              1.6.2      2025-07-29 [2] CRAN (R 4.5.1) #>  Biobase                2.68.0     2025-04-15 [2] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [2] Bioconduc~ #>  BiocIO                 1.18.0     2025-04-15 [2] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [2] CRAN (R 4.5.0) #>  BiocParallel           1.42.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  BiocStyle              2.36.0     2025-04-15 [2] Bioconduc~ #>  Biostrings             2.76.0     2025-04-15 [2] Bioconduc~ #>  bit                    4.6.0      2025-03-06 [2] CRAN (R 4.5.1) #>  bit64                  4.6.0-1    2025-01-16 [2] CRAN (R 4.5.1) #>  bitops                 1.0-9      2024-10-03 [2] CRAN (R 4.5.0) #>  brio                   1.1.5      2024-04-24 [2] CRAN (R 4.5.1) #>  broom                  1.0.9      2025-07-28 [2] CRAN (R 4.5.1) #>  BSgenome               1.76.0     2025-04-15 [2] Bioconduc~ #>  cachem                 1.1.0      2024-05-16 [2] CRAN (R 4.5.0) #>  calibrate              1.7.7      2020-06-19 [2] CRAN (R 4.5.0) #>  callr                  3.7.6      2024-03-25 [2] CRAN (R 4.5.0) #>  car                    3.1-3      2024-09-27 [2] CRAN (R 4.5.0) #>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.5.0) #>  cli                    3.6.5      2025-04-23 [2] CRAN (R 4.5.0) #>  codetools              0.2-20     2024-03-31 [4] CRAN (R 4.5.1) #>  cowplot                1.2.0      2025-07-07 [2] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [2] CRAN (R 4.5.0) #>  curl                   6.4.0      2025-06-22 [2] CRAN (R 4.5.1) #>  data.table             1.17.8     2025-07-10 [2] CRAN (R 4.5.1) #>  DelayedArray           0.34.1     2025-04-17 [2] Bioconduc~ #>  devtools             * 2.4.5      2022-10-11 [3] CRAN (R 4.5.0) #>  digest                 0.6.37     2024-08-19 [2] CRAN (R 4.5.0) #>  doParallel             1.0.17     2022-02-07 [2] CRAN (R 4.5.0) #>  doRNG                  1.8.6.2    2025-04-02 [2] CRAN (R 4.5.0) #>  dplyr                  1.1.4      2023-11-17 [2] CRAN (R 4.5.0) #>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.5.0) #>  evaluate               1.0.4      2025-06-18 [2] CRAN (R 4.5.1) #>  farver                 2.1.2      2024-05-13 [2] CRAN (R 4.5.0) #>  fastmap                1.2.0      2024-05-15 [2] CRAN (R 4.5.0) #>  flock                  0.7        2016-11-12 [2] CRAN (R 4.5.1) #>  foreach                1.5.2      2022-02-02 [2] CRAN (R 4.5.0) #>  Formula                1.2-5      2023-02-24 [2] CRAN (R 4.5.0) #>  fs                     1.6.6      2025-04-12 [2] CRAN (R 4.5.0) #>  gdsfmt                 1.44.1     2025-07-09 [2] Bioconduc~ #>  generics               0.1.4      2025-05-09 [2] CRAN (R 4.5.0) #>  GenomeInfoDb           1.44.1     2025-07-23 [2] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-04-21 [2] Bioconductor #>  GenomicAlignments      1.44.0     2025-04-15 [2] Bioconduc~ #>  GenomicRanges          1.60.0     2025-04-15 [2] Bioconduc~ #>  ggplot2                3.5.2      2025-04-09 [2] CRAN (R 4.5.0) #>  ggpubr                 0.6.1      2025-06-27 [2] CRAN (R 4.5.1) #>  ggrepel                0.9.6      2024-09-07 [2] CRAN (R 4.5.1) #>  ggsignif               0.6.4      2022-10-13 [2] CRAN (R 4.5.0) #>  glue                   1.8.0      2024-09-30 [2] CRAN (R 4.5.0) #>  gridExtra              2.3        2017-09-09 [2] CRAN (R 4.5.0) #>  gtable                 0.3.6      2024-10-25 [2] CRAN (R 4.5.0) #>  GXwasR               * 0.99.0     2025-08-08 [1] Bioconductor #>  hms                    1.1.3      2023-03-21 [2] CRAN (R 4.5.0) #>  htmltools              0.5.8.1    2024-04-04 [2] CRAN (R 4.5.0) #>  htmlwidgets            1.6.4      2023-12-06 [2] CRAN (R 4.5.0) #>  httpuv                 1.6.16     2025-04-16 [2] CRAN (R 4.5.1) #>  httr                   1.4.7      2023-08-15 [2] CRAN (R 4.5.0) #>  IRanges                2.42.0     2025-04-15 [2] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [2] CRAN (R 4.5.0) #>  jsonlite               2.0.0      2025-03-27 [2] CRAN (R 4.5.0) #>  knitr                  1.50       2025-03-16 [2] CRAN (R 4.5.0) #>  labeling               0.4.3      2023-08-29 [2] CRAN (R 4.5.0) #>  later                  1.4.2      2025-04-08 [2] CRAN (R 4.5.1) #>  lattice                0.22-7     2025-04-02 [4] CRAN (R 4.5.1) #>  lifecycle              1.0.4      2023-11-07 [2] CRAN (R 4.5.0) #>  lubridate              1.9.4      2024-12-08 [2] CRAN (R 4.5.1) #>  magrittr               2.0.3      2022-03-30 [2] CRAN (R 4.5.0) #>  MASS                   7.3-65     2025-02-28 [4] CRAN (R 4.5.1) #>  mathjaxr               1.8-0      2025-04-30 [2] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [4] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [2] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [2] CRAN (R 4.5.0) #>  memoise                2.0.1      2021-11-26 [2] CRAN (R 4.5.0) #>  mime                   0.13       2025-03-17 [2] CRAN (R 4.5.0) #>  miniUI                 0.1.2      2025-04-17 [3] CRAN (R 4.5.0) #>  pillar                 1.11.0     2025-07-04 [2] CRAN (R 4.5.1) #>  pkgbuild               1.4.8      2025-05-26 [2] CRAN (R 4.5.0) #>  pkgconfig              2.0.3      2019-09-22 [2] CRAN (R 4.5.0) #>  pkgdev                 0.1.0.9060 2025-08-04 [2] Github (dieghernan/pkgdev@e56f2a8) #>  pkgload                1.4.0      2024-06-28 [2] CRAN (R 4.5.0) #>  plyr                   1.8.9      2023-10-02 [2] CRAN (R 4.5.1) #>  plyranges              1.28.0     2025-04-15 [2] Bioconduc~ #>  poolr                  1.2-0      2025-05-07 [2] CRAN (R 4.5.0) #>  prettyunits            1.2.0      2023-09-24 [2] CRAN (R 4.5.0) #>  printr               * 0.3        2023-03-08 [2] CRAN (R 4.5.0) #>  processx               3.8.6      2025-02-21 [2] CRAN (R 4.5.1) #>  profvis                0.4.0      2024-09-20 [3] CRAN (R 4.5.0) #>  progress               1.2.3      2023-12-06 [2] CRAN (R 4.5.0) #>  promises               1.3.3      2025-05-29 [2] CRAN (R 4.5.0) #>  ps                     1.9.1      2025-04-12 [2] CRAN (R 4.5.1) #>  purrr                  1.1.0      2025-07-10 [2] CRAN (R 4.5.1) #>  qqman                  0.1.9      2023-08-23 [2] CRAN (R 4.5.0) #>  R.methodsS3            1.8.2      2022-06-13 [2] CRAN (R 4.5.0) #>  R.oo                   1.27.1     2025-05-02 [2] CRAN (R 4.5.0) #>  R.utils                2.13.0     2025-02-24 [2] CRAN (R 4.5.0) #>  R6                     2.6.1      2025-02-15 [2] CRAN (R 4.5.0) #>  ragg                   1.4.0      2025-04-10 [3] CRAN (R 4.5.0) #>  rbibutils              2.3        2024-10-04 [2] CRAN (R 4.5.1) #>  RColorBrewer           1.1-3      2022-04-03 [2] CRAN (R 4.5.0) #>  Rcpp                   1.1.0      2025-07-02 [2] CRAN (R 4.5.1) #>  RCurl                  1.98-1.17  2025-03-22 [2] CRAN (R 4.5.0) #>  Rdpack                 2.6.4      2025-04-09 [2] CRAN (R 4.5.0) #>  RefManageR           * 1.4.0      2022-09-30 [2] CRAN (R 4.5.1) #>  regioneR               1.40.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  remotes                2.5.0      2024-03-17 [2] CRAN (R 4.5.0) #>  restfulr               0.0.16     2025-06-27 [2] CRAN (R 4.5.1) #>  rjson                  0.2.23     2024-09-16 [2] CRAN (R 4.5.0) #>  rlang                  1.1.6      2025-04-11 [2] CRAN (R 4.5.0) #>  rmarkdown            * 2.29       2024-11-04 [2] CRAN (R 4.5.0) #>  rmio                   0.4.0      2022-02-17 [2] CRAN (R 4.5.0) #>  rngtools               1.5.2      2021-09-20 [2] CRAN (R 4.5.0) #>  rprojroot              2.1.0      2025-07-12 [2] CRAN (R 4.5.1) #>  Rsamtools              2.24.0     2025-04-15 [2] Bioconduc~ #>  rstatix                0.7.2      2023-02-01 [2] CRAN (R 4.5.0) #>  rtracklayer            1.68.0     2025-04-15 [2] Bioconduc~ #>  S4Arrays               1.8.1      2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  S4Vectors              0.46.0     2025-04-15 [2] Bioconduc~ #>  scales                 1.4.0      2025-04-24 [2] CRAN (R 4.5.0) #>  sessioninfo          * 1.2.3      2025-02-05 [2] CRAN (R 4.5.1) #>  shiny                  1.11.1     2025-07-03 [2] CRAN (R 4.5.1) #>  SNPRelate              1.42.0     2025-04-15 [2] Bioconduc~ #>  SparseArray            1.8.1      2025-07-23 [2] Bioconduc~ #>  stringi                1.8.7      2025-03-27 [2] CRAN (R 4.5.0) #>  stringr                1.5.1      2023-11-14 [2] CRAN (R 4.5.0) #>  sumFREGAT              1.2.5      2022-06-07 [2] CRAN (R 4.5.1) #>  SummarizedExperiment   1.38.1     2025-04-30 [2] Bioconductor 3.21 (R 4.5.0) #>  sys                    3.4.3      2024-10-04 [2] CRAN (R 4.5.0) #>  systemfonts            1.2.3      2025-04-30 [2] CRAN (R 4.5.0) #>  testthat             * 3.2.3      2025-01-13 [2] CRAN (R 4.5.1) #>  textshaping            1.0.1      2025-05-01 [3] CRAN (R 4.5.0) #>  tibble                 3.3.0      2025-06-08 [2] CRAN (R 4.5.0) #>  tidyr                  1.3.1      2024-01-24 [2] CRAN (R 4.5.1) #>  tidyselect             1.2.1      2024-03-11 [2] CRAN (R 4.5.0) #>  timechange             0.3.0      2024-01-18 [2] CRAN (R 4.5.1) #>  tzdb                   0.5.0      2025-03-15 [2] CRAN (R 4.5.1) #>  UCSC.utils             1.4.0      2025-04-15 [2] Bioconduc~ #>  urlchecker             1.0.1      2021-11-30 [3] CRAN (R 4.5.0) #>  usethis              * 3.1.0      2024-11-26 [2] CRAN (R 4.5.0) #>  vctrs                  0.6.5      2023-12-01 [2] CRAN (R 4.5.0) #>  vroom                  1.6.5      2023-12-05 [2] CRAN (R 4.5.1) #>  withr                  3.0.2      2024-10-28 [2] CRAN (R 4.5.0) #>  xfun                   0.52       2025-04-02 [2] CRAN (R 4.5.0) #>  XML                    3.99-0.18  2025-01-01 [2] CRAN (R 4.5.0) #>  xml2                   1.3.8      2025-03-14 [2] CRAN (R 4.5.1) #>  xtable                 1.8-4      2019-04-21 [2] CRAN (R 4.5.0) #>  XVector                0.48.0     2025-04-15 [2] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [2] CRAN (R 4.5.0) #>  #>  [1] /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f #>  [2] /Users/mayerdav/Library/R/arm64/4.5/library #>  [3] /opt/homebrew/lib/R/4.5/site-library #>  [4] /opt/homebrew/Cellar/r/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/gwas_models.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"Running GWAS, XWAS and Sex-differential tests Using GXwasR","text":"vignette generated using BiocStyle (Oleś, 2025) knitr (Xie, 2025) rmarkdown (Allaire, Xie, Dervieux et al., 2024) running behind scenes. Citations made RefManageR (McLean, 2017). [1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.29. 2024. URL: https://github.com/rstudio/rmarkdown. [2] B. Bose, F. Blostein, J. Kim, et al. “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits”. : medRxiv 2025.06.10.25329327 (2025). DOI: 10.1101/2025.06.10.25329327. [3] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [4] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.36.0. 2025. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [5] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2025. URL: https://www.R-project.org/. [6] H. Wickham. “testthat: Get Started Testing”. : R Journal 3 (2011), pp. 5–10. URL: https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. [7] H. Wickham, W. Chang, R. Flight, et al. sessioninfo: R Session Information. R package version 1.2.3. 2025. DOI: 10.32614/CRAN.package.sessioninfo. URL: https://CRAN.R-project.org/package=sessioninfo. [8] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.50. 2025. URL: https://yihui.org/knitr/.","code":""},{"path":"/articles/meta_analysis.html","id":"meta-analysis-using-gxwasr","dir":"Articles","previous_headings":"","what":"Meta analysis using GXwasR","title":"GWAS Meta analysis Using GXwasR","text":"present tutorial showing perform meta analysis utilizing R package GXwasR. example data sets performing tutorial can accessed “data” folder package.","code":""},{"path":"/articles/meta_analysis.html","id":"example-datasets","dir":"Articles","previous_headings":"","what":"Example Datasets","title":"GWAS Meta analysis Using GXwasR","text":"Example datasets provided package can accessed calling data() function. Load example datasets perform tutorial. Two sets summary GWAS summary statistics .Rda files required perform tutorial. Summary_Stat_Ex1.Rda Summary_Stat_Ex2.Rda Check one summary statistics data Among 12 columns, columns mandatory tutorial, : ‘SNP’ (.e., SNP identifier), ‘BETA’ (.e., effect-size logarithm odds ratio), ‘SE’ (.e., standard error BETA), ‘P’ (.e., p-values) ‘NMISS’ (.e., effective sample size). columns , ‘CHR’ (.e., chromosome code), ‘BP’ (.e., base pair position), A1 (.e., disease allele), TEST (.e., association test type), L95 (.e., lower limit 95 percentile confidence interval), U95 (.e., upper limit 95 percentile confidence interval) STAT (.e., test statistic). UniqueLoci.Rda: .Rda file single column containing SNP names. LD clumped SNPs list chosen SNPs Meta analysis. SNPsPlot.Rda: .Rda file single column containing SNP names forest plots.","code":"## Load library library(GXwasR) data(Summary_Stat_Ex1) ## Visualize three rows and all the columns Summary_Stat_Ex1[1:3, ] ## Call some other libraries for this vignette library(printr) library(rmarkdown)"},{"path":"/articles/meta_analysis.html","id":"the-function-for-meta-analysis","dir":"Articles","previous_headings":"","what":"The function for meta analysis:","title":"GWAS Meta analysis Using GXwasR","text":"MetaGWAS()","code":"help(MetaGWAS, package = GXwasR) #> MetaGWAS: Combining summary-level results from two or more GWA studies #> into a single estimate. #>  #> Description: #>  #>      This function combine K sets of GWAS association statistics on #>      same (or at least similar) phenotype. This function employs #>      PLINK's (Purcell et al. 2007) inverse variance-based analysis to #>      run a number of models, including a) Fixed-effect model and b) #>      Random-effect model, assuming there may be variation between the #>      genuine underlying effects, i.e., effect size beta. 'This function #>      also calculates weighted Z-score-based p-values after METAL #>      (Willer et al. 2010). For more information about the algorithms, #>      please see the associated paper. #>  #> Usage: #>  #>      MetaGWAS( #>        DataDir, #>        SummData = c(\"\"), #>        ResultDir = tempdir(), #>        SNPfile = NULL, #>        useSNPposition = TRUE, #>        UseA1 = FALSE, #>        GCse = TRUE, #>        plotname = \"Meta_Analysis.plot\", #>        pval_filter = \"R\", #>        top_snp_pval = 1e-08, #>        max_top_snps = 6, #>        chosen_snps_file = NULL, #>        byCHR = FALSE, #>        pval_threshold_manplot = 1e-05 #>      ) #>       #> Arguments: #>  #>  DataDir: A character string for the file path of the input files #>           needed for 'SummData' and 'SNPfile' arguments. #>  #> SummData: Vector value containing the name(s) of the .Rda file(s) with #>           GWAS summary statistics, with ‘SNP’ (i.e., SNP identifier), #>           ‘BETA’ (i.e., effect-size or logarithm of odds ratio), ‘SE’ #>           (i.e., standard error of BETA), ‘P’ (i.e., p-values), 'NMISS' #>           (i.e., effective sample size), 'L95' (i.e., lower limit of #>           95% confidence interval) and 'U95' (i.e., upper limit of 95% #>           confidence interval) are in mandatory column headers. These #>           files needed to be in DataDir. If the numbers of cases and #>           controls are unequal, effective sample size should be 4 / #>           (1/<# of cases> + 1/<# of controls>). A smaller \"effective\" #>           sample size may be used for samples that include related #>           individuals, however simulations indicate that small changes #>           in the effective sample size have relatively little effect on #>           the final p-value (Willer et al. 2010). Columns, such as, #>           'CHR' (Chromosome code), 'BP' (Basepair position), 'A1' #>           (First allele code), 'A2' (Second allele code) columns are #>           optional. If these are present, setting 'useSNPposition' to #>           'FALSE', causes 'CHR', 'BP' and 'A1' to be ignored and #>           setting 'UseA1' to be 'FALSE' causes 'A1' to be ignored. If, #>           both these arguments are 'TRUE', this function takes care of #>           A1/A2 allele flips properly. Otherwise, A1 mismatches are #>           thrown out. Values of CHR/BP are allowed to vary. #>  #> ResultDir: A character string for the file path where all output files #>           will be stored. The default is 'tempdir()'. #>  #>  SNPfile: Character string specifying the name of the plain-text file #>           with a column of SNP names. These could be LD clumped SNPs or #>           any other list of chosen SNPs for Meta analysis. This file #>           needs to be in 'DataDir'. #>  #> useSNPposition: Boolean value, 'TRUE' or 'FALSE' for using 'CHR', 'BP', #>           and 'A1' or not. The default is 'FALSE.' Note: if this is #>           'FALSE' then there will be no Manhattan and QQ plot will be #>           generated. #>  #>    UseA1: Boolean value, 'TRUE' or 'FALSE' for 'A1' to be used or not. #>           The default is 'FALSE'. #>  #>     GCse: Boolean value, 'TRUE' or 'FALSE' for applying study specific #>           genomic control to adjust each study for potential population #>           structure for all the SNPs. The default is 'TRUE'. If users #>           would want to apply genomic control separately for directly #>           genotyped and imputed SNPs prior using the function, set this #>           parameter as 'FALSE'. #>  #> plotname: Character string, specifying the plot name of the file #>           containing forest plots for the SNPs. The default is #>           “Meta_Analysis.plot”. #>  #> pval_filter: Character value as \"R\",\"F\" or \"W\", specifying whether #>           p-value threshold should be chosen based on “Random”, “Fixed” #>           or “Weighted” effect model for the SNPs to be included in the #>           forest plots. #>  #> top_snp_pval: Numeric value, specifying the threshold to be used to #>           filter the SNPs for the forest plots. The default is 1e-08. #>  #> max_top_snps: Integer value, specifying the maximum number of top SNPs #>           (SNPs with the lowest p-values) to be ploted in the forest #>           plot file. The default is 6. #>  #> chosen_snps_file: Character string specifying the name of the #>           plain-text file with a column of SNP names for the forest #>           plots. The default is NULL. #>  #>    byCHR: Boolean value, 'TRUE' or 'FALSE', specifying whether the meta #>           analysis will be performed chromosome wise or not. The #>           default is 'FALSE'. #>  #> pval_threshold_manplot: Numeric value, specifying the p-value threshold #>           for plotting Manhattan plots. #>  #> Value: #>  #>      A list object containing five dataframes. The first three #>      dataframes, such as Mfixed, Mrandom and Mweighted contain results #>      for fixed effect, random effect and weighted model. Each of these #>      dataframes can have maximum 12 columns, such as: #>  #>         • 'CHR' (Chromosome code) #>  #>         • 'BP' (Basepair position) #>  #>         • 'SNP' (SNP identifier) #>  #>         • 'A1' (First allele code) #>  #>         • 'A2' (Second allele code) #>  #>         • 'Q' (p-value for Cochrane's Q statistic) #>  #>         • 'I' (I^2 heterogeneity index (0-100)) #>  #>         • 'P' (P-value from mata analysis) #>  #>         • 'ES' (Effect-size estimate from mata analysis) #>  #>         • 'SE' (Standard Error from mata analysis) #>  #>         • 'CI_L' (Lower limit of confidence interval) #>  #>         • 'CI_U' (Uper limit of confidence interval) #>  #>      The fourth dataframe contains the same columns 'CHR', 'BP', 'SNP', #>      'A1', 'A2', 'Q', 'I'\", with column 'N'' ( Number of valid studies #>      for this SNP), P (Fixed-effects meta-analysis p-value), and other #>      columns as 'Fx...' (Study x (0-based input file indices) effect #>      estimate, Examples: F0, F1 etc.). #>  #>      The fifth dataframe, ProblemSNP has three columns, such as #>  #>         • 'File' (file name of input data), #>  #>         • 'SNP' (Problematic SNPs that are thrown) #>  #>         • 'Problem' (Problem code) #>  #>      Problem codes are: #>  #>         • BAD_CHR (Invalid chromosome code) #>  #>         • BAD_BP (Invalid base-position code), BAD_ES (Invalid #>           effect-size) #>  #>         • BAD_SE (Invalid standard error), MISSING_A1 (Missing allele 1 #>           label) #>  #>         • MISSING_A2 (Missing allele 2 label) #>  #>         • ALLELE_MISMATCH (Mismatching allele codes across files) #>  #>      A .pdf file comprising the forest plots of the SNPs is produced in #>      the ResultDir with Plotname as prefix. If 'useSNPposition' is set #>      'TRUE', a .jpeg file with Manhattan Plot and Q-Q plot will be in #>      the 'ResultDir' with Plotname as prefix. #>  #> References: #>  #>      Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender #>      D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). #>      \"PLINK: A Tool Set for Whole-Genome Association and #>      Population-Based Linkage Analyses.\" _The American Journal of Human #>      Genetics_, *81*(3), 559-575. doi:10.1086/519795 #>      <https://doi.org/10.1086/519795>. #>  #>      Willer CJ, Li Y, Abecasis GR (2010). \"METAL: fast and efficient #>      meta-analysis of genomewide association scans.\" _Bioinformatics_, #>      *26*(17), 2190-2191. doi:10.1093/bioinformatics/btq340 #>      <https://doi.org/10.1093/bioinformatics/btq340>, #>      <http://www.ncbi.nlm.nih.gov/pubmed/20616382>. #>  #> Examples: #>  #>      data(\"Summary_Stat_Ex1\", package = \"GXwasR\") #>      data(\"Summary_Stat_Ex2\", package = \"GXwasR\") #>      DataDir <- GXwasR:::GXwasR_data() #>      ResultDir <- tempdir() #>      SummData <- list(Summary_Stat_Ex1, Summary_Stat_Ex2) #>      SNPfile <- \"UniqueLoci\" #>      useSNPposition <- FALSE #>      UseA1 <- TRUE #>      GCse <- TRUE #>      byCHR <- FALSE #>      pval_filter <- \"R\" #>      top_snp_pval <- 1e-08 #>      max_top_snps <- 10 #>      chosen_snps_file <- NULL #>      pval_threshold_manplot <- 1e-05 #>      plotname <- \"Meta_Analysis.plot\" #>      x <- MetaGWAS( #>          DataDir = DataDir, SummData = SummData, ResultDir = ResultDir, #>          SNPfile = NULL, useSNPposition = TRUE, UseA1 = UseA1, GCse = GCse, #>          plotname = \"Meta_Analysis.plot\", pval_filter, top_snp_pval, max_top_snps, #>          chosen_snps_file = NULL, byCHR, pval_threshold_manplot #>      )"},{"path":"/articles/meta_analysis.html","id":"running-metagwas","dir":"Articles","previous_headings":"","what":"Running MetaGWAS","title":"GWAS Meta analysis Using GXwasR","text":"","code":"data(Summary_Stat_Ex1) data(Summary_Stat_Ex2) DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() SummData <- list(Summary_Stat_Ex1, Summary_Stat_Ex2) SNPfile <- \"UniqueLoci\" useSNPposition <- FALSE UseA1 <- TRUE GCse <- TRUE byCHR <- FALSE pval_filter <- \"R\" top_snp_pval <- 1e-08 max_top_snps <- 10 chosen_snps_file <- NULL pval_threshold_manplot <- 1e-05 plotname <- \"Meta_Analysis.plot\"  x <- MetaGWAS(DataDir = DataDir, SummData = SummData, ResultDir = ResultDir, SNPfile = NULL, useSNPposition = TRUE, UseA1 = UseA1, GCse = GCse, plotname = \"Meta_Analysis.plot\", pval_filter, top_snp_pval, max_top_snps, chosen_snps_file = NULL, byCHR, pval_threshold_manplot) #> ℹ Processing file number 1 #> ℹ Processing file number 2 #> ℹ Applying study-specific genomic control. #> ℹ Applying study-specific genomic control. #> Processing chromosome #> ✔ Forest plot files for Meta_Analysis.plot SNPs have been created. #> ℹ You can find them in the directory: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ #> ✔ Forest plot files for Meta_Analysis.plot SNPs have been created. #> ℹ You can find them in the directory: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ"},{"path":"/articles/meta_analysis.html","id":"random-effect-result","dir":"Articles","previous_headings":"","what":"Random effect result","title":"GWAS Meta analysis Using GXwasR","text":"Top ten associations random effect model.","code":"# Dataframe with the fixed effect result x1 <- x$Resultrandom x2 <- x1[order(x1$P), ] knitr::kable(x2[1:10, ], caption = \"Top ten associations from random effect model.\")"},{"path":"/articles/meta_analysis.html","id":"fixed-effect-result","dir":"Articles","previous_headings":"","what":"Fixed effect result","title":"GWAS Meta analysis Using GXwasR","text":"Top ten associations fixed effect model.","code":"# Dataframe with the fixed effect result x1 <- x$Resultfixed x2 <- x1[order(x1$P), ] knitr::kable(x2[1:10, ], caption = \"Top ten associations from fixed effect model.\")"},{"path":"/articles/meta_analysis.html","id":"weighted-effect-result","dir":"Articles","previous_headings":"","what":"Weighted effect result","title":"GWAS Meta analysis Using GXwasR","text":"Top ten associations weighted effect model.","code":"# Dataframe with the fixed effect result x1 <- x$Resultweighted x2 <- x1[order(x1$P), ] knitr::kable(x2[1:10, ], caption = \"Top ten associations from weighted effect model.\")"},{"path":"/articles/meta_analysis.html","id":"metadata-of-the-meta-analysis","dir":"Articles","previous_headings":"","what":"Metadata of the meta analysis","title":"GWAS Meta analysis Using GXwasR","text":"Metadata top ten associations based Cochrane’s Q statistics.","code":"# Dataframe with the metadata x1 <- x$Metadata x2 <- x1[order(x1$Q), ] knitr::kable(x2[1:10, ], caption = \"Metadata of the top ten associations based on Cochrane’s Q statistics.\")"},{"path":"/articles/meta_analysis.html","id":"problematic-snps","dir":"Articles","previous_headings":"","what":"Problematic SNPs","title":"GWAS Meta analysis Using GXwasR","text":"Top ten problematic SNPs.","code":"# Dataframe with the problematic SNPs x1 <- x$ProblemSNP knitr::kable(x1[1:10, ], caption = \"Top ten problematic SNPs.\")"},{"path":[]},{"path":"/articles/meta_analysis.html","id":"manhattan-plots-and-qq-plots","dir":"Articles","previous_headings":"Including Plots","what":"Manhattan Plots and QQ plots:","title":"GWAS Meta analysis Using GXwasR","text":"plot chunk meta-manhattan_plot","code":""},{"path":"/articles/meta_analysis.html","id":"all-forest-plots","dir":"Articles","previous_headings":"Including Plots","what":"All Forest plots","title":"GWAS Meta analysis Using GXwasR","text":"Now, let’s see Forest plots. plot chunk meta-forest_plot1 plot chunk meta-forest_plot2 plot chunk meta-forest_plot3","code":""},{"path":"/articles/meta_analysis.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"GWAS Meta analysis Using GXwasR","text":"GXwasR package (Bose, Blostein, Kim et al., 2025) made possible thanks : R (R Core Team, 2025) BiocStyle (Oleś, 2025) knitr (Xie, 2025) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux et al., 2024) sessioninfo (Wickham, Chang, Flight et al., 2025) testthat (Wickham, 2011) package developed using biocthis. R session information.","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       macOS Sequoia 15.6 #>  system   aarch64, darwin24.4.0 #>  ui       unknown #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2025-08-08 #>  pandoc   3.6.3 @ /Applications/Positron.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown) #>  quarto   1.7.33 @ /usr/local/bin/quarto #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [2] CRAN (R 4.5.0) #>  backports              1.5.0      2024-05-23 [2] CRAN (R 4.5.1) #>  bibtex                 0.5.1      2023-01-26 [2] CRAN (R 4.5.0) #>  bigassertr             0.1.7      2025-06-27 [2] CRAN (R 4.5.1) #>  bigparallelr           0.3.2      2021-10-02 [2] CRAN (R 4.5.0) #>  bigsnpr                1.12.18    2024-11-26 [2] CRAN (R 4.5.1) #>  bigsparser             0.7.3      2024-09-06 [2] CRAN (R 4.5.1) #>  bigstatsr              1.6.2      2025-07-29 [2] CRAN (R 4.5.1) #>  Biobase                2.68.0     2025-04-15 [2] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [2] Bioconduc~ #>  BiocIO                 1.18.0     2025-04-15 [2] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [2] CRAN (R 4.5.0) #>  BiocParallel           1.42.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  BiocStyle              2.36.0     2025-04-15 [2] Bioconduc~ #>  Biostrings             2.76.0     2025-04-15 [2] Bioconduc~ #>  bit                    4.6.0      2025-03-06 [2] CRAN (R 4.5.1) #>  bit64                  4.6.0-1    2025-01-16 [2] CRAN (R 4.5.1) #>  bitops                 1.0-9      2024-10-03 [2] CRAN (R 4.5.0) #>  brio                   1.1.5      2024-04-24 [2] CRAN (R 4.5.1) #>  broom                  1.0.9      2025-07-28 [2] CRAN (R 4.5.1) #>  BSgenome               1.76.0     2025-04-15 [2] Bioconduc~ #>  cachem                 1.1.0      2024-05-16 [2] CRAN (R 4.5.0) #>  calibrate              1.7.7      2020-06-19 [2] CRAN (R 4.5.0) #>  callr                  3.7.6      2024-03-25 [2] CRAN (R 4.5.0) #>  car                    3.1-3      2024-09-27 [2] CRAN (R 4.5.0) #>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.5.0) #>  cli                    3.6.5      2025-04-23 [2] CRAN (R 4.5.0) #>  codetools              0.2-20     2024-03-31 [4] CRAN (R 4.5.1) #>  cowplot                1.2.0      2025-07-07 [2] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [2] CRAN (R 4.5.0) #>  curl                   6.4.0      2025-06-22 [2] CRAN (R 4.5.1) #>  data.table             1.17.8     2025-07-10 [2] CRAN (R 4.5.1) #>  DelayedArray           0.34.1     2025-04-17 [2] Bioconduc~ #>  devtools             * 2.4.5      2022-10-11 [3] CRAN (R 4.5.0) #>  digest                 0.6.37     2024-08-19 [2] CRAN (R 4.5.0) #>  doParallel             1.0.17     2022-02-07 [2] CRAN (R 4.5.0) #>  doRNG                  1.8.6.2    2025-04-02 [2] CRAN (R 4.5.0) #>  doSNOW                 1.0.20     2022-02-04 [2] CRAN (R 4.5.0) #>  dplyr                  1.1.4      2023-11-17 [2] CRAN (R 4.5.0) #>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.5.0) #>  evaluate               1.0.4      2025-06-18 [2] CRAN (R 4.5.1) #>  farver                 2.1.2      2024-05-13 [2] CRAN (R 4.5.0) #>  fastmap                1.2.0      2024-05-15 [2] CRAN (R 4.5.0) #>  flock                  0.7        2016-11-12 [2] CRAN (R 4.5.1) #>  foreach                1.5.2      2022-02-02 [2] CRAN (R 4.5.0) #>  Formula                1.2-5      2023-02-24 [2] CRAN (R 4.5.0) #>  fs                     1.6.6      2025-04-12 [2] CRAN (R 4.5.0) #>  gdsfmt                 1.44.1     2025-07-09 [2] Bioconduc~ #>  generics               0.1.4      2025-05-09 [2] CRAN (R 4.5.0) #>  GenomeInfoDb           1.44.1     2025-07-23 [2] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-04-21 [2] Bioconductor #>  GenomicAlignments      1.44.0     2025-04-15 [2] Bioconduc~ #>  GenomicRanges          1.60.0     2025-04-15 [2] Bioconduc~ #>  ggplot2                3.5.2      2025-04-09 [2] CRAN (R 4.5.0) #>  ggpubr                 0.6.1      2025-06-27 [2] CRAN (R 4.5.1) #>  ggrepel                0.9.6      2024-09-07 [2] CRAN (R 4.5.1) #>  ggsignif               0.6.4      2022-10-13 [2] CRAN (R 4.5.0) #>  glue                   1.8.0      2024-09-30 [2] CRAN (R 4.5.0) #>  gridExtra              2.3        2017-09-09 [2] CRAN (R 4.5.0) #>  gtable                 0.3.6      2024-10-25 [2] CRAN (R 4.5.0) #>  GXwasR               * 0.99.0     2025-08-08 [1] Bioconductor #>  hms                    1.1.3      2023-03-21 [2] CRAN (R 4.5.0) #>  htmltools              0.5.8.1    2024-04-04 [2] CRAN (R 4.5.0) #>  htmlwidgets            1.6.4      2023-12-06 [2] CRAN (R 4.5.0) #>  httpuv                 1.6.16     2025-04-16 [2] CRAN (R 4.5.1) #>  httr                   1.4.7      2023-08-15 [2] CRAN (R 4.5.0) #>  IRanges                2.42.0     2025-04-15 [2] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [2] CRAN (R 4.5.0) #>  jsonlite               2.0.0      2025-03-27 [2] CRAN (R 4.5.0) #>  knitr                  1.50       2025-03-16 [2] CRAN (R 4.5.0) #>  labeling               0.4.3      2023-08-29 [2] CRAN (R 4.5.0) #>  later                  1.4.2      2025-04-08 [2] CRAN (R 4.5.1) #>  lattice                0.22-7     2025-04-02 [4] CRAN (R 4.5.1) #>  lifecycle              1.0.4      2023-11-07 [2] CRAN (R 4.5.0) #>  lubridate              1.9.4      2024-12-08 [2] CRAN (R 4.5.1) #>  magrittr             * 2.0.3      2022-03-30 [2] CRAN (R 4.5.0) #>  MASS                   7.3-65     2025-02-28 [4] CRAN (R 4.5.1) #>  mathjaxr               1.8-0      2025-04-30 [2] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [4] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [2] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [2] CRAN (R 4.5.0) #>  memoise                2.0.1      2021-11-26 [2] CRAN (R 4.5.0) #>  mgcv                   1.9-3      2025-04-04 [4] CRAN (R 4.5.1) #>  mime                   0.13       2025-03-17 [2] CRAN (R 4.5.0) #>  miniUI                 0.1.2      2025-04-17 [3] CRAN (R 4.5.0) #>  nlme                   3.1-168    2025-03-31 [4] CRAN (R 4.5.1) #>  pillar                 1.11.0     2025-07-04 [2] CRAN (R 4.5.1) #>  pkgbuild               1.4.8      2025-05-26 [2] CRAN (R 4.5.0) #>  pkgconfig              2.0.3      2019-09-22 [2] CRAN (R 4.5.0) #>  pkgdev                 0.1.0.9060 2025-08-04 [2] Github (dieghernan/pkgdev@e56f2a8) #>  pkgload                1.4.0      2024-06-28 [2] CRAN (R 4.5.0) #>  plyr                   1.8.9      2023-10-02 [2] CRAN (R 4.5.1) #>  plyranges              1.28.0     2025-04-15 [2] Bioconduc~ #>  polynom                1.4-1      2022-04-11 [2] CRAN (R 4.5.0) #>  poolr                  1.2-0      2025-05-07 [2] CRAN (R 4.5.0) #>  prettyunits            1.2.0      2023-09-24 [2] CRAN (R 4.5.0) #>  printr               * 0.3        2023-03-08 [2] CRAN (R 4.5.0) #>  processx               3.8.6      2025-02-21 [2] CRAN (R 4.5.1) #>  profvis                0.4.0      2024-09-20 [3] CRAN (R 4.5.0) #>  progress               1.2.3      2023-12-06 [2] CRAN (R 4.5.0) #>  promises               1.3.3      2025-05-29 [2] CRAN (R 4.5.0) #>  ps                     1.9.1      2025-04-12 [2] CRAN (R 4.5.1) #>  purrr                  1.1.0      2025-07-10 [2] CRAN (R 4.5.1) #>  qqman                  0.1.9      2023-08-23 [2] CRAN (R 4.5.0) #>  R.methodsS3            1.8.2      2022-06-13 [2] CRAN (R 4.5.0) #>  R.oo                   1.27.1     2025-05-02 [2] CRAN (R 4.5.0) #>  R.utils                2.13.0     2025-02-24 [2] CRAN (R 4.5.0) #>  R6                     2.6.1      2025-02-15 [2] CRAN (R 4.5.0) #>  ragg                   1.4.0      2025-04-10 [3] CRAN (R 4.5.0) #>  rbibutils              2.3        2024-10-04 [2] CRAN (R 4.5.1) #>  RColorBrewer           1.1-3      2022-04-03 [2] CRAN (R 4.5.0) #>  Rcpp                   1.1.0      2025-07-02 [2] CRAN (R 4.5.1) #>  RCurl                  1.98-1.17  2025-03-22 [2] CRAN (R 4.5.0) #>  Rdpack                 2.6.4      2025-04-09 [2] CRAN (R 4.5.0) #>  RefManageR           * 1.4.0      2022-09-30 [2] CRAN (R 4.5.1) #>  regioneR               1.40.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  remotes                2.5.0      2024-03-17 [2] CRAN (R 4.5.0) #>  restfulr               0.0.16     2025-06-27 [2] CRAN (R 4.5.1) #>  rjson                  0.2.23     2024-09-16 [2] CRAN (R 4.5.0) #>  rlang                  1.1.6      2025-04-11 [2] CRAN (R 4.5.0) #>  rmarkdown            * 2.29       2024-11-04 [2] CRAN (R 4.5.0) #>  rmio                   0.4.0      2022-02-17 [2] CRAN (R 4.5.0) #>  rngtools               1.5.2      2021-09-20 [2] CRAN (R 4.5.0) #>  rprojroot              2.1.0      2025-07-12 [2] CRAN (R 4.5.1) #>  Rsamtools              2.24.0     2025-04-15 [2] Bioconduc~ #>  rstatix                0.7.2      2023-02-01 [2] CRAN (R 4.5.0) #>  rtracklayer            1.68.0     2025-04-15 [2] Bioconduc~ #>  S4Arrays               1.8.1      2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  S4Vectors              0.46.0     2025-04-15 [2] Bioconduc~ #>  scales                 1.4.0      2025-04-24 [2] CRAN (R 4.5.0) #>  seqminer               9.7        2024-10-02 [2] CRAN (R 4.5.1) #>  sessioninfo          * 1.2.3      2025-02-05 [2] CRAN (R 4.5.1) #>  shiny                  1.11.1     2025-07-03 [2] CRAN (R 4.5.1) #>  snow                   0.4-4      2021-10-27 [2] CRAN (R 4.5.0) #>  SNPRelate              1.42.0     2025-04-15 [2] Bioconduc~ #>  SparseArray            1.8.1      2025-07-23 [2] Bioconduc~ #>  stringi                1.8.7      2025-03-27 [2] CRAN (R 4.5.0) #>  stringr                1.5.1      2023-11-14 [2] CRAN (R 4.5.0) #>  sumFREGAT              1.2.5      2022-06-07 [2] CRAN (R 4.5.1) #>  SummarizedExperiment   1.38.1     2025-04-30 [2] Bioconductor 3.21 (R 4.5.0) #>  sys                    3.4.3      2024-10-04 [2] CRAN (R 4.5.0) #>  systemfonts            1.2.3      2025-04-30 [2] CRAN (R 4.5.0) #>  testthat             * 3.2.3      2025-01-13 [2] CRAN (R 4.5.1) #>  textshaping            1.0.1      2025-05-01 [3] CRAN (R 4.5.0) #>  tibble                 3.3.0      2025-06-08 [2] CRAN (R 4.5.0) #>  tidyr                  1.3.1      2024-01-24 [2] CRAN (R 4.5.1) #>  tidyselect             1.2.1      2024-03-11 [2] CRAN (R 4.5.0) #>  timechange             0.3.0      2024-01-18 [2] CRAN (R 4.5.1) #>  tzdb                   0.5.0      2025-03-15 [2] CRAN (R 4.5.1) #>  UCSC.utils             1.4.0      2025-04-15 [2] Bioconduc~ #>  urlchecker             1.0.1      2021-11-30 [3] CRAN (R 4.5.0) #>  usethis              * 3.1.0      2024-11-26 [2] CRAN (R 4.5.0) #>  vctrs                  0.6.5      2023-12-01 [2] CRAN (R 4.5.0) #>  vroom                  1.6.5      2023-12-05 [2] CRAN (R 4.5.1) #>  withr                  3.0.2      2024-10-28 [2] CRAN (R 4.5.0) #>  xfun                   0.52       2025-04-02 [2] CRAN (R 4.5.0) #>  XML                    3.99-0.18  2025-01-01 [2] CRAN (R 4.5.0) #>  xml2                   1.3.8      2025-03-14 [2] CRAN (R 4.5.1) #>  xtable                 1.8-4      2019-04-21 [2] CRAN (R 4.5.0) #>  XVector                0.48.0     2025-04-15 [2] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [2] CRAN (R 4.5.0) #>  #>  [1] /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f #>  [2] /Users/mayerdav/Library/R/arm64/4.5/library #>  [3] /opt/homebrew/lib/R/4.5/site-library #>  [4] /opt/homebrew/Cellar/r/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/meta_analysis.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"GWAS Meta analysis Using GXwasR","text":"vignette generated using BiocStyle (Oleś, 2025) knitr (Xie, 2025) rmarkdown (Allaire, Xie, Dervieux et al., 2024) running behind scenes. Citations made RefManageR (McLean, 2017). [1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.29. 2024. URL: https://github.com/rstudio/rmarkdown. [2] B. Bose, F. Blostein, J. Kim, et al. “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits”. : medRxiv 2025.06.10.25329327 (2025). DOI: 10.1101/2025.06.10.25329327. [3] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [4] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.36.0. 2025. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [5] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2025. URL: https://www.R-project.org/. [6] H. Wickham. “testthat: Get Started Testing”. : R Journal 3 (2011), pp. 5–10. URL: https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. [7] H. Wickham, W. Chang, R. Flight, et al. sessioninfo: R Session Information. R package version 1.2.3. 2025. DOI: 10.32614/CRAN.package.sessioninfo. URL: https://CRAN.R-project.org/package=sessioninfo. [8] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.50. 2025. URL: https://yihui.org/knitr/.","code":""},{"path":"/articles/postimputationQC.html","id":"sex-aware-post-imputation-qc-pipeline","dir":"Articles","previous_headings":"","what":"Sex-aware Post-imputation QC pipeline:","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"run post-imputation QC pipeline vignette utilizing functions GXwasR package.","code":""},{"path":"/articles/postimputationQC.html","id":"example-datasets","dir":"Articles","previous_headings":"Sex-aware Post-imputation QC pipeline:","what":"Example Datasets","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"PLINK bed, bim, fam files three mandatory files representing genotype dataset run pipeline. know file extensions, please check https://www.cog-genomics.org/plink/1.9/formats. GXwasR_example: GXwasR_example.bed GXwasR_example.bim GXwasR_example.fam plink files contain genotypes 276 individuals (males females) simulated 1000Genome European decent 26515 variants across twelve chromosomes (1-10,23,24). dataset contains 125 males, 151 females, 108 cases 168 controls. utilize set plink files proxy pre-imputated genotype data.","code":""},{"path":"/articles/postimputationQC.html","id":"post-imputation-qc-steps","dir":"Articles","previous_headings":"Sex-aware Post-imputation QC pipeline:","what":"Post-imputation QC steps","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"-() Sex-combined QC: 1.Remove SNPs IMPUTE2 info score < 0.6 certainty < 0.8 part done imputation server VCF files. -(B) Sex-specific autosomal QC variant level: 1.Filter PAR, XTR, Ampliconic regions X-chromosome combine autosomes autosomal QC. 2.SNPs controls sex difference MAF carefully examined flagged examination, since differences may due technical confounding sampling biases study cohorts 3.Prepare separate male female subsets genotypes 4.Remove SNPs MAF < 0.05 sex -(C) Sex-specific X-chromosomal QC variant level: 1.Separate PAR, XTR, Ampliconic regions X-chromosome 2.Prepare separate male female subsets genotypes 3.Remove SNPs missingness difference cases vs controls, separately sex 4.sex, filter SNPs based 1% MAF, 10% missingness per individual, 5% missingness per genotype. recommend setting threshold filters males females analyses common variants. 5.Identify set SNPs found post-QC male female datasets create combined dataset SNPs 6.Testing HWE across X females (cases controls combined), later removing regions analysis samples. assuming equal allele frequency males females, HWE chrX can considered females described Khramatsova et. al., 2023. 7.Test significantly different MAF (p < 0.05/#SNPs) sexes control samples binary traits. ChrX variants MAF sex differences controls may biologically meaningful, one consider flagging variants rather removing (Khramatsova et. al., 2023.) -(D) Sex-specific QC sample level: Filter samples : 1.Remove individual missing genotype rate > 0.1 2.Remove individual absolute value heterozygosity F statistic > 0.20 3.Remove pair individuals IBD statistics pihat > 0.2.","code":""},{"path":"/articles/postimputationQC.html","id":"loading-the-gxwasr-library","dir":"Articles","previous_headings":"Sex-aware Post-imputation QC pipeline:","what":"Loading the GXwasR library","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"","code":"## Call some libraries library(GXwasR) library(printr) library(rmarkdown)"},{"path":"/articles/postimputationQC.html","id":"learn-about-all-the-gxwasr-functions","dir":"Articles","previous_headings":"Sex-aware Post-imputation QC pipeline:","what":"Learn about all the GXwasR functions","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"beginning pre-imputation quality control (QC), recommended users familiarize functions GXwasR package. knowledge help understand required input arguments, execute functions, outputs expect. explore available functions, users first load GXwasR library use browseVignettes() function:","code":"library(GXwasR) browseVignettes(\"GXwasR\")"},{"path":"/articles/postimputationQC.html","id":"post-imputation-qc-pipeline","dir":"Articles","previous_headings":"Sex-aware Post-imputation QC pipeline:","what":"Post-imputation QC pipeline","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"use plink binary files DataDir, prefixed “GXwasR_example” input post-imputation QC functions considered SNPs passed IMPUTE2 info score < 0.6 certainty < 0.8.","code":""},{"path":"/articles/postimputationQC.html","id":"example-dataset-summary","dir":"Articles","previous_headings":"","what":"Example Dataset Summary","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"Dataset: GXwasR_example","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" x <- PlinkSummary(DataDir, ResultDir, finput) #> ℹ Dataset: GXwasR_example #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 12 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #>   - Chr: 24 #> ℹ Total number of SNPs: 26527 #> ℹ Total number of samples: 276"},{"path":"/articles/postimputationQC.html","id":"step1-filtering-multi-allelic-variants","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step1: Filtering multi-allelic variants","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"GXwasR work multi-allelic variants Since multi-allelic SNPs, proceed input dataset.","code":"foutput <- \"PostimputeEX_QC\" x <- FilterAllele(DataDir, ResultDir, finput, foutput) #> ℹ There is no multi-allelic SNP present in the input dataset."},{"path":"/articles/postimputationQC.html","id":"step-2-filtering-ambiguous-snps-indels-and-snps-failed-for-hwe","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 2: Filtering Ambiguous SNPs, indels and SNPs failed for HWE","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"use QCsnp() blocking filtering. function implicitly perform filtering based ambiguous SNPs. Copying plink files ResultDir DataDir.","code":"finput <- \"GXwasR_example\" foutput <- \"PostimputeEX_QC1\" geno <- NULL maf <- NULL casecontrol <- FALSE hweCase <- NULL hweCase <- 1e-10 hweControl <- 1e-06 monomorphicSNPs <- FALSE caldiffmiss <- FALSE ld_prunning <- FALSE x <- QCsnp(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss) #> ℹ 4214 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> ℹ There are no monomorphic SNPs. #> ℹ No filter based on differential missingness will be applied. #> ✔ Output PLINK files prefixed as ,PostimputeEX_QC1, with passed SNPs are saved in ResultDir. #> ℹ Input file has 26527 SNPs. #> ℹ Output file has 22313 SNPs after filtering. ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC1\") file.copy(paste0(ResultDir, \"/\", ftemp), DataDir) #> [1] TRUE TRUE TRUE TRUE"},{"path":"/articles/postimputationQC.html","id":"step-3-flag-par-xtr-and-ampliconic-regions","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 3: Flag PAR, XTR and Ampliconic Regions","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"Now, filter Pseudo-Autosomal Region (PAR), X-transposed region (XTR) Ampliconic regions X-chromosome combine regions autosomes autosomal QC. Table: SNPs XTR. SNPs Ampliconic region. Note: perform step 4, since PAR regions. steps provided users case PAR regions dataset.","code":"## Running finput <- \"PostimputeEX_QC1\" x <- PlinkSummary(DataDir, ResultDir, finput) #> ℹ Dataset: PostimputeEX_QC1 #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 12 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #>   - Chr: 24 #> ℹ Total number of SNPs: 22313 #> ℹ Total number of samples: 276 foutput <- \"PostimputeEX_QC2_Dummy\" x <- FilterRegion(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, CHRX = TRUE, CHRY = FALSE, filterPAR = TRUE, filterXTR = TRUE, filterAmpliconic = TRUE, regionfile = FALSE, filterCHR = NULL, Hg = \"38\", exclude = FALSE) #> ℹ chrX #> ✖ There is no PAR region in the input data. Argument filterPAR cannot set to be TRUE. #> ℹ Changing filterPAR to FALSE #> ✖ There is no XTR region in the input data. Argument filterXTR cannot set to be TRUE. #> ℹ Changing filterXTR to FALSE #> ℹ Ampliconic SNPs:8 #> ℹ SNPs are only flagged for the desired region.  XTR_SNPs <- x$XTR Ampli_SNPs <- x$Ampliconic PAR_SNPs <- x$PAR save(XTR_SNPs, file = paste0(ResultDir, \"/Postimpute_XTR_SNPs.Rda\")) save(Ampli_SNPs, file = paste0(ResultDir, \"/Postimpute_Ampli_SNPs.Rda\")) save(PAR_SNPs, file = paste0(ResultDir, \"/Postimpute_PAR_SNPs.Rda\")) ## Output ## SNPs in PAR PAR_SNPs <- x$PAR ## No PAR SNP ## SNPs in XTR XTR_SNPs <- x$XTR ## 42 SNPs knitr::kable(XTR_SNPs, caption = \"SNPs in XTR.\") ## SNPs in Ampliconic region Ampliconic_SNPs <- x$Ampliconic # 7 SNPs knitr::kable(Ampliconic_SNPs, caption = \"SNPs in Ampliconic region.\")"},{"path":"/articles/postimputationQC.html","id":"step-4-filter-only-par-regions-from-x-chromosome","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 4: Filter only PAR Regions from X-chromosome","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"Now, users need move QC-ed files (.e., “PostimputeEX_QC2” “PostimputeEX_QC2_snps_extracted”) DataDir used input datasets next step pipeline. Copying plink files ResultDir DataDir.","code":"finput <- \"PostimputeEX_QC1\" x <- PlinkSummary(DataDir, ResultDir, finput) foutput <- \"PostimputeEX_QC2\" x <- FilterRegion(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, CHRX = TRUE, CHRY = FALSE, filterPAR = TRUE, filterXTR = FALSE, filterAmpliconic = FALSE, regionfile = FALSE, filterCHR = NULL, Hg = \"38\", exclude = TRUE) ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC2\") file.copy(paste0(ResultDir, \"/\", ftemp), DataDir) #> [1] FALSE"},{"path":"/articles/postimputationQC.html","id":"step-5-preparing-autosomal-and-x-chromosomal-plink-binary-files","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 5: Preparing autosomal and X-chromosomal plink binary files","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"Now, prepare two sets plink binary files “PostimputeEX_QC1” containing autosomes X-chromosomes, respectively. purpose, use FilterRegion(). “PostimputeEX_QC3_snps_extracted” contains X-chromosome, “PostimputeEX_QC3” contains autosomal SNPs. Note: perform step 6, since PAR regions. steps provided users case PAR regions dataset.","code":"finput <- \"PostimputeEX_QC1\" foutput <- \"PostimputeEX_QC3\"  y <- FilterRegion(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, CHRX = FALSE, CHRY = FALSE, filterPAR = FALSE, filterXTR = FALSE, filterAmpliconic = FALSE, regionfile = FALSE, filterCHR = 23, Hg = \"38\", exclude = TRUE) # Now, copying these files to DataDir. ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC3\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir))"},{"path":"/articles/postimputationQC.html","id":"step-6-merging-the-autosomal-regions-with-par-regions","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 6: Merging the autosomal regions with PAR regions","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"now merge autosomal files PAR regions using MergeRegion(). “PostimputeEX_QC3”, flag SNPs controls sex difference MAF, since differences may due technical confounding sampling biases study cohorts.","code":"finput1 <- \"PostimputeEX_QC3\" finput2 <- \"PostimputeEX_QC2_snps_extracted\" foutput <- \"PostimputeEX_QC3_autopar\" y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = FALSE) ## Copying the files to DataDir ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC3_autopar\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir))"},{"path":"/articles/postimputationQC.html","id":"step-7-flag-the-snps-in-the-controls-with-a-sex-difference-in-maf","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 7: Flag the SNPs in the controls with a sex difference in MAF","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"Since SNP MAF difference sexes controls, proceed next steps pipeline.","code":"finput <- \"PostimputeEX_QC3\" foutput <- \"Test_output\" x <- MAFdiffSexControl(DataDir, ResultDir, finput, foutput, filterSNP = FALSE) #> ℹ No SNP to be flagged or excluded."},{"path":"/articles/postimputationQC.html","id":"step-8-prepare-separate-male-and-female-subsets-of-the-genotypes-","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 8: Prepare separate male and female subsets of the genotypes.","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"Removing previous QC-ed file DataDir copying new QC-ed file DataDir.","code":"finput <- \"PostimputeEX_QC3\" foutput <- \"PostimputeEX_QC4_Female\" sex <- \"females\" x <- GetMFPlink(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, sex = sex, xplink = FALSE, autoplink = FALSE) #> ✔ Output PLINK files, prefixed as PostimputeEX_QC4_Female, are in #> /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ ## Making male plink files foutput <- \"PostimputeEX_QC4_Male\" sex <- \"males\" x <- GetMFPlink(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, sex = sex, xplink = FALSE, autoplink = FALSE) #> ✔ Output PLINK files, prefixed as PostimputeEX_QC4_Male, are in #> /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ ## Removing the previous QC-ed file from DataDir and copying the new QC-ed file to DataDir. ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"PostimputeEX_QC1\") invisible(file.remove(paste0(DataDir, \"/\", ftemp)))  ## Removing the previous QC-ed file from DataDir and copying the new QC-ed file to DataDir. ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"PostimputeEX_QC2\") invisible(file.remove(paste0(DataDir, \"/\", ftemp)))  ## Copying new plink files to DataDir ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC4\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir))"},{"path":"/articles/postimputationQC.html","id":"step-9-remove-snps-with-maf-0-05-from-each-sex-from-the-sex-specific-autosomal-plink-files","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 9: Remove SNPs with MAF < 0.05 from each sex from the sex-specific autosomal plink files","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":", perform QC SNPs using MAF, call rate, monomorphism differential missingness cases vs controls sex sex-specific autosomal datasets. recommend setting threshold filters males females analyses common variants. , use QCsnp() function. Removing previous QC-ed file DataDir copying new QC-ed file DataDir.","code":"## Applying filter to female-specific plink files finput <- \"PostimputeEX_QC4_Female\" foutput <- \"PostimputeEX_QC5_Female\" geno <- 0.05 maf <- 0.05 casecontrol <- TRUE hweCase <- NULL hweControl <- NULL hweCase <- NULL monomorphicSNPs <- TRUE caldiffmiss <- TRUE ld_prunning <- FALSE x <- QCsnp(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss) #> ℹ 0 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> 11 variants removed due to missing genotype data (--geno). #> 5363 variants removed due to minor allele threshold(s) #> • In cases,  #> • In controls,  #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as filtered_temp2 #> ℹ There are no monomorphic SNPs. #> ℹ Filtering for differential missingness between cases and controls is turned off. #> ℹ No SNP with differential missingness between cases and controls. #> ✔ Output PLINK files prefixed as ,PostimputeEX_QC5_Female, with passed SNPs are saved in ResultDir. #> ℹ Input file has 21330 SNPs. #> ℹ Output file has 15956 SNPs after filtering.  ## Applying filter to male-specific plink files finput <- \"PostimputeEX_QC4_Male\" foutput <- \"PostimputeEX_QC5_Male\" x <- QCsnp(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss) #> ℹ 0 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> 11 variants removed due to missing genotype data (--geno). #> 5309 variants removed due to minor allele threshold(s) #> • In cases,  #> • In controls,  #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as filtered_temp2 #> ℹ There are no monomorphic SNPs. #> ℹ Filtering for differential missingness between cases and controls is turned off. #> ℹ No SNP with differential missingness between cases and controls. #> ✔ Output PLINK files prefixed as ,PostimputeEX_QC5_Male, with passed SNPs are saved in ResultDir. #> ℹ Input file has 21330 SNPs. #> ℹ Output file has 16010 SNPs after filtering. ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"PostimputeEX_QC4\") invisible(file.remove(paste0(DataDir, \"/\", ftemp))) ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC4\") invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))  ## Copying the new QC-ed file to DataDir. ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC5\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir))"},{"path":"/articles/postimputationQC.html","id":"step-10-combine-sex-specific-autosomal-qc-ed-files-using-common-snps","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 10: Combine sex-specific autosomal QC-ed files using common SNPs:","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"Removing previous QC-ed file DataDir copying new QC-ed file DataDir.","code":"finput1 <- \"PostimputeEX_QC5_Female\" finput2 <- \"PostimputeEX_QC5_Male\" foutput <- \"PostimputeEX_Auto\" y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = TRUE) #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as PostimputeEX_Auto ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"PostimputeEX_QC5\") invisible(file.remove(paste0(DataDir, \"/\", ftemp)))  ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_Auto\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir))  ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC5\") invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))  ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_Auto\") invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))"},{"path":"/articles/postimputationQC.html","id":"step-11-get-sex-specific-x-chromosomal-plink-files","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 11: Get sex-specific X-chromosomal plink files","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":", use plink files prefixed “PostimputeEX_QC3_snps_extracted”. reminder, plink files contain X chromosome. utilize GetMFPlink() function get male female plink binary files X chromosomes. move files ResultDir DataDir run sex-specific QC steps.","code":"finput <- \"PostimputeEX_QC3_snps_extracted\" foutput <- \"PostimputeEX_QC3_XFemale\" ## Making female-specific plink files X chromosome sex <- \"females\" x <- GetMFPlink(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, sex = sex, xplink = FALSE, autoplink = FALSE) #> ✔ Output PLINK files, prefixed as PostimputeEX_QC3_XFemale, are in #> /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ ## Making male-specific plink files X chromosome foutput <- \"PostimputeEX_QC3_XMale\" sex <- \"males\" x <- GetMFPlink(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, sex = sex, xplink = FALSE, autoplink = FALSE) #> ✔ Output PLINK files, prefixed as PostimputeEX_QC3_XMale, are in #> /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ ## Copying sex-specific plink files ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC3_X\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir))"},{"path":"/articles/postimputationQC.html","id":"step-12-qc-of-sex-specific-x-chromosomal-snps","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 12: QC of sex-specific X-chromosomal SNPs","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":", remove SNPs missingness difference cases vs controls, separately sex, filter SNPs based 1% MAF, 5% missingness per genotype, monomorphic SNPs. recommend setting threshold filters males females analyses common variants. , use QCsnp() function.","code":"## Female-specific QC finput <- \"PostimputeEX_QC3_XFemale\" foutput <- \"PostimputeEX_QC4_XFemale\" geno <- 0.05 maf <- 0.01 casecontrol <- TRUE hweControl <- NULL hweCase <- NULL monomorphicSNPs <- FALSE caldiffmiss <- TRUE diffmissFilter <- TRUE dmissX <- TRUE # Since our input has X chromosome, setting this as TRUE wouldn’t change the result. dmissAutoY <- FALSE # Since our input has X chromosome, setting this as TRUE wouldn’t change the result. x <- QCsnp(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss, diffmissFilter = diffmissFilter, dmissX = dmissX, dmissAutoY = dmissAutoY) #> ℹ 0 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> 0 variants removed due to missing genotype data (--geno). #> 110 variants removed due to minor allele threshold(s) #> • In cases,  #> • In controls,  #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as filtered_temp2 #> ℹ No SNP with differential missingness between cases and controls. #> ✔ Output PLINK files prefixed as ,PostimputeEX_QC4_XFemale, with passed SNPs are saved in ResultDir. #> ℹ Input file has 983 SNPs. #> ℹ Output file has 873 SNPs after filtering.  ## For male-specific QC: finput <- \"PostimputeEX_QC3_XMale\" foutput <- \"PostimputeEX_QC4_XMale\" x <- QCsnp(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss, diffmissFilter = diffmissFilter, dmissX = dmissX, dmissAutoY = dmissAutoY) #> ℹ 0 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> 0 variants removed due to missing genotype data (--geno). #> 131 variants removed due to minor allele threshold(s) #> • In cases,  #> • In controls,  #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as filtered_temp2 #> ℹ No SNP with differential missingness between cases and controls. #> ✔ Output PLINK files prefixed as ,PostimputeEX_QC4_XMale, with passed SNPs are saved in ResultDir. #> ℹ Input file has 983 SNPs. #> ℹ Output file has 852 SNPs after filtering. ## Removing the previous QC-ed file from DataDir and copying the new QC-ed file to DataDir. ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"PostimputeEX_QC3\") invisible(file.remove(paste0(DataDir, \"/\", ftemp))) ## Removing the previous QC-ed file from DataDir and copying the new QC-ed file to DataDir. ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC3\") invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))  ## Copying sex-specific plink files ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC4_X\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir)) ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC4\") invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))"},{"path":"/articles/postimputationQC.html","id":"step-13-combine-sex-specific-qc-ed-x-chromosomal-dataset-using-common-snps","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 13: Combine sex-specific QC-ed X chromosomal dataset using common SNPs","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"","code":"finput1 <- \"PostimputeEX_QC4_XFemale\" finput2 <- \"PostimputeEX_QC4_XMale\" foutput <- \"PostimputeEX_QC5_Xchr\" y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = TRUE) #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as PostimputeEX_QC5_Xchr ## Copying merged plink files to DataDir ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_QC5_Xchr\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir)) invisible(file.remove(paste0(ResultDir, \"/\", ftemp))) ## Removing other QC-ed files from DataDir ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"PostimputeEX_QC4\") invisible(file.remove(paste0(DataDir, \"/\", ftemp)))"},{"path":"/articles/postimputationQC.html","id":"step-14-test-for-hwe-across-the-x-chromosomes-in-females","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 14: Test for HWE across the X chromosomes in females","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"Test HWE across X females (cases controls combined) remove regions analysis samples.","code":"finput <- \"PostimputeEX_QC5_Xchr\" foutput <- \"PostimputeEX_Xchr\" x <- Xhwe(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, filterSNP = TRUE) #> ✔ Output PLINK files, prefixed as female, are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ #> This test is running on a case-control dataset with female samples. #> ℹ Failed SNPs are excluded from the output PLINK files prefixed as PostimputeEX_Xchr is in #> /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ ## No. of the SNPs failed the test. length(x) # 2 SNPs in X chr in females failed HWE test. #> [1] 3 ## The failed SNPs x #> [1] \"rs56053951\" \"rs12353847\" \"rs5940058\" ## Removing the previous QC-ed file from DataDir and copying the new QC-ed file to DataDir. ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"PostimputeEX_QC5_Xchr\") invisible(file.remove(paste0(DataDir, \"/\", ftemp)))  ## Copying new QC-ed plink files to DataDir ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeEX_Xchr\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir))"},{"path":"/articles/postimputationQC.html","id":"step-15-checking-for-x-chromosomal-snps-having-maf-difference-in-sexes-in-controls","dir":"Articles","previous_headings":"Example Dataset Summary","what":"Step 15: Checking for X-chromosomal SNPs having MAF difference in sexes in controls","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"test performed binary traits. flag failed SNPs .","code":"finput <- \"PostimputeEX_Xchr\" foutput <- \"Test_output\" x <- MAFdiffSexControl(DataDir, ResultDir, finput, filterSNP = FALSE, foutput = foutput) #> ℹ No SNP to be flagged or excluded. x #> NULL"},{"path":"/articles/postimputationQC.html","id":"step-16-combining-autosomal-and-x-chromosomal-qc-ed-datasets","dir":"Articles","previous_headings":"","what":"Step 16: Combining autosomal and X-chromosomal QC-ed datasets","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"","code":"finput1 <- \"PostimputeEX_Auto\" finput2 <- \"PostimputeEX_Xchr\" foutput <- \"PostimputeQC\" use_common_snps <- FALSE y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = FALSE) #> ✔ Merging is done with all the SNPs i.e., union of the SNPs. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as PostimputeQC ## Removing the previous QC-ed file from DataDir and copying the new QC-ed file to DataDir. ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"PostimputeEX\") invisible(file.remove(paste0(DataDir, \"/\", ftemp)))  ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"PostimputeQC\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir)) invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))"},{"path":"/articles/postimputationQC.html","id":"step-17-preparing-separate-male-and-female-genotype-dataset-for-sample-level-qc","dir":"Articles","previous_headings":"Step 16: Combining autosomal and X-chromosomal QC-ed datasets","what":"Step 17: Preparing separate male and female genotype dataset for sample level QC","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"","code":"## Making female-specific plink files finput <- \"PostimputeQC\" foutput <- \"Postimpute_Female\" sex <- \"females\" x <- GetMFPlink(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, sex = sex, xplink = FALSE, autoplink = FALSE) #> ✔ Output PLINK files, prefixed as Postimpute_Female, are in #> /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ  ## Making male-specific plink files finput <- \"PostimputeQC\" foutput <- \"Postimpute_Male\" sex <- \"males\" x <- GetMFPlink(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, sex = sex, xplink = FALSE, autoplink = FALSE) #> ✔ Output PLINK files, prefixed as Postimpute_Male, are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ ## Copying sex-specific plink files to DataDir ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"Postimpute_Female\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir)) invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))  ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"Postimpute_Male\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir)) invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))"},{"path":"/articles/postimputationQC.html","id":"step-18-sex-specific-sample-level-qc","dir":"Articles","previous_headings":"Step 16: Combining autosomal and X-chromosomal QC-ed datasets","what":"Step 18: Sex-specific sample level QC","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"sex-specific plink files, remove individuals missing genotype rate > 0.1, absolute value heterozygosity F statistic > 0.20 IBD statistics pihat > 0.2. , use QCsample().","code":"## Running the function female-specific QC finput <- \"Postimpute_Female\" foutput <- \"Postimpute_Female1\" imiss <- 0.02 ## Since het = 3 was removing a lot of samples (185), I decided to increase the threshold after looking at the plot. het <- 3 small_sample_mod <- TRUE IBD <- 0.2 x <- QCsample(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, imiss = imiss, het = het, small_sample_mod = small_sample_mod, IBD = IBD) #> • Plots are initiated. #> ℹ No. of samples filtered/flagged for missingness: 0 #> ℹ No. of samples filtered/flagged for heterozygosity threshold: 2 #> ℹ No. of samples filtered/flagged for missingness and heterozygosity: 2 #> ℹ No sample is filtered out for IDB after missingness and heterozygosity filter. #> ℹ No. of samples in input PLINK files: 151 #> ℹ No. of samples in output PLINK files: 149 #> ✔ Output PLINK files, Postimpute_Female1 with final samples are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ. ## Running the function male-specific QC finput <- \"Postimpute_Male\" foutput <- \"Postimpute_Male1\" imiss <- 0.02 ## Since het = 3 was removing a lot of samples (185), I decided to increase the threshold after looking at the plot. het <- 5 small_sample_mod <- TRUE IBD <- 0.2 x <- QCsample(DataDir = DataDir, ResultDir = ResultDir, small_sample_mod = small_sample_mod, finput = finput, foutput = foutput, imiss = imiss, het = het, IBD = IBD) #> • Plots are initiated. #> ℹ No. of samples filtered/flagged for missingness: 0 #> ℹ No. of samples filtered/flagged for heterozygosity: 0 #> ℹ No. of samples filtered for missingness and heterozygosity: 0 #> ℹ No sample is filtered out for IDB after missingness and heterozygosity filter. #> ℹ No. of samples in input PLINK files: 125 #> ℹ No. of samples in output PLINK files: 125 #> ✔ Output PLINK files, Postimpute_Male1 with final samples are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ. ## Copying filtered plink files to DataDir ftemp <- list.files(paste0(ResultDir, \"/\"), pattern = \"Postimpute_\") invisible(file.copy(paste0(ResultDir, \"/\", ftemp), DataDir)) invisible(file.remove(paste0(ResultDir, \"/\", ftemp)))"},{"path":"/articles/postimputationQC.html","id":"step-19-combine-male-and-female-specific-qc-ed-genotype-datasets","dir":"Articles","previous_headings":"Step 16: Combining autosomal and X-chromosomal QC-ed datasets","what":"Step 19: Combine male and female-specific Qc-ed genotype datasets","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"","code":"## Combine male and female-specific files ## Running the function finput1 <- \"Postimpute_Female1\" finput2 <- \"Postimpute_Male1\" foutput <- \"PostimputeFinal\" y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = TRUE) #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as PostimputeFinal ## Removing the not needed files from DataDir. ftemp <- list.files(paste0(DataDir, \"/\"), pattern = \"Postimpute_\") invisible(file.remove(paste0(DataDir, \"/\", ftemp)))"},{"path":"/articles/postimputationQC.html","id":"final-summary-of-the-final-qc-ed-genotype-dataset","dir":"Articles","previous_headings":"","what":"Final Summary of the final QC-ed genotype dataset","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"","code":"finput <- \"PostimputeFinal\" x <- PlinkSummary(ResultDir, ResultDir, finput) #> ℹ Dataset: PostimputeFinal #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 149 #> ℹ This is case-control data #> ℹ Number of cases: 107 #> ℹ Number of controls: 167 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 54 #> ℹ Number of controls in females: 95 #> ℹ Number of chromosomes: 11 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #> ℹ Total number of SNPs: 16208 #> ℹ Total number of samples: 274"},{"path":"/articles/postimputationQC.html","id":"citing-gxwasr","dir":"Articles","previous_headings":"","what":"Citing GXwasR","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"hope GXwasR useful research. Please use following information cite package overall approach. Thank !","code":"## Citation info citation(\"GXwasR\") #> To cite package 'GXwasR' in publications use: #>  #>   Bose B, Blostein F, Kim J, Winters J, Actkins KV, Mayer D, Congivaram H, Niarchou M, Edwards DV, Davis #>   LK, Stranger BE (2025). \"GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on #>   Complex Traits.\" _medRxiv 2025.06.10.25329327_. doi:10.1101/2025.06.10.25329327 #>   <https://doi.org/10.1101/2025.06.10.25329327>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on Complex Traits}, #>     author = {Banabithi Bose and Freida Blostein and Jeewoo Kim and Jessica Winters and Ky’Era V. Actkins and David Mayer and Harrsha Congivaram and Maria Niarchou and Digna Velez Edwards and Lea K. Davis and Barbara E. Stranger}, #>     journal = {medRxiv 2025.06.10.25329327}, #>     year = {2025}, #>     doi = {10.1101/2025.06.10.25329327}, #>   }"},{"path":"/articles/postimputationQC.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"GXwasR package (Bose, Blostein, Kim et al., 2025) made possible thanks : R (R Core Team, 2025) BiocStyle (Oleś, 2025) knitr (Xie, 2025) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux et al., 2024) sessioninfo (Wickham, Chang, Flight et al., 2025) testthat (Wickham, 2011) package developed using biocthis. R session information.","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       macOS Sequoia 15.6 #>  system   aarch64, darwin24.4.0 #>  ui       unknown #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2025-08-08 #>  pandoc   3.6.3 @ /Applications/Positron.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown) #>  quarto   1.7.33 @ /usr/local/bin/quarto #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [2] CRAN (R 4.5.0) #>  backports              1.5.0      2024-05-23 [2] CRAN (R 4.5.1) #>  bibtex                 0.5.1      2023-01-26 [2] CRAN (R 4.5.0) #>  bigassertr             0.1.7      2025-06-27 [2] CRAN (R 4.5.1) #>  bigparallelr           0.3.2      2021-10-02 [2] CRAN (R 4.5.0) #>  bigsnpr                1.12.18    2024-11-26 [2] CRAN (R 4.5.1) #>  bigsparser             0.7.3      2024-09-06 [2] CRAN (R 4.5.1) #>  bigstatsr              1.6.2      2025-07-29 [2] CRAN (R 4.5.1) #>  Biobase                2.68.0     2025-04-15 [2] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [2] Bioconduc~ #>  BiocIO                 1.18.0     2025-04-15 [2] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [2] CRAN (R 4.5.0) #>  BiocParallel           1.42.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  BiocStyle              2.36.0     2025-04-15 [2] Bioconduc~ #>  Biostrings             2.76.0     2025-04-15 [2] Bioconduc~ #>  bit                    4.6.0      2025-03-06 [2] CRAN (R 4.5.1) #>  bit64                  4.6.0-1    2025-01-16 [2] CRAN (R 4.5.1) #>  bitops                 1.0-9      2024-10-03 [2] CRAN (R 4.5.0) #>  brio                   1.1.5      2024-04-24 [2] CRAN (R 4.5.1) #>  broom                  1.0.9      2025-07-28 [2] CRAN (R 4.5.1) #>  BSgenome               1.76.0     2025-04-15 [2] Bioconduc~ #>  cachem                 1.1.0      2024-05-16 [2] CRAN (R 4.5.0) #>  calibrate              1.7.7      2020-06-19 [2] CRAN (R 4.5.0) #>  callr                  3.7.6      2024-03-25 [2] CRAN (R 4.5.0) #>  car                    3.1-3      2024-09-27 [2] CRAN (R 4.5.0) #>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.5.0) #>  cli                    3.6.5      2025-04-23 [2] CRAN (R 4.5.0) #>  codetools              0.2-20     2024-03-31 [4] CRAN (R 4.5.1) #>  cowplot                1.2.0      2025-07-07 [2] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [2] CRAN (R 4.5.0) #>  curl                   6.4.0      2025-06-22 [2] CRAN (R 4.5.1) #>  data.table             1.17.8     2025-07-10 [2] CRAN (R 4.5.1) #>  DelayedArray           0.34.1     2025-04-17 [2] Bioconduc~ #>  devtools             * 2.4.5      2022-10-11 [3] CRAN (R 4.5.0) #>  digest                 0.6.37     2024-08-19 [2] CRAN (R 4.5.0) #>  doParallel             1.0.17     2022-02-07 [2] CRAN (R 4.5.0) #>  doRNG                  1.8.6.2    2025-04-02 [2] CRAN (R 4.5.0) #>  doSNOW                 1.0.20     2022-02-04 [2] CRAN (R 4.5.0) #>  dplyr                  1.1.4      2023-11-17 [2] CRAN (R 4.5.0) #>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.5.0) #>  evaluate               1.0.4      2025-06-18 [2] CRAN (R 4.5.1) #>  farver                 2.1.2      2024-05-13 [2] CRAN (R 4.5.0) #>  fastmap                1.2.0      2024-05-15 [2] CRAN (R 4.5.0) #>  flock                  0.7        2016-11-12 [2] CRAN (R 4.5.1) #>  foreach                1.5.2      2022-02-02 [2] CRAN (R 4.5.0) #>  Formula                1.2-5      2023-02-24 [2] CRAN (R 4.5.0) #>  fs                     1.6.6      2025-04-12 [2] CRAN (R 4.5.0) #>  gdsfmt                 1.44.1     2025-07-09 [2] Bioconduc~ #>  generics               0.1.4      2025-05-09 [2] CRAN (R 4.5.0) #>  GenomeInfoDb           1.44.1     2025-07-23 [2] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-04-21 [2] Bioconductor #>  GenomicAlignments      1.44.0     2025-04-15 [2] Bioconduc~ #>  GenomicRanges          1.60.0     2025-04-15 [2] Bioconduc~ #>  ggplot2                3.5.2      2025-04-09 [2] CRAN (R 4.5.0) #>  ggpubr                 0.6.1      2025-06-27 [2] CRAN (R 4.5.1) #>  ggrepel                0.9.6      2024-09-07 [2] CRAN (R 4.5.1) #>  ggsignif               0.6.4      2022-10-13 [2] CRAN (R 4.5.0) #>  glue                   1.8.0      2024-09-30 [2] CRAN (R 4.5.0) #>  gridExtra              2.3        2017-09-09 [2] CRAN (R 4.5.0) #>  gtable                 0.3.6      2024-10-25 [2] CRAN (R 4.5.0) #>  GXwasR               * 0.99.0     2025-08-08 [1] Bioconductor #>  hms                    1.1.3      2023-03-21 [2] CRAN (R 4.5.0) #>  htmltools              0.5.8.1    2024-04-04 [2] CRAN (R 4.5.0) #>  htmlwidgets            1.6.4      2023-12-06 [2] CRAN (R 4.5.0) #>  httpuv                 1.6.16     2025-04-16 [2] CRAN (R 4.5.1) #>  httr                   1.4.7      2023-08-15 [2] CRAN (R 4.5.0) #>  IRanges                2.42.0     2025-04-15 [2] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [2] CRAN (R 4.5.0) #>  jsonlite               2.0.0      2025-03-27 [2] CRAN (R 4.5.0) #>  knitr                  1.50       2025-03-16 [2] CRAN (R 4.5.0) #>  labeling               0.4.3      2023-08-29 [2] CRAN (R 4.5.0) #>  later                  1.4.2      2025-04-08 [2] CRAN (R 4.5.1) #>  lattice                0.22-7     2025-04-02 [4] CRAN (R 4.5.1) #>  lifecycle              1.0.4      2023-11-07 [2] CRAN (R 4.5.0) #>  lubridate              1.9.4      2024-12-08 [2] CRAN (R 4.5.1) #>  magrittr             * 2.0.3      2022-03-30 [2] CRAN (R 4.5.0) #>  MASS                   7.3-65     2025-02-28 [4] CRAN (R 4.5.1) #>  mathjaxr               1.8-0      2025-04-30 [2] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [4] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [2] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [2] CRAN (R 4.5.0) #>  memoise                2.0.1      2021-11-26 [2] CRAN (R 4.5.0) #>  mgcv                   1.9-3      2025-04-04 [4] CRAN (R 4.5.1) #>  mime                   0.13       2025-03-17 [2] CRAN (R 4.5.0) #>  miniUI                 0.1.2      2025-04-17 [3] CRAN (R 4.5.0) #>  nlme                   3.1-168    2025-03-31 [4] CRAN (R 4.5.1) #>  pillar                 1.11.0     2025-07-04 [2] CRAN (R 4.5.1) #>  pkgbuild               1.4.8      2025-05-26 [2] CRAN (R 4.5.0) #>  pkgconfig              2.0.3      2019-09-22 [2] CRAN (R 4.5.0) #>  pkgdev                 0.1.0.9060 2025-08-04 [2] Github (dieghernan/pkgdev@e56f2a8) #>  pkgload                1.4.0      2024-06-28 [2] CRAN (R 4.5.0) #>  plyr                   1.8.9      2023-10-02 [2] CRAN (R 4.5.1) #>  plyranges              1.28.0     2025-04-15 [2] Bioconduc~ #>  polynom                1.4-1      2022-04-11 [2] CRAN (R 4.5.0) #>  poolr                  1.2-0      2025-05-07 [2] CRAN (R 4.5.0) #>  prettyunits            1.2.0      2023-09-24 [2] CRAN (R 4.5.0) #>  printr               * 0.3        2023-03-08 [2] CRAN (R 4.5.0) #>  processx               3.8.6      2025-02-21 [2] CRAN (R 4.5.1) #>  profvis                0.4.0      2024-09-20 [3] CRAN (R 4.5.0) #>  progress               1.2.3      2023-12-06 [2] CRAN (R 4.5.0) #>  promises               1.3.3      2025-05-29 [2] CRAN (R 4.5.0) #>  ps                     1.9.1      2025-04-12 [2] CRAN (R 4.5.1) #>  purrr                  1.1.0      2025-07-10 [2] CRAN (R 4.5.1) #>  qqman                  0.1.9      2023-08-23 [2] CRAN (R 4.5.0) #>  R.methodsS3            1.8.2      2022-06-13 [2] CRAN (R 4.5.0) #>  R.oo                   1.27.1     2025-05-02 [2] CRAN (R 4.5.0) #>  R.utils                2.13.0     2025-02-24 [2] CRAN (R 4.5.0) #>  R6                     2.6.1      2025-02-15 [2] CRAN (R 4.5.0) #>  ragg                   1.4.0      2025-04-10 [3] CRAN (R 4.5.0) #>  rbibutils              2.3        2024-10-04 [2] CRAN (R 4.5.1) #>  RColorBrewer           1.1-3      2022-04-03 [2] CRAN (R 4.5.0) #>  Rcpp                   1.1.0      2025-07-02 [2] CRAN (R 4.5.1) #>  RCurl                  1.98-1.17  2025-03-22 [2] CRAN (R 4.5.0) #>  Rdpack                 2.6.4      2025-04-09 [2] CRAN (R 4.5.0) #>  RefManageR           * 1.4.0      2022-09-30 [2] CRAN (R 4.5.1) #>  regioneR               1.40.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  remotes                2.5.0      2024-03-17 [2] CRAN (R 4.5.0) #>  restfulr               0.0.16     2025-06-27 [2] CRAN (R 4.5.1) #>  rjson                  0.2.23     2024-09-16 [2] CRAN (R 4.5.0) #>  rlang                  1.1.6      2025-04-11 [2] CRAN (R 4.5.0) #>  rmarkdown            * 2.29       2024-11-04 [2] CRAN (R 4.5.0) #>  rmio                   0.4.0      2022-02-17 [2] CRAN (R 4.5.0) #>  rngtools               1.5.2      2021-09-20 [2] CRAN (R 4.5.0) #>  rprojroot              2.1.0      2025-07-12 [2] CRAN (R 4.5.1) #>  Rsamtools              2.24.0     2025-04-15 [2] Bioconduc~ #>  rstatix                0.7.2      2023-02-01 [2] CRAN (R 4.5.0) #>  rtracklayer            1.68.0     2025-04-15 [2] Bioconduc~ #>  S4Arrays               1.8.1      2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  S4Vectors              0.46.0     2025-04-15 [2] Bioconduc~ #>  scales                 1.4.0      2025-04-24 [2] CRAN (R 4.5.0) #>  seqminer               9.7        2024-10-02 [2] CRAN (R 4.5.1) #>  sessioninfo          * 1.2.3      2025-02-05 [2] CRAN (R 4.5.1) #>  shiny                  1.11.1     2025-07-03 [2] CRAN (R 4.5.1) #>  snow                   0.4-4      2021-10-27 [2] CRAN (R 4.5.0) #>  SNPRelate              1.42.0     2025-04-15 [2] Bioconduc~ #>  SparseArray            1.8.1      2025-07-23 [2] Bioconduc~ #>  stringi                1.8.7      2025-03-27 [2] CRAN (R 4.5.0) #>  stringr                1.5.1      2023-11-14 [2] CRAN (R 4.5.0) #>  sumFREGAT              1.2.5      2022-06-07 [2] CRAN (R 4.5.1) #>  SummarizedExperiment   1.38.1     2025-04-30 [2] Bioconductor 3.21 (R 4.5.0) #>  sys                    3.4.3      2024-10-04 [2] CRAN (R 4.5.0) #>  systemfonts            1.2.3      2025-04-30 [2] CRAN (R 4.5.0) #>  testthat             * 3.2.3      2025-01-13 [2] CRAN (R 4.5.1) #>  textshaping            1.0.1      2025-05-01 [3] CRAN (R 4.5.0) #>  tibble                 3.3.0      2025-06-08 [2] CRAN (R 4.5.0) #>  tidyr                  1.3.1      2024-01-24 [2] CRAN (R 4.5.1) #>  tidyselect             1.2.1      2024-03-11 [2] CRAN (R 4.5.0) #>  timechange             0.3.0      2024-01-18 [2] CRAN (R 4.5.1) #>  tzdb                   0.5.0      2025-03-15 [2] CRAN (R 4.5.1) #>  UCSC.utils             1.4.0      2025-04-15 [2] Bioconduc~ #>  urlchecker             1.0.1      2021-11-30 [3] CRAN (R 4.5.0) #>  usethis              * 3.1.0      2024-11-26 [2] CRAN (R 4.5.0) #>  vctrs                  0.6.5      2023-12-01 [2] CRAN (R 4.5.0) #>  vroom                  1.6.5      2023-12-05 [2] CRAN (R 4.5.1) #>  withr                  3.0.2      2024-10-28 [2] CRAN (R 4.5.0) #>  xfun                   0.52       2025-04-02 [2] CRAN (R 4.5.0) #>  XML                    3.99-0.18  2025-01-01 [2] CRAN (R 4.5.0) #>  xml2                   1.3.8      2025-03-14 [2] CRAN (R 4.5.1) #>  xtable                 1.8-4      2019-04-21 [2] CRAN (R 4.5.0) #>  XVector                0.48.0     2025-04-15 [2] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [2] CRAN (R 4.5.0) #>  #>  [1] /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f #>  [2] /Users/mayerdav/Library/R/arm64/4.5/library #>  [3] /opt/homebrew/lib/R/4.5/site-library #>  [4] /opt/homebrew/Cellar/r/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/postimputationQC.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"Sex-aware Post-impute Quality Control Pipeline Using GXwasR","text":"vignette generated using BiocStyle (Oleś, 2025) knitr (Xie, 2025) rmarkdown (Allaire, Xie, Dervieux et al., 2024) running behind scenes. Citations made RefManageR (McLean, 2017). [1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.29. 2024. URL: https://github.com/rstudio/rmarkdown. [2] B. Bose, F. Blostein, J. Kim, et al. “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits”. : medRxiv 2025.06.10.25329327 (2025). DOI: 10.1101/2025.06.10.25329327. [3] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [4] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.36.0. 2025. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [5] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2025. URL: https://www.R-project.org/. [6] H. Wickham. “testthat: Get Started Testing”. : R Journal 3 (2011), pp. 5–10. URL: https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. [7] H. Wickham, W. Chang, R. Flight, et al. sessioninfo: R Session Information. R package version 1.2.3. 2025. DOI: 10.32614/CRAN.package.sessioninfo. URL: https://CRAN.R-project.org/package=sessioninfo. [8] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.50. 2025. URL: https://yihui.org/knitr/.","code":""},{"path":"/articles/preimputationQC.html","id":"pre-imputation-qc-pipeline","dir":"Articles","previous_headings":"","what":"Pre-imputation QC pipeline:","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"run pre-imputation QC pipeline vignette utilizing functions GXwasR package.","code":""},{"path":"/articles/preimputationQC.html","id":"example-datasets","dir":"Articles","previous_headings":"","what":"Example Datasets","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"PLINK bed, bim, fam files three mandatory files representing genotype dataset run pipeline. know file extensions, please check https://www.cog-genomics.org/plink/1.9/formats. GXwasR_example: GXwasR_example.bed GXwasR_example.bim GXwasR_example.fam plink files contain genotypes 276 individuals (males females) simulated 1000Genome European decent 26515 variants across twelve chromosomes (1-10,23,24). dataset contains 125 males, 151 females, 108 cases 168 controls. utilize set plink files proxy pre-imputated genotype data.","code":""},{"path":"/articles/preimputationQC.html","id":"pre-imputation-qc-steps","dir":"Articles","previous_headings":"","what":"Pre-imputation QC steps","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"Filtering Multi-Allelic Variants: step essential simplifying genetic data analysis removing variants two alleles. Multi-allelic variants can complicate analyses interpretations, making filtering crucial streamlined dataset. Removal Ambiguous SNPs Indels: specifically target SNPs ambiguous mappings (like GC pairings) indels (insertions deletions), can lead inaccuracies genotype calling. Removing elements helps maintaining integrity genetic data. QC SNPs Relaxed Genotype Call Rate: phase, filter SNPs based less stringent genotype call rate. step aims balance retaining enough informative SNPs excluding much missing data. Filtering Samples Relaxed Missing Rate Threshold: Similar SNPs, apply relaxed threshold sample missingness. approach ensures don’t prematurely exclude samples might informative despite slightly higher rate missing data. Application Sex Check: verify consistency reported genetic sex. check helps identify potential sample mix-ups issues data integrity. Filter Needed Chromosomes: Focus narrowed autosomes sex chromosomes, typically relevant genetic studies. step streamlines dataset chromosomes interest. Second Round SNP Filtering: stringent phase includes filters minor allele frequency (MAF) < 0.01, call rate < 0.02, case-control differential missingness, Hardy-Weinberg equilibrium (cases < e-10; controls < e-06), removal monomorphic SNPs. rigorous filtering ensures reliable SNPs retained analysis. Second Round Sample Filtering: , apply stringent thresholds call rate (< 0.02), heterozygosity, relatedness (IBD F-stat < 0.2). step refines sample pool, ensuring high-quality samples included. Applying Ancestry Check: assess ancestry samples identify exclude outliers different ancestries, vital controlling population stratification genetic association studies. Third Round SNP Filtering: final filtering step ensures previously applied SNP thresholds maintained even rigorous sample filtering. ’s crucial step guarantee overall quality consistency SNP data set.","code":""},{"path":"/articles/preimputationQC.html","id":"loading-the-gxwasr-library","dir":"Articles","previous_headings":"","what":"Loading the GXwasR library","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"","code":"## Call some libraries library(GXwasR) library(printr) library(rmarkdown)"},{"path":"/articles/preimputationQC.html","id":"learn-about-all-the-gxwasr-functions","dir":"Articles","previous_headings":"","what":"Learn about all the GXwasR functions","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"beginning pre-imputation quality control (QC), recommended users familiarize functions GXwasR package. knowledge help understand required input arguments, execute functions, outputs expect. explore available functions, users first load GXwasR library use browseVignettes() function:","code":"browseVignettes(\"GXwasR\")"},{"path":"/articles/preimputationQC.html","id":"example-dataset-summary","dir":"Articles","previous_headings":"","what":"Example Dataset Summary","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"Dataset: GXwasR_example","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" x <- PlinkSummary(DataDir, ResultDir, finput) #> ℹ Dataset: GXwasR_example #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 12 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #>   - Chr: 24 #> ℹ Total number of SNPs: 26527 #> ℹ Total number of samples: 276"},{"path":"/articles/preimputationQC.html","id":"step-1-filtering-multi-allelic-variants","dir":"Articles","previous_headings":"","what":"Step 1: Filtering multi-allelic variants","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"Firstly, users need ensure input plink files bi-allelic. ensure , advised run FilterAllele() function input dataset. Since multi-allelic SNPs, proceed input data.","code":"foutput <- \"PreimputeEX_QC1\" x <- FilterAllele(DataDir, ResultDir, finput, foutput) #> ℹ There is no multi-allelic SNP present in the input dataset."},{"path":"/articles/preimputationQC.html","id":"step-2-qc-of-snps-for-genotype-call-rate","dir":"Articles","previous_headings":"","what":"Step 2: QC of SNPs for genotype call rate","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"removes variants missing genotype data 20% individuals dataset. function implicitly remove ambiguous SNPs (.e., <>GC), indels etc. Users can set threshold. Copying plink files ResultDir DataDir.","code":"# Running foutput <- \"PreimputeEX_QC1\" geno <- 0.2 maf <- NULL casecontrol <- FALSE caldiffmiss <- FALSE diffmissFilter <- FALSE dmissX <- FALSE dmissAutoY <- FALSE monomorphicSNPs <- TRUE ld_prunning <- FALSE casecontrol <- FALSE hweCase <- NULL hweControl <- NULL monomorphicSNPs <- FALSE ld_prunning <- FALSE x <- QCsnp(DataDir = DataDir, ResultDir = ResultDir, finput = finput,foutput = foutput, geno = geno, maf = maf,hweCase = hweCase, hweControl = hweControl, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss, dmissX = dmissX, dmissAutoY = dmissAutoY, diffmissFilter = diffmissFilter) #> ℹ 4214 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> ℹ 11 variants removed due to missing genotype data (--geno). #> ℹ No filter based on differential missingness will be applied. #> ✔ Output PLINK files prefixed as ,PreimputeEX_QC1, with passed SNPs are saved in ResultDir. #> ℹ Input file has 26527 SNPs. #> ℹ Output file has 22302 SNPs after filtering. ftemp <- list.files(paste0(ResultDir,\"/\"),pattern = \"PreimputeEX_QC1\") file.copy(paste0(ResultDir,\"/\",ftemp),DataDir) #> [1] TRUE TRUE TRUE TRUE PlinkSummary(DataDir, ResultDir, finput = \"PreimputeEX_QC1\") #> ℹ Dataset: PreimputeEX_QC1 #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 11 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #> ℹ Total number of SNPs: 22302 #> ℹ Total number of samples: 276"},{"path":"/articles/preimputationQC.html","id":"step-3-filtering-samples-with-high-missing-rate-threshold-","dir":"Articles","previous_headings":"","what":"Step 3: Filtering samples with high missing rate threshold.","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"excludes individuals missing genotype data 20% genetic variants dataset.","code":"# Running finput <- \"PreimputeEX_QC1\" foutput <- \"PreimputeEX_QC2\" imiss = 0.2 het = NULL IBD = NULL filterSample <- TRUE ambi_out <- TRUE x = QCsample(DataDir = DataDir,ResultDir = ResultDir, finput = finput,foutput = foutput, imiss = imiss,het = het, IBD = NULL, filterSample = filterSample, ambi_out = ambi_out) #> ℹ Missingness and heterogygosity thresholds are NULL. #> ℹ There will be no sample to be filtered for IBD with 'IBD' threshold. #> Warning: cannot open file '/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ/PreimputeEX_QC2.fam': No such file or directory"},{"path":"/articles/preimputationQC.html","id":"step-4-apply-sex-check","dir":"Articles","previous_headings":"","what":"Step 4: Apply sex check","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"Number samples problematic sex assignment: 4 Note, filtering samples based sex prediction. function uses X chromosome data determine sex (.e. based heterozygosity rates) flags individuals reported sex PED file match estimated sex (given genomic data). PROBLEM arises two sexes match, SNP data pedigree data ambiguous regard sex. male call made F 0.8; female call made F less 0.2. SNPSEX Sex determined X chromosome F actual X chromosome inbreeding (homozygosity) estimate Users ability impute sex dataset.","code":"finput <- \"PreimputeEX_QC1\" # Using the same input file LD = TRUE LD_window_size <- 50 LD_step_size <- 5 LD_r2_threshold <- 0.02 fmax_F <- 0.3 mmin_F <- 0.7 # We will not impute sex impute_sex <- FALSE compute_freq <- FALSE SexCheckResult <-SexCheck(DataDir=DataDir,ResultDir = ResultDir, finput=finput,impute_sex=impute_sex,compute_freq =compute_freq,LD_window_size=LD_window_size,LD_step_size=LD_step_size,LD_r2_threshold=0.02,fmax_F = fmax_F,mmin_F=mmin_F) #> ℹ There are no Y chromosomes in the input PLINK files. Estimates will be based solely on the X chromosome. problematic_sex <- SexCheckResult[SexCheckResult$STATUS != \"OK\",] problematic_sex <- problematic_sex[,1:2] write.table(problematic_sex,file = paste0(DataDir,\"/problematic_sex_samples\"),quote = F, row.names = F,col.names = F) SexCheckResult[1:5,]"},{"path":"/articles/preimputationQC.html","id":"step-5-filter-for-needed-chromosomes-","dir":"Articles","previous_headings":"","what":"Step 5: Filter for needed chromosomes.","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"prefer keep chromosome 1 23. Copying plink files ResultDir DataDir.","code":"test1 <- read.table(paste0(DataDir,\"/\",finput,\".bim\")) unique(test1$V1) #>  [1]  1  2  3  4  5  6  7  8  9 10 23 foutput <- \"PreimputeEX_QC2\" x <- FilterRegion(DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput, CHRX = FALSE, CHRY = FALSE, filterPAR = FALSE, filterXTR = FALSE, filterAmpliconic = FALSE, regionfile = FALSE, filterCHR = c(24, 25, 26),Hg = \"38\", exclude = TRUE) ftemp <- list.files(paste0(ResultDir,\"/\"),pattern = \"PreimputeEX_QC2\") file.copy(paste0(ResultDir,\"/\",ftemp),DataDir) #> [1] TRUE TRUE TRUE TRUE TRUE PlinkSummary(DataDir, ResultDir, finput = \"PreimputeEX_QC2\") #> ℹ Dataset: PreimputeEX_QC2 #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 11 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #> ℹ Total number of SNPs: 22302 #> ℹ Total number of samples: 276"},{"path":"/articles/preimputationQC.html","id":"step-6-second-round-of-snp-filtering-","dir":"Articles","previous_headings":"","what":"Step 6: Second round of SNP filtering.","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"Copying plink files ResultDir DataDir.","code":"library(GXwasR) finput <- \"PreimputeEX_QC2\" foutput <- \"PreimputeEX_QC3\" geno <- 0.02 maf <- 0.01 casecontrol <- TRUE caldiffmiss <- TRUE diffmissFilter <- TRUE dmissX <- TRUE dmissAutoY <- TRUE monomorphicSNPs <- TRUE ld_prunning <- FALSE hwe = NULL hweCase <- 1e-10 hweControl <- 1e-06 x <- QCsnp(DataDir = DataDir, ResultDir = ResultDir, finput = finput,foutput = foutput, geno = geno, maf = maf,hweCase = hweCase, hweControl = hweControl, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss, dmissX = dmissX, dmissAutoY = dmissAutoY, diffmissFilter = diffmissFilter) #> ℹ 0 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> 0 variants removed due to missing genotype data (--geno). #> 1930 variants removed due to minor allele threshold(s) #> • In cases,  1 variant removed due to Hardy-Weinberg exact test. #> • In controls,  19 variants removed due to Hardy-Weinberg exact test. #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as filtered_temp2 #> ℹ There are no monomorphic SNPs. #> ℹ No SNP with differential missingness between cases and controls. #> ✔ Output PLINK files prefixed as ,PreimputeEX_QC3, with passed SNPs are saved in ResultDir. #> ℹ Input file has 22302 SNPs. #> ℹ Output file has 20353 SNPs after filtering. ftemp <- list.files(paste0(ResultDir,\"/\"),pattern = \"PreimputeEX_QC3\") file.copy(paste0(ResultDir,\"/\",ftemp),DataDir) #> [1] TRUE TRUE TRUE TRUE PlinkSummary(DataDir, ResultDir, finput = \"PreimputeEX_QC3\") #> ℹ Dataset: PreimputeEX_QC3 #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 11 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #> ℹ Total number of SNPs: 20353 #> ℹ Total number of samples: 276"},{"path":"/articles/preimputationQC.html","id":"step-7-second-round-of-sample-filtering","dir":"Articles","previous_headings":"","what":"Step 7: Second round of sample filtering","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"using stringent thresholds sample filter. Copying plink files ResultDir DataDir.","code":"finput <- \"PreimputeEX_QC3\" foutput <- \"PreimputeEX_QC4\" imiss = 0.02 het = 3 IBD = 0.2 IBDmatrix = FALSE small_sample_mod = TRUE filterSample = TRUE ambi_out = TRUE x = QCsample(DataDir = DataDir,ResultDir = ResultDir, finput = finput,foutput = foutput, imiss = imiss,het = het, IBD = IBD, IBDmatrix = IBDmatrix, filterSample = filterSample, ambi_out = ambi_out) #> • Plots are initiated. #> ℹ No. of samples filtered/flagged for missingness: 0 #> ℹ No. of samples filtered/flagged for heterozygosity: 0 #> ℹ No. of samples filtered for missingness and heterozygosity: 0 #> ℹ No. of samples marked to be filtered out for IDB after missingness and heterozygosity filter: 2 #> ℹ No. of samples in input PLINK files: 276 #> ℹ No. of samples in output PLINK files: 274 #> ✔ Output PLINK files, PreimputeEX_QC4 with final samples are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ. ftemp <- list.files(paste0(ResultDir,\"/\"),pattern = \"PreimputeEX_QC4\") file.copy(paste0(ResultDir,\"/\",ftemp),DataDir) #> [1] TRUE TRUE TRUE TRUE PlinkSummary(DataDir, ResultDir, finput = \"PreimputeEX_QC4\") #> ℹ Dataset: PreimputeEX_QC4 #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 124 #> ℹ Number of females: 150 #> ℹ This is case-control data #> ℹ Number of cases: 106 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 52 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 54 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 11 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #> ℹ Total number of SNPs: 20353 #> ℹ Total number of samples: 274"},{"path":"/articles/preimputationQC.html","id":"step-8-ancestry-check","dir":"Articles","previous_headings":"","what":"Step 8: Ancestry check","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"Prior use function, users highly encouraged read tutorial ““Decoding Ancestry: Guide Using GXwasR Genetic Ancestry Estimation”. outlier samples.","code":"data(\"highLD_hg19\", package = \"GXwasR\") data(\"example_data_study_sample_ancestry\", package = \"GXwasR\") finput <- \"PreimputeEX_QC4\" reference <- \"HapMapIII_NCBI36\" highLD_regions <- highLD_hg19 study_pop <- example_data_study_sample_ancestry studyLD_window_size = 50 studyLD_step_size = 5 studyLD_r2_threshold = 0.02 filterSNP = TRUE studyLD = TRUE referLD = TRUE referLD_window_size = 50 referLD_step_size = 5 referLD_r2_threshold = 0.02 outlier = TRUE outlier_threshold = 3 outlierOf = \"EUR\" x <- AncestryCheck(DataDir = DataDir,     ResultDir = ResultDir,     finput = finput,     reference = reference,     filterSNP = TRUE,     studyLD = TRUE,     studyLD_window_size = 50,     studyLD_step_size = 5,     studyLD_r2_threshold = 0.02,     referLD = FALSE,     referLD_window_size = 50,     referLD_step_size = 5,     referLD_r2_threshold = 0.02,     highLD_regions = highLD_regions,     study_pop = study_pop,     outlier = TRUE,     outlierOf = \"EUR\",     outlier_threshold = 3) #> No A-T or G-C SNPs found in study data. #> 111854 ambiguous SNPs removed from reference data. #> ! LD pruning is recommended for reference dataset. Set referLD = TRUE. #> ✔ LD pruning was performed for study dataset. #>  #> ℹ Number of overlapping SNPs between study and reference data using rsID: 1032 #> ✔ PCA done. #> ℹ No allele flips between study and reference data. #> ℹ 7 samples are outliers of selected reference population. #> ℹ 179 samples are NOT outliers of selected reference population.  Samples_with_predicted_ancestry <- x[[\"Samples_with_predicted_ancestry\"]]  outlier <- x[[\"Outlier_samples\"]]  outlier Samples_with_predicted_ancestry[1:5,]"},{"path":"/articles/preimputationQC.html","id":"step-9-third-round-of-snp-filtering","dir":"Articles","previous_headings":"","what":"Step 9: Third round of SNP filtering","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"make sure filtering thresholds SNPs maintained sample filtering.","code":"library(GXwasR) finput <- \"PreimputeEX_QC4\" foutput <- \"Preimpute_Final\" geno <- 0.02 maf <- 0.01 casecontrol <- TRUE caldiffmiss <- TRUE diffmissFilter <- TRUE dmissX <- TRUE dmissAutoY <- TRUE monomorphicSNPs <- TRUE ld_prunning <- FALSE  hwe = NULL hweCase <- 1e-10 hweControl <- 1e-06 x <- QCsnp(DataDir = ResultDir, ResultDir = ResultDir, finput = finput,foutput = foutput, geno = geno, maf = maf,hweCase = hweCase, hweControl = hweControl, ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs, caldiffmiss = caldiffmiss, dmissX = dmissX, dmissAutoY = dmissAutoY, diffmissFilter = diffmissFilter) #> ℹ 0 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> 0 variants removed due to missing genotype data (--geno). #> 3 variants removed due to minor allele threshold(s) #> • In cases,  0 variants removed due to Hardy-Weinberg exact test. #> • In controls,  0 variants removed due to Hardy-Weinberg exact test. #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpcRh9ZZ prefixed as filtered_temp2 #> ℹ There are no monomorphic SNPs. #> ℹ No SNP with differential missingness between cases and controls. #> ✔ Output PLINK files prefixed as ,Preimpute_Final, with passed SNPs are saved in ResultDir. #> ℹ Input file has 20353 SNPs. #> ℹ Output file has 20350 SNPs after filtering."},{"path":"/articles/preimputationQC.html","id":"final-summary-of-final-qc-ed-dataset-","dir":"Articles","previous_headings":"","what":"Final Summary of final Qc-ed dataset.","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"","code":"PlinkSummary(ResultDir,ResultDir,foutput) #> ℹ Dataset: Preimpute_Final #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 124 #> ℹ Number of females: 150 #> ℹ This is case-control data #> ℹ Number of cases: 106 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 52 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 54 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 11 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #> ℹ Total number of SNPs: 20350 #> ℹ Total number of samples: 274"},{"path":"/articles/preimputationQC.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"using GXwasR package /following pipeline study, please cite :","code":"citation(\"GXwasR\") #> To cite package 'GXwasR' in publications use: #>  #>   Bose B, Blostein F, Kim J, Winters J, Actkins KV, Mayer D, Congivaram H, Niarchou M, Edwards DV, Davis #>   LK, Stranger BE (2025). \"GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on #>   Complex Traits.\" _medRxiv 2025.06.10.25329327_. doi:10.1101/2025.06.10.25329327 #>   <https://doi.org/10.1101/2025.06.10.25329327>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Article{, #>     title = {GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on Complex Traits}, #>     author = {Banabithi Bose and Freida Blostein and Jeewoo Kim and Jessica Winters and Ky’Era V. Actkins and David Mayer and Harrsha Congivaram and Maria Niarchou and Digna Velez Edwards and Lea K. Davis and Barbara E. Stranger}, #>     journal = {medRxiv 2025.06.10.25329327}, #>     year = {2025}, #>     doi = {10.1101/2025.06.10.25329327}, #>   }"},{"path":"/articles/preimputationQC.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"GXwasR package (Bose, Blostein, Kim et al., 2025) made possible thanks : R (R Core Team, 2025) BiocStyle (Oleś, 2025) knitr (Xie, 2025) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux et al., 2024) sessioninfo (Wickham, Chang, Flight et al., 2025) testthat (Wickham, 2011) package developed using biocthis. R session information.","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       macOS Sequoia 15.6 #>  system   aarch64, darwin24.4.0 #>  ui       unknown #>  language (EN) #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       America/New_York #>  date     2025-08-08 #>  pandoc   3.6.3 @ /Applications/Positron.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown) #>  quarto   1.7.33 @ /usr/local/bin/quarto #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [2] CRAN (R 4.5.0) #>  backports              1.5.0      2024-05-23 [2] CRAN (R 4.5.1) #>  bibtex                 0.5.1      2023-01-26 [2] CRAN (R 4.5.0) #>  bigassertr             0.1.7      2025-06-27 [2] CRAN (R 4.5.1) #>  bigparallelr           0.3.2      2021-10-02 [2] CRAN (R 4.5.0) #>  bigsnpr                1.12.18    2024-11-26 [2] CRAN (R 4.5.1) #>  bigsparser             0.7.3      2024-09-06 [2] CRAN (R 4.5.1) #>  bigstatsr              1.6.2      2025-07-29 [2] CRAN (R 4.5.1) #>  Biobase                2.68.0     2025-04-15 [2] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [2] Bioconduc~ #>  BiocIO                 1.18.0     2025-04-15 [2] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [2] CRAN (R 4.5.0) #>  BiocParallel           1.42.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  BiocStyle              2.36.0     2025-04-15 [2] Bioconduc~ #>  Biostrings             2.76.0     2025-04-15 [2] Bioconduc~ #>  bit                    4.6.0      2025-03-06 [2] CRAN (R 4.5.1) #>  bit64                  4.6.0-1    2025-01-16 [2] CRAN (R 4.5.1) #>  bitops                 1.0-9      2024-10-03 [2] CRAN (R 4.5.0) #>  brio                   1.1.5      2024-04-24 [2] CRAN (R 4.5.1) #>  broom                  1.0.9      2025-07-28 [2] CRAN (R 4.5.1) #>  BSgenome               1.76.0     2025-04-15 [2] Bioconduc~ #>  cachem                 1.1.0      2024-05-16 [2] CRAN (R 4.5.0) #>  calibrate              1.7.7      2020-06-19 [2] CRAN (R 4.5.0) #>  callr                  3.7.6      2024-03-25 [2] CRAN (R 4.5.0) #>  car                    3.1-3      2024-09-27 [2] CRAN (R 4.5.0) #>  carData                3.0-5      2022-01-06 [2] CRAN (R 4.5.0) #>  cli                    3.6.5      2025-04-23 [2] CRAN (R 4.5.0) #>  codetools              0.2-20     2024-03-31 [4] CRAN (R 4.5.1) #>  cowplot                1.2.0      2025-07-07 [2] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [2] CRAN (R 4.5.0) #>  curl                   6.4.0      2025-06-22 [2] CRAN (R 4.5.1) #>  data.table             1.17.8     2025-07-10 [2] CRAN (R 4.5.1) #>  DelayedArray           0.34.1     2025-04-17 [2] Bioconduc~ #>  devtools             * 2.4.5      2022-10-11 [3] CRAN (R 4.5.0) #>  digest                 0.6.37     2024-08-19 [2] CRAN (R 4.5.0) #>  doParallel             1.0.17     2022-02-07 [2] CRAN (R 4.5.0) #>  doRNG                  1.8.6.2    2025-04-02 [2] CRAN (R 4.5.0) #>  doSNOW                 1.0.20     2022-02-04 [2] CRAN (R 4.5.0) #>  dplyr                  1.1.4      2023-11-17 [2] CRAN (R 4.5.0) #>  ellipsis               0.3.2      2021-04-29 [3] CRAN (R 4.5.0) #>  evaluate               1.0.4      2025-06-18 [2] CRAN (R 4.5.1) #>  farver                 2.1.2      2024-05-13 [2] CRAN (R 4.5.0) #>  fastmap                1.2.0      2024-05-15 [2] CRAN (R 4.5.0) #>  flock                  0.7        2016-11-12 [2] CRAN (R 4.5.1) #>  foreach                1.5.2      2022-02-02 [2] CRAN (R 4.5.0) #>  Formula                1.2-5      2023-02-24 [2] CRAN (R 4.5.0) #>  fs                     1.6.6      2025-04-12 [2] CRAN (R 4.5.0) #>  gdsfmt                 1.44.1     2025-07-09 [2] Bioconduc~ #>  generics               0.1.4      2025-05-09 [2] CRAN (R 4.5.0) #>  GenomeInfoDb           1.44.1     2025-07-23 [2] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-04-21 [2] Bioconductor #>  GenomicAlignments      1.44.0     2025-04-15 [2] Bioconduc~ #>  GenomicRanges          1.60.0     2025-04-15 [2] Bioconduc~ #>  ggplot2                3.5.2      2025-04-09 [2] CRAN (R 4.5.0) #>  ggpubr                 0.6.1      2025-06-27 [2] CRAN (R 4.5.1) #>  ggrepel                0.9.6      2024-09-07 [2] CRAN (R 4.5.1) #>  ggsignif               0.6.4      2022-10-13 [2] CRAN (R 4.5.0) #>  glue                   1.8.0      2024-09-30 [2] CRAN (R 4.5.0) #>  gridExtra              2.3        2017-09-09 [2] CRAN (R 4.5.0) #>  gtable                 0.3.6      2024-10-25 [2] CRAN (R 4.5.0) #>  GXwasR               * 0.99.0     2025-08-08 [1] Bioconductor #>  hms                    1.1.3      2023-03-21 [2] CRAN (R 4.5.0) #>  htmltools              0.5.8.1    2024-04-04 [2] CRAN (R 4.5.0) #>  htmlwidgets            1.6.4      2023-12-06 [2] CRAN (R 4.5.0) #>  httpuv                 1.6.16     2025-04-16 [2] CRAN (R 4.5.1) #>  httr                   1.4.7      2023-08-15 [2] CRAN (R 4.5.0) #>  IRanges                2.42.0     2025-04-15 [2] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [2] CRAN (R 4.5.0) #>  jsonlite               2.0.0      2025-03-27 [2] CRAN (R 4.5.0) #>  knitr                  1.50       2025-03-16 [2] CRAN (R 4.5.0) #>  labeling               0.4.3      2023-08-29 [2] CRAN (R 4.5.0) #>  later                  1.4.2      2025-04-08 [2] CRAN (R 4.5.1) #>  lattice                0.22-7     2025-04-02 [4] CRAN (R 4.5.1) #>  lifecycle              1.0.4      2023-11-07 [2] CRAN (R 4.5.0) #>  lubridate              1.9.4      2024-12-08 [2] CRAN (R 4.5.1) #>  magrittr             * 2.0.3      2022-03-30 [2] CRAN (R 4.5.0) #>  MASS                   7.3-65     2025-02-28 [4] CRAN (R 4.5.1) #>  mathjaxr               1.8-0      2025-04-30 [2] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [4] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [2] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [2] CRAN (R 4.5.0) #>  memoise                2.0.1      2021-11-26 [2] CRAN (R 4.5.0) #>  mgcv                   1.9-3      2025-04-04 [4] CRAN (R 4.5.1) #>  mime                   0.13       2025-03-17 [2] CRAN (R 4.5.0) #>  miniUI                 0.1.2      2025-04-17 [3] CRAN (R 4.5.0) #>  nlme                   3.1-168    2025-03-31 [4] CRAN (R 4.5.1) #>  pillar                 1.11.0     2025-07-04 [2] CRAN (R 4.5.1) #>  pkgbuild               1.4.8      2025-05-26 [2] CRAN (R 4.5.0) #>  pkgconfig              2.0.3      2019-09-22 [2] CRAN (R 4.5.0) #>  pkgdev                 0.1.0.9060 2025-08-04 [2] Github (dieghernan/pkgdev@e56f2a8) #>  pkgload                1.4.0      2024-06-28 [2] CRAN (R 4.5.0) #>  plyr                   1.8.9      2023-10-02 [2] CRAN (R 4.5.1) #>  plyranges              1.28.0     2025-04-15 [2] Bioconduc~ #>  polynom                1.4-1      2022-04-11 [2] CRAN (R 4.5.0) #>  poolr                  1.2-0      2025-05-07 [2] CRAN (R 4.5.0) #>  prettyunits            1.2.0      2023-09-24 [2] CRAN (R 4.5.0) #>  printr               * 0.3        2023-03-08 [2] CRAN (R 4.5.0) #>  processx               3.8.6      2025-02-21 [2] CRAN (R 4.5.1) #>  profvis                0.4.0      2024-09-20 [3] CRAN (R 4.5.0) #>  progress               1.2.3      2023-12-06 [2] CRAN (R 4.5.0) #>  promises               1.3.3      2025-05-29 [2] CRAN (R 4.5.0) #>  ps                     1.9.1      2025-04-12 [2] CRAN (R 4.5.1) #>  purrr                  1.1.0      2025-07-10 [2] CRAN (R 4.5.1) #>  qqman                  0.1.9      2023-08-23 [2] CRAN (R 4.5.0) #>  R.methodsS3            1.8.2      2022-06-13 [2] CRAN (R 4.5.0) #>  R.oo                   1.27.1     2025-05-02 [2] CRAN (R 4.5.0) #>  R.utils                2.13.0     2025-02-24 [2] CRAN (R 4.5.0) #>  R6                     2.6.1      2025-02-15 [2] CRAN (R 4.5.0) #>  ragg                   1.4.0      2025-04-10 [3] CRAN (R 4.5.0) #>  rbibutils              2.3        2024-10-04 [2] CRAN (R 4.5.1) #>  RColorBrewer           1.1-3      2022-04-03 [2] CRAN (R 4.5.0) #>  Rcpp                   1.1.0      2025-07-02 [2] CRAN (R 4.5.1) #>  RCurl                  1.98-1.17  2025-03-22 [2] CRAN (R 4.5.0) #>  Rdpack                 2.6.4      2025-04-09 [2] CRAN (R 4.5.0) #>  RefManageR           * 1.4.0      2022-09-30 [2] CRAN (R 4.5.1) #>  regioneR               1.40.1     2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  remotes                2.5.0      2024-03-17 [2] CRAN (R 4.5.0) #>  restfulr               0.0.16     2025-06-27 [2] CRAN (R 4.5.1) #>  rjson                  0.2.23     2024-09-16 [2] CRAN (R 4.5.0) #>  rlang                  1.1.6      2025-04-11 [2] CRAN (R 4.5.0) #>  rmarkdown            * 2.29       2024-11-04 [2] CRAN (R 4.5.0) #>  rmio                   0.4.0      2022-02-17 [2] CRAN (R 4.5.0) #>  rngtools               1.5.2      2021-09-20 [2] CRAN (R 4.5.0) #>  rprojroot              2.1.0      2025-07-12 [2] CRAN (R 4.5.1) #>  Rsamtools              2.24.0     2025-04-15 [2] Bioconduc~ #>  rstatix                0.7.2      2023-02-01 [2] CRAN (R 4.5.0) #>  rtracklayer            1.68.0     2025-04-15 [2] Bioconduc~ #>  S4Arrays               1.8.1      2025-06-01 [2] Bioconductor 3.21 (R 4.5.0) #>  S4Vectors              0.46.0     2025-04-15 [2] Bioconduc~ #>  scales                 1.4.0      2025-04-24 [2] CRAN (R 4.5.0) #>  seqminer               9.7        2024-10-02 [2] CRAN (R 4.5.1) #>  sessioninfo          * 1.2.3      2025-02-05 [2] CRAN (R 4.5.1) #>  shiny                  1.11.1     2025-07-03 [2] CRAN (R 4.5.1) #>  snow                   0.4-4      2021-10-27 [2] CRAN (R 4.5.0) #>  SNPRelate              1.42.0     2025-04-15 [2] Bioconduc~ #>  SparseArray            1.8.1      2025-07-23 [2] Bioconduc~ #>  stringi                1.8.7      2025-03-27 [2] CRAN (R 4.5.0) #>  stringr                1.5.1      2023-11-14 [2] CRAN (R 4.5.0) #>  sumFREGAT              1.2.5      2022-06-07 [2] CRAN (R 4.5.1) #>  SummarizedExperiment   1.38.1     2025-04-30 [2] Bioconductor 3.21 (R 4.5.0) #>  sys                    3.4.3      2024-10-04 [2] CRAN (R 4.5.0) #>  systemfonts            1.2.3      2025-04-30 [2] CRAN (R 4.5.0) #>  testthat             * 3.2.3      2025-01-13 [2] CRAN (R 4.5.1) #>  textshaping            1.0.1      2025-05-01 [3] CRAN (R 4.5.0) #>  tibble                 3.3.0      2025-06-08 [2] CRAN (R 4.5.0) #>  tidyr                  1.3.1      2024-01-24 [2] CRAN (R 4.5.1) #>  tidyselect             1.2.1      2024-03-11 [2] CRAN (R 4.5.0) #>  timechange             0.3.0      2024-01-18 [2] CRAN (R 4.5.1) #>  tzdb                   0.5.0      2025-03-15 [2] CRAN (R 4.5.1) #>  UCSC.utils             1.4.0      2025-04-15 [2] Bioconduc~ #>  urlchecker             1.0.1      2021-11-30 [3] CRAN (R 4.5.0) #>  usethis              * 3.1.0      2024-11-26 [2] CRAN (R 4.5.0) #>  vctrs                  0.6.5      2023-12-01 [2] CRAN (R 4.5.0) #>  vroom                  1.6.5      2023-12-05 [2] CRAN (R 4.5.1) #>  withr                  3.0.2      2024-10-28 [2] CRAN (R 4.5.0) #>  xfun                   0.52       2025-04-02 [2] CRAN (R 4.5.0) #>  XML                    3.99-0.18  2025-01-01 [2] CRAN (R 4.5.0) #>  xml2                   1.3.8      2025-03-14 [2] CRAN (R 4.5.1) #>  xtable                 1.8-4      2019-04-21 [2] CRAN (R 4.5.0) #>  XVector                0.48.0     2025-04-15 [2] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [2] CRAN (R 4.5.0) #>  #>  [1] /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpcRh9ZZ/temp_libpath4e4d53c96c8f #>  [2] /Users/mayerdav/Library/R/arm64/4.5/library #>  [3] /opt/homebrew/lib/R/4.5/site-library #>  [4] /opt/homebrew/Cellar/r/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/preimputationQC.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"Pre-impute Quality Control Pipeline Using GXwasR","text":"vignette generated using BiocStyle (Oleś, 2025) knitr (Xie, 2025) rmarkdown (Allaire, Xie, Dervieux et al., 2024) running behind scenes. Citations made RefManageR (McLean, 2017). [1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.29. 2024. URL: https://github.com/rstudio/rmarkdown. [2] B. Bose, F. Blostein, J. Kim, et al. “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits”. : medRxiv 2025.06.10.25329327 (2025). DOI: 10.1101/2025.06.10.25329327. [3] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [4] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.36.0. 2025. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [5] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2025. URL: https://www.R-project.org/. [6] H. Wickham. “testthat: Get Started Testing”. : R Journal 3 (2011), pp. 5–10. URL: https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. [7] H. Wickham, W. Chang, R. Flight, et al. sessioninfo: R Session Information. R package version 1.2.3. 2025. DOI: 10.32614/CRAN.package.sessioninfo. URL: https://CRAN.R-project.org/package=sessioninfo. [8] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.50. 2025. URL: https://yihui.org/knitr/.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Banabithi Bose. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bose B, Blostein F, Kim J, Winters J, Actkins KV, Mayer D, Congivaram H, Niarchou M, Edwards DV, Davis LK, Stranger (2025). “GXwasR: Toolkit Investigating Sex-Differentiated Genetic Effects Complex Traits.” medRxiv 2025.06.10.25329327. doi:10.1101/2025.06.10.25329327.","code":"@Article{,   title = {GXwasR: A Toolkit for Investigating Sex-Differentiated Genetic Effects on Complex Traits},   author = {Banabithi Bose and Freida Blostein and Jeewoo Kim and Jessica Winters and Ky’Era V. Actkins and David Mayer and Harrsha Congivaram and Maria Niarchou and Digna Velez Edwards and Lea K. Davis and Barbara E. Stranger},   journal = {medRxiv 2025.06.10.25329327},   year = {2025},   doi = {10.1101/2025.06.10.25329327}, }"},{"path":"/index.html","id":"gxwasr-","dir":"","previous_headings":"","what":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"tool conducting sex-aware quality control, association analysis, testing various models sex-dependent genetic effects complex traits. package implements various statistical genetics models Genome-Wide Association (GWA) X-Chromosome Wide Association (XWA) analyses sex-combined sex-stratified way considering X-Chromosome Inactivation (XCI) pattern. addition association analysis, package also enables testing sex differences genetic effects, including implementation specific models applying best practices additional quality control (QC) genetic data required tests. package includes twenty-five different functions six different categories (-F) enable comprehensive pipeline sex-aware genetic association analysis common variants unrelated individuals. ()Pre-imputation QC: QCsnp(); QCsample(); AncestryCheck(); SexCheck() (B)Post-imputation QC: QCsnp(); QCsample2(); Xhwe(); MAFdiffSexControl(); FilterRegion() (C)Sex-combined sex-stratified GWAS XWAS: GXwasR() (D)Sex-differential test: SexDiff(); SexDiffZscore(); DiffZeroOne() (E)High level analysis: TestXGene(); MetaGWAS(); ComputePRS(); GeneticCorrBT(); EstimateHerit() (F)Utility Functions: FilterPlinkSample(); ComputeGeneticPC(); ClumpLD(); GetMFPlink(); plinkVCF(); MergeRegion(); FilterAllele(); PlinkSummary()","code":""},{"path":"/index.html","id":"package-installation","dir":"","previous_headings":"","what":"📦 Installation","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"can install development version GXwasR GitHub :","code":"# install.packages(\"pak\") pak::pak(\"boseb/GXwasR\")"},{"path":"/index.html","id":"external-dependencies","dir":"","previous_headings":"📦 Installation","what":"External Dependencies","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"package requires PLINK GCTA, two widely used command-line tools genetic data analysis: PLINK: toolset genome association linkage analysis. GCTA: Genome-wide Complex Trait Analysis, used estimating genetic relationships variance components. Please follow instructions ensure tools installed available system use.","code":""},{"path":"/index.html","id":"plink","dir":"","previous_headings":"📦 Installation > External Dependencies","what":"PLINK","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"package depends PLINK command-line tool (version 1.9). PLINK must installed separately made available system. PLINK bundled package must either: (preferred) specified via PLINK_PATH environment variable, system PATH.","code":""},{"path":"/index.html","id":"wrench-plink-installation-instructions","dir":"","previous_headings":"📦 Installation > External Dependencies > PLINK","what":"🔧 PLINK Installation Instructions","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"Binaries major platforms can downloaded : PLINK v1.9 Detailed, platform-specific setup instructions can found INSTALL file included package.","code":""},{"path":"/index.html","id":"compass-configuring-the-plink-path","dir":"","previous_headings":"📦 Installation > External Dependencies > PLINK","what":"🧭 Configuring the PLINK Path","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"package attempt locate PLINK using: PLINK_PATH environment variable, set. system path, via Sys.(\"plink\"). PLINK found, error raised guidance resolve . can manually set path R session: persistent configuration, can add line .Renviron file: verify PLINK discoverable:","code":"Sys.setenv(PLINK_PATH = \"/path/to/plink\") PLINK_PATH=/path/to/plink plink_path <- Sys.getenv(\"PLINK_PATH\", unset = Sys.which(\"plink\")) if (!file.exists(plink_path) || !nzchar(plink_path)) {   stop(\"PLINK binary not found. Please install PLINK and/or set the PLINK_PATH environment variable.\") }"},{"path":"/index.html","id":"gcta","dir":"","previous_headings":"📦 Installation > External Dependencies","what":"GCTA","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"package also utilizes GCTA command-line tool (Genome-wide Complex Trait Analysis). GCTA must installed separately made available system. GCTA bundled package must either: (preferred) specified via GCTA_PATH environment variable, system PATH.","code":""},{"path":"/index.html","id":"wrench-gcta-installation-instructions","dir":"","previous_headings":"📦 Installation > External Dependencies > GCTA","what":"🔧 GCTA Installation Instructions","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"Binaries major platforms can downloaded GCTA website. Detailed, platform-specific setup instructions can found INSTALL file included package.","code":""},{"path":"/index.html","id":"compass-configuring-the-gcta-path","dir":"","previous_headings":"📦 Installation > External Dependencies > GCTA","what":"🧭 Configuring the GCTA Path","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"package attempt locate GCTA using: GCTA_PATH environment variable, set. system path, via Sys.(\"gcta64\"). GCTA found, error raised guidance resolve . can manually set path R session: persistent configuration, can add line .Renviron file: verify GCTA discoverable:","code":"Sys.setenv(GCTA_PATH = \"/path/to/gcta64\") GCTA_PATH=/path/to/gcta64 gcta_path <- Sys.getenv(\"GCTA_PATH\", unset = Sys.which(\"gcta64\")) if (!file.exists(gcta_path) || !nzchar(gcta_path)) {   stop(\"GCTA binary not found. Please install GCTA and/or set the GCTA_PATH environment variable.\") }"},{"path":"/index.html","id":"warning-macos-security-warning","dir":"","previous_headings":"📦 Installation > External Dependencies","what":"⚠️ macOS Security Warning","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"macOS may block applications launching downloaded internet aren’t explicitly approved Apple. see warning like: can still run app following steps: Open System Settings (System Preferences older macOS versions). Go Privacy & Security. Scroll Security section. see message blocked app — click “Open Anyway”. Confirm prompted. details, see Apple’s official guide: https://support.apple.com/en-us/102445","code":"\"“(PLINK/GCTA)” can’t be opened because Apple cannot check it for malicious software.\""},{"path":"/index.html","id":"example-analysis","dir":"","previous_headings":"","what":"Example Analysis","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"Run genome-wide association study (GWAS) X-chromosome-wide association study (XWAS):","code":"library(GXwasR) #>  #> GXwasR: Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data #> Version 0.99.0 () installed #> Author: c( #>     person(given = \"Banabithi\", #>            family = \"Bose\", #>            role = c(\"cre\", \"aut\"), #>            email = \"banabithi.bose@gmail.com\", #>            comment = c(ORCID = \"0000-0003-0842-8768\")) #>            ) #> Maintainer: Banabithi Bose <banabithi.bose@gmail.com> #> Tutorial: https://github.com #> Use citation(\"GXwasR\") to know how to cite this work. ResultGXwas <- GXwas(     DataDir = GXwasR:::GXwasR_data(),     ResultDir = tempdir(),     finput = \"GXwasR_example\",     trait = \"binary\",     xmodel = \"FMstratified\",     covarfile = NULL,     sex = TRUE,     xsex = FALSE,     combtest = \"fisher.method\",     MF.p.corr = \"none\",     snp_pval = 1e-08,     plot.jpeg = FALSE,     suggestiveline = 5,     genomewideline = 7.3,     MF.mc.cores = 1,     ncores = 0 ) #> • Running FMstratified model #> Using PLINK v1.9.0-b.7.7 64-bit (22 Oct 2024) #> • Stratified test is running for females #> • Stratified test is running for males #> ℹ If you want parallel computation, please provide non-zero value for argument ncores. #> ℹ Plots are initiated. #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpMepwIu/Stratified_GWAS.png #> This message is displayed once every 8 hours. #> ℹ Saving plot to #> /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpMepwIu/Stratified_XWAS.png #> Three data frames have been created and saved: #> • CombinedWAS #> • MaleWAS #> • FemaleWAS #> ℹ You can find them in the directory: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpMepwIu ResultGXwas #> $CombinedWAS #> Key: <SNP> #>               SNP   CHR        BP          P #>            <char> <int>     <int>      <num> #>     1: rs10000405     4  47716881 0.97684636 #>     2: rs10000452     4  63234460 0.69697101 #>     3: rs10000465     4 120835814 0.53783097 #>     4: rs10000605     4  13875675 0.72216716 #>     5: rs10000675     4 121520624 0.82462199 #>    ---                                       #> 23089:  rs9997486     4  72333579 0.50805172 #> 23090:  rs9997787     4  37866912 0.34794418 #> 23091:  rs9998003     4 187293933 0.06428729 #> 23092:  rs9998694     4  59730463 0.08565972 #> 23093:  rs9999463     4 166351966 0.42240473 #>  #> $MaleWAS #>          CHR         SNP        BP     A1   TEST NMISS     BETA     SE     L95 #>        <int>      <char>     <int> <char> <char> <int>    <num>  <num>   <num> #>     1:     1 rs143773730     73841      T    ADD   125 -0.07890 0.2643 -0.5968 #>     2:     1 rs147281566    775125      T    ADD   125 -0.39590 1.2380 -2.8230 #>     3:     1  rs35854196    863863      A    ADD   125  1.05000 0.8858 -0.6864 #>     4:     1  rs12041521   1109154      A    ADD   125 -0.44510 0.3387 -1.1090 #>     5:     1 rs148527527   1127860      G    ADD   125  1.67700 0.6864  0.3317 #>    ---                                                                         #> 24135:    23 rs113460214 154103785      G    ADD   125  2.00100 1.1110 -0.1771 #> 24136:    23   rs5945265 154196387      A    ADD   125 -0.23380 0.5514 -1.3150 #> 24137:    23 rs191928457 154429518      C    ADD   125  1.44900 1.1690 -0.8426 #> 24138:    24   rs9785994  16222561      T    ADD    36 -0.47000 0.9811 -2.3930 #> 24139:    24 rs201216761  22113254      A    ADD    38 -0.09353 0.8447 -1.7490 #>           U95    STAT       P #>         <num>   <num>   <num> #>     1: 0.4390 -0.2986 0.76530 #>     2: 2.0310 -0.3197 0.74920 #>     3: 2.7860  1.1850 0.23600 #>     4: 0.2188 -1.3140 0.18890 #>     5: 3.0220  2.4430 0.01456 #>    ---                        #> 24135: 4.1790  1.8010 0.07177 #> 24136: 0.8469 -0.4241 0.67150 #> 24137: 3.7410  1.2390 0.21520 #> 24138: 1.4530 -0.4791 0.63190 #> 24139: 1.5620 -0.1107 0.91180 #>  #> $FemaleWAS #>          CHR         SNP        BP     A1   TEST NMISS    BETA     SE     L95 #>        <int>      <char>     <int> <char> <char> <int>   <num>  <num>   <num> #>     1:     1 rs143773730     73841      T    ADD   151  0.3459 0.2818 -0.2064 #>     2:     1 rs147281566    775125      T    ADD   151  0.1568 0.9290 -1.6640 #>     3:     1  rs35854196    863863      A    ADD   151 -0.1446 0.7282 -1.5720 #>     4:     1 rs115490086    928969      T    ADD   151  0.5649 1.4240 -2.2270 #>     5:     1  rs12041521   1109154      A    ADD   151 -0.6697 0.3314 -1.3190 #>    ---                                                                        #> 24355:    23   rs2097214 153652198      G    ADD   151 -0.4137 0.5158 -1.4250 #> 24356:    23 rs113519705 153715153      T    ADD   151  0.2942 0.3751 -0.4409 #> 24357:    23 rs113460214 154103785      G    ADD   151 -0.7779 0.5943 -1.9430 #> 24358:    23   rs5945265 154196387      A    ADD   151  0.5425 0.3360 -0.1160 #> 24359:    23 rs191928457 154429518      C    ADD   151 -1.4460 1.0830 -3.5690 #>             U95    STAT       P #>           <num>   <num>   <num> #>     1:  0.89820  1.2270 0.21970 #>     2:  1.97800  0.1688 0.86590 #>     3:  1.28300 -0.1985 0.84260 #>     4:  3.35700  0.3966 0.69170 #>     5: -0.02008 -2.0210 0.04332 #>    ---                          #> 24355:  0.59740 -0.8019 0.42260 #> 24356:  1.02900  0.7844 0.43280 #> 24357:  0.38700 -1.3090 0.19060 #> 24358:  1.20100  1.6150 0.10640 #> 24359:  0.67610 -1.3360 0.18170"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data","text":"Please note GXwasR project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/AncestryCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"AncestryCheck: Evaluation of the samples' ancestry label. — AncestryCheck","title":"AncestryCheck: Evaluation of the samples' ancestry label. — AncestryCheck","text":"function displays result ancestry analysis color-coded scatter plot first two principal components samples reference populations study population. Specifically, compares study samples' ancestry labels panel representing reference population, also flags outlier samples respect chosen reference population. Users required provide SNPs ids rsids input PLINK files. function first filters reference study data non--T G-C SNPs. next conducts LD pruning, fixes chromosome mismatch reference study datasets, checks allele flips, updates locations, flips alleles. two datasets joined, resulting genotype dataset subjected Principal Component Analysis (PCA). detection population structure level reference dataset can accomplished using PCA combined genotyping panel. instance, center European reference samples determined using data principal components 1 2 (median(PC1 europeanRef), median(PC2 europeanRef)). determines European reference samples' maximum Euclidean distance (maxDist) center. study samples non-European, outliers, whose Euclidean distances center equal radius r= outlier threshold* maxDist. function utilizes HapMap phase 3 data NCBI 36 1000GenomeIII CGRCh37. study reference datasets genome build. , users need lift one datasets build.","code":""},{"path":"/reference/AncestryCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AncestryCheck: Evaluation of the samples' ancestry label. — AncestryCheck","text":"","code":"AncestryCheck(   DataDir,   ResultDir = tempdir(),   finput,   reference = c(\"HapMapIII_NCBI36\", \"ThousandGenome\"),   filterSNP = TRUE,   studyLD = TRUE,   studyLD_window_size = 50,   studyLD_step_size = 5,   studyLD_r2_threshold = 0.02,   referLD = FALSE,   referLD_window_size = 50,   referLD_step_size = 5,   referLD_r2_threshold = 0.02,   highLD_regions,   study_pop,   outlier = FALSE,   outlierOf = \"EUR\",   outlier_threshold = 3 )"},{"path":"/reference/AncestryCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AncestryCheck: Evaluation of the samples' ancestry label. — AncestryCheck","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files study samples. reference Boolean value,'HapMapIII_NCBI36' 'ThousandGenome', specifying Hapmap Phase3 (3 Consortium 2010)  1000 Genomes phase III (1000 Genomes Project Consortium 2015)  reference population, respectively. default 'HapMapIII_NCBI36'. filterSNP Boolean value, TRUE FALSE filtering SNPs. default TRUE. recommend setting FALSE users sure join study reference samples directly. studyLD Boolean value, TRUE FALSE applying linkage disequilibrium (LD)-based filtering study genotype data. studyLD_window_size Integer value, specifying window size variant count kilobase LD-based filtering variants study data. studyLD_step_size Integer value, specifying variant count shift window end step LD filtering study data. studyLD_r2_threshold Numeric value 0 1 pairwise \\(r^2\\) threshold LD-based filtering study data. referLD Boolean value, 'TRUE' 'FALSE' applying linkage disequilibrium (LD)-based filtering reference genotype data. referLD_window_size Integer value, specifying window size variant count kilobase LD-based filtering variants reference data. referLD_step_size Integer value, specifying variant count shift window end step LD filtering reference data. referLD_r2_threshold Numeric value 0 1 pairwise \\(r^2\\) threshold LD-based filtering reference data. highLD_regions dataframe known high LD regions (Anderson et al. 2010)  provided package. study_pop dataframe containing two columns study first column, sample ID (.e., IID) second column, ancestry label. outlier Boolean value, TRUE FALSE, specifying outlier detection performed . outlierOf Chracter string, specifying reference ancestry name detecting outlier samples. default \"outlierOf = \"EUR\". outlier_threshold Numeric value, specifying threshold used detect outlier samples. threshold multiplied Eucledean distance center PC1 PC2 maximum Euclidean distance reference samples. Study samples outside distance considered outlier. default 3.","code":""},{"path":"/reference/AncestryCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"AncestryCheck: Evaluation of the samples' ancestry label. — AncestryCheck","text":"list containing three data frames: one IDs outlier samples (Outlier_samples), another samples annotated predicted ancestry (Samples_with_predicted_ancestry), one IDs non-outlier samples (Non_outlier_samples). PCA plot also returned.","code":""},{"path":"/reference/AncestryCheck.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AncestryCheck: Evaluation of the samples' ancestry label. — AncestryCheck","text":"1000 Genomes Project Consortium T (2015). “global reference human genetic variation.” Nature, 526, 68–74. doi:10.1038/nature15393 . 3 Consortium TIH (2010). “Integrating common rare genetic variation diverse human populations.” Nature, 467, 52–58. doi:10.1038/nature09298 . Anderson CA, Pettersson FH, Clarke GM, Cardon LR, Morris AP, Zondervan KT (2010). “Data quality control genetic case-control association studies.” Nature Protocols, 5(9), 1564–1573. doi:10.1038/nprot.2010.116 , http://www.ncbi.nlm.nih.gov/pubmed/21085122.","code":""},{"path":"/reference/AncestryCheck.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AncestryCheck: Evaluation of the samples' ancestry label. — AncestryCheck","text":"Banabithi Bose","code":""},{"path":"/reference/AncestryCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AncestryCheck: Evaluation of the samples' ancestry label. — AncestryCheck","text":"","code":"data(\"highLD_hg19\", package = \"GXwasR\") data(\"example_data_study_sample_ancestry\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" reference <- \"HapMapIII_NCBI36\" highLD_regions <- highLD_hg19 study_pop <- example_data_study_sample_ancestry # PreimputeEX studyLD_window_size <- 50 studyLD_step_size <- 5 studyLD_r2_threshold <- 0.02 filterSNP <- TRUE studyLD <- FALSE referLD <- FALSE referLD_window_size <- 50 referLD_step_size <- 5 referLD_r2_threshold <- 0.02 outlier <- TRUE outlier_threshold <- 3 x <- AncestryCheck(     DataDir = DataDir, ResultDir = ResultDir, finput = finput,     reference = reference, highLD_regions = highLD_regions,     study_pop = study_pop, studyLD = studyLD, referLD = referLD,     outlierOf = \"EUR\", outlier = outlier, outlier_threshold = outlier_threshold ) #> ℹ 'HapMapIII_NCBI36' reference data found at /Users/mayerdav/Downloads/HapMapIII_NCBI36. #> This message is displayed once every 8 hours. #> Using PLINK v1.9.0-b.7.7 64-bit (22 Oct 2024) #> This message is displayed once every 8 hours. #> 4214 ambiguous SNPs removed from study data. #> 111854 ambiguous SNPs removed from reference data. #> ! LD pruning is recommended for reference dataset. Set referLD = TRUE. #> ! LD pruning is recommended for study dataset. Set studyLD = TRUE. #>  #> ℹ Number of overlapping SNPs between study and reference data using rsID: 3722 #> ℹ No allele flips between study and reference data. #> ℹ 20 samples are outliers of selected reference population. #> ℹ 168 samples are NOT outliers of selected reference population."},{"path":"/reference/ClumpLD.html","id":null,"dir":"Reference","previous_headings":"","what":"ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs — ClumpLD","title":"ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs — ClumpLD","text":"function, based empirical estimations linkage disequilibrium SNPs, groups SNP-based results across one datasets analysis. approach can used two basic scenarios: () summarize top X single SNP findings genome-wide scan fewer clusters connected SNPs (.e., assess many independent loci associated). (ii) give researchers simple approach merge sets data multiple studies studies may used various marker sets genotyping. clumping process begins index SNPs significant threshold p1 yet clumped. creates clumps additional SNPs within specified kb index SNP linkage disequilibrium index SNP based r-squared threshold. Following , SNPs filtered based outcome SNP. method greedy (Purcell et al. 2007) , SNP , , appear one clump. P value ALLELES always, random, chosen first input file SNP appeared several input files SNPdata argument. Instead best p-value, function refer SNP strongest LD index best proxy. Based genotype data, SNP highest LD input files.","code":""},{"path":"/reference/ClumpLD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs — ClumpLD","text":"","code":"ClumpLD(   DataDir,   finput,   SNPdata,   ResultDir = tempdir(),   clump_p1,   clump_p2,   clump_r2,   clump_kb,   byCHR = TRUE,   clump_best = TRUE,   clump_index_first = TRUE )"},{"path":"/reference/ClumpLD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs — ClumpLD","text":"DataDir character string file path input PLINK binary files. finput Character string, specifying prefix input PLINK binary files used calculate linkage disequilibrium SNPs. actual genotype data may may dataset used generate summary statistics. file needs DataDir. SNPdata list R dataframes containing single multiple summary statistics SNP P (.e., p-values) mandatory column headers. columns present. ResultDir character string file path output files stored. default tempdir(). clump_p1 Numeric value, specifying significance threshold index SNPs. default 0.0001. clump_p2 Numeric value, specifying secondary significance threshold clumped SNPs. default 0.01 clump_r2 Numeric value, specifying LD threshold clumping. default 0.50. clump_kb Integer value, specifying physical distance threshold base-pair clumping. default 250. byCHR Boolean value, TRUE FALSE, specifying whether perform clumping chromosome-wise. clump_best Boolean value, TRUE FALSE, specifying whether select output best SNP clump. Default TRUE. clump_index_first Boolean value, TRUE FALSE, specifying whether force index SNP appear first clump. option typically TRUE clump_best TRUE. Default TRUE.","code":""},{"path":"/reference/ClumpLD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs — ClumpLD","text":"list two dataframes. BestClump: dataframe eight columns showing single best proxy SNP index SNP columns \"INDEX\"(Index SNP identifier), \"PSNP\"(Best proxy SNP), \"RSQ LD\"(r-squared) index proxy, \"KB\"(Physical distance index proxy), P(p-value proxy SNP), \"ALLELES\"(associated haplotypes index proxy SNP), \"F\"(file used clumping result came ). AllClump: dataframe eight columns providing detailed summary clump identified PLINK. includes \"INDEX_SNP\" (identifier index SNP represents clump), \"SNP\" (SNP reported, index SNP INDEX_SNP), \"DISTANCE\" (physical distance base pairs index SNP reported SNP, 0.0 indicating index ), \"RSQ\" (r-squared value showing degree linkage disequilibrium index SNP SNP clump), \"ALLELES\" (allele information, cases may appear misaligned data isn’t formatted expected), \"F\" (statistic indicator related association test, may NA applicable), \"P\" (p-value association test SNP), \"CHR\" (chromosome SNP located).","code":""},{"path":"/reference/ClumpLD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs — ClumpLD","text":"Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). “PLINK: Tool Set Whole-Genome Association Population-Based Linkage Analyses.” American Journal Human Genetics, 81(3), 559–575. doi:10.1086/519795 .","code":""},{"path":"/reference/ClumpLD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs — ClumpLD","text":"Banabithi Bose","code":""},{"path":"/reference/ClumpLD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClumpLD: Clumping SNPs using linkage disequilibrium between SNPs — ClumpLD","text":"","code":"data(\"Summary_Stat_Ex1\", package = \"GXwasR\") data(\"Summary_Stat_Ex2\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" SNPdata <- list(Summary_Stat_Ex1, Summary_Stat_Ex2) clump_p1 <- 0.0001 clump_p2 <- 0.001 clump_r2 <- 0.5 clump_kb <- 250 byCHR <- TRUE clumpedResult <- ClumpLD(     DataDir, finput, SNPdata, ResultDir, clump_p1,     clump_p2, clump_r2, clump_kb, byCHR ) #> • Processing summary statistics 1 #> • Processing summary statistics 2 #> • Running LD clumping for chromosome 1 #> ℹ No significant clump results for chromosome 1 #> • Running LD clumping for chromosome 2 #> ℹ No significant clump results for chromosome 2 #> • Running LD clumping for chromosome 3 #> ℹ No significant clump results for chromosome 3 #> • Running LD clumping for chromosome 4 #> ℹ No significant clump results for chromosome 4 #> • Running LD clumping for chromosome 5 #> ℹ No significant clump results for chromosome 5 #> • Running LD clumping for chromosome 6 #> ℹ No significant clump results for chromosome 6 #> • Running LD clumping for chromosome 7 #> ℹ No significant clump results for chromosome 7 #> • Running LD clumping for chromosome 8 #> ℹ No significant clump results for chromosome 8 #> • Running LD clumping for chromosome 9 #> ℹ No significant clump results for chromosome 9 #> • Running LD clumping for chromosome 10 #> ℹ No significant clump results for chromosome 10 #> • Running LD clumping for chromosome 23 #> • Running LD clumping for chromosome 24 #> ℹ No significant clump results for chromosome 24"},{"path":"/reference/ComputeGeneticPC.html","id":null,"dir":"Reference","previous_headings":"","what":"ComputeGeneticPC: Computing principal components from genetic relationship matrix — ComputeGeneticPC","title":"ComputeGeneticPC: Computing principal components from genetic relationship matrix — ComputeGeneticPC","text":"function performs principal components analysis (PCA) based variance-standardized relationship matrix (Purcell et al. 2007) . Top principal components generally used covariates association analysis regressions help correct population stratification","code":""},{"path":"/reference/ComputeGeneticPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ComputeGeneticPC: Computing principal components from genetic relationship matrix — ComputeGeneticPC","text":"","code":"ComputeGeneticPC(   DataDir,   ResultDir = tempdir(),   finput,   countPC = 10,   plotPC = TRUE,   highLD_regions = NULL,   ld_prunning = TRUE,   window_size = 50,   step_size = 5,   r2_threshold = 0.02 )"},{"path":"/reference/ComputeGeneticPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ComputeGeneticPC: Computing principal components from genetic relationship matrix — ComputeGeneticPC","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files. file needs DataDir. countPC Integer value, specifying number principal components. default 10. plotPC Boolean value, TRUE FALSE, specifying whether plot first two PCs. highLD_regions R dataframe genomic regions high LD using finding pruned SNPs plots. default NULL. ld_prunning Numeric value 0 1 pairwise \\(r^2\\) threshold LD-based filtering pruned SNPs plots. default 0.02. window_size Integer value, specifying window size variant count kilobase LD-based filtering. default 50. step_size Integer value, specifying variant count shift window end step LD filtering pruned SNPs plots. default 5. r2_threshold Numeric value 0 1 pairwise \\(r^2\\) threshold LD-based filtering pruned SNPs plots. default 0.02.","code":""},{"path":"/reference/ComputeGeneticPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ComputeGeneticPC: Computing principal components from genetic relationship matrix — ComputeGeneticPC","text":"dataframe genetic principal components. first two columns IID (.e., Individual Id) FID (.e., Family ID). columns PCs.","code":""},{"path":"/reference/ComputeGeneticPC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ComputeGeneticPC: Computing principal components from genetic relationship matrix — ComputeGeneticPC","text":"Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). “PLINK: Tool Set Whole-Genome Association Population-Based Linkage Analyses.” American Journal Human Genetics, 81(3), 559–575. doi:10.1086/519795 .","code":""},{"path":"/reference/ComputeGeneticPC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ComputeGeneticPC: Computing principal components from genetic relationship matrix — ComputeGeneticPC","text":"Banabithi Bose","code":""},{"path":"/reference/ComputeGeneticPC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ComputeGeneticPC: Computing principal components from genetic relationship matrix — ComputeGeneticPC","text":"","code":"data(\"highLD_hg19\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" highLD_regions <- highLD_hg19 ld_prunning <- \"TRUE\" window_size <- 50 step_size <- 5 r2_threshold <- 0.02 countPC <- 20 ## Genetic PC GP <- ComputeGeneticPC(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, highLD_regions = highLD_hg19, countPC = 20 )"},{"path":"/reference/ComputeLD.html","id":null,"dir":"Reference","previous_headings":"","what":"ComputeLD: Compute Linkage Disequilibrium (LD) for SNP Data — ComputeLD","title":"ComputeLD: Compute Linkage Disequilibrium (LD) for SNP Data — ComputeLD","text":"function computes linkage disequilibrium (LD) statistics SNP data using PLINK. allows computation across SNPs within specific chromosomes.","code":""},{"path":"/reference/ComputeLD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ComputeLD: Compute Linkage Disequilibrium (LD) for SNP Data — ComputeLD","text":"","code":"ComputeLD(DataDir, ResultDir, finput, ByCHR = FALSE, CHRnum = NULL, r2_LD)"},{"path":"/reference/ComputeLD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ComputeLD: Compute Linkage Disequilibrium (LD) for SNP Data — ComputeLD","text":"DataDir Character string representing file path input PLINK binary files. ResultDir Character string file path output files stored, defaulting temporary directory. finput Character string specifying prefix input PLINK binary files. ByCHR Logical indicating whether perform computation chromosome. default FALSE. CHRnum ByCHR TRUE, specifies chromosome number LD computed. default NULL. r2_LD threshold r-squared LD values report output.","code":""},{"path":"/reference/ComputeLD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ComputeLD: Compute Linkage Disequilibrium (LD) for SNP Data — ComputeLD","text":"Returns data frame containing computed LD values among SNPs, read output file generated PLINK.","code":""},{"path":"/reference/ComputeLD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ComputeLD: Compute Linkage Disequilibrium (LD) for SNP Data — ComputeLD","text":"","code":"snpld <- ComputeLD(     DataDir = GXwasR:::GXwasR_data(), ResultDir = tempdir(),     finput = \"GXwasR_example\", ByCHR = TRUE, CHRnum = 1, r2_LD = 0.2 )"},{"path":"/reference/ComputePRS.html","id":null,"dir":"Reference","previous_headings":"","what":"ComputePRS: Computing polygenic risk score (PRS) — ComputePRS","title":"ComputePRS: Computing polygenic risk score (PRS) — ComputePRS","text":"function calculates polygenic risk score, total allele counts (genotypes) weighted estimated effect sizes genome-wide association studies. uses C+T filtering techniques. users perform clumping procedure choromosome-wise genome-wide. Also, function offers choice including several genetic principal components along covariates. Using function, users freedom experiment various clumping thresholding arrangements test wide range various parameter values.","code":""},{"path":"/reference/ComputePRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ComputePRS: Computing polygenic risk score (PRS) — ComputePRS","text":"","code":"ComputePRS(   DataDir,   ResultDir = tempdir(),   finput,   summarystat,   phenofile,   covarfile = NULL,   effectsize = c(\"BETA\", \"OR\"),   ldclump = FALSE,   LDreference,   clump_p1,   clump_p2,   clump_r2,   clump_kb,   byCHR = TRUE,   pthreshold = c(0.001, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5),   highLD_regions,   ld_prunning = FALSE,   window_size = 50,   step_size = 5,   r2_threshold = 0.02,   nPC = 6,   pheno_type = \"binary\" )"},{"path":"/reference/ComputePRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ComputePRS: Computing polygenic risk score (PRS) — ComputePRS","text":"DataDir character string file path input files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files genotype data .e., target data based clumping procedure performed. file needs DataDir. target data small (e.g. N < 500) can use 1000 Genomes Project samples. Make sure use population closely reflects represents base sample. summarystat dataframe object GWAS summary statistics. mandatory column headers dataframe : CHR(Chromosome code) BP(Basepair position) A1 (effect allele) SNP (.e., SNP identifier) BETA (.e., effect-size logarithm odds ratio) P (.e., p-values). Special Notes: first three columns needed SNP, A1 BETA . phenofile character string, specifying name mandatory phenotype file. plain text file header line; columns family ID, individual ID phenotype columns. binary trait, phenotypic value coded 0 1, recognized case-control study (0 controls 1 cases). Missing value represented \"-9\" \"NA\". interested phenotype column labeled \"Pheno1\". file needs DataDir. covarfile character string, specifying name covariate file plain .text file header line; columns family ID, individual ID covariates. default NULL. file needs DataDir. effectsize Boolean value, BETA , specifying type GWAS effectsize. default BETA. ldclump Boolean value, TRUE FALSE, specifying whether perform clumping . LDreference character string, specifying  prefix PLINK files population reference panel ancestry, ideally one used imputing target dataset. files DataDir. clump_p1 Numeric value, specifying significance threshold index SNPs ldclump set TRUE. default 0.0001. clump_p2 Numeric value, specifying secondary significance threshold clumped SNPs ldclump set TRUE. default 0.01 clump_r2 Numeric value, specifying linkage disequilibrium (LD) threshold clumping ldclump set TRUE. default 0.50. clump_kb Integer value, specifying physical distance threshold base-pair clumping ldclump set TRUE. default 250. byCHR Boolean value, 'TRUE' 'FALSE', specifying chromosome-wise clumping procedure ldclump set TRUE. default TRUE pthreshold Numeric vector, containing several p value thresholds maximize predictive ability derived polygenic scores. highLD_regions Character string, specifying .txt file name known genomic regions high LD. default NULL. ld_prunning Boolean value, TRUE FALSE LD-based filtering computing genetic PC covariates. window_size Integer value, specifying window size variant count kilobase LD-based filtering computing genetic PC. default 50. step_size Integer value, specifying variant count shift window end step LD filtering computing genetic PCs. default 5. r2_threshold Numeric value 0 1 pairwise \\(r^2\\) threshold LD-based filtering computing genetic PCs. default 0.02. nPC Positive integer value, specifying number genetic PCs included predictor PRS model fit. default 6. pheno_type Boolean value, ‘binary’ ‘quantitative’, specifying type trait. default ‘binary’.","code":""},{"path":"/reference/ComputePRS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ComputePRS: Computing polygenic risk score (PRS) — ComputePRS","text":"list object containing dataframe numeric value, GeneticPC plot (requested), PRS plot. dataframe,PRS, contains four mandatory columns, , IID (.e., Individual ID), FID (.e., Family ID), Pheno1 (.e., trait PRS) Score (.e., best PRS). columns covariates . numeric value, BestP contains threshold best p-value best pRS model fit. Also, function produces several plots p-value thresholds vs PRS model fit PRS distribution among male females. case-control data, shows PRS distribution among cases controls ROC curves well.","code":""},{"path":"/reference/ComputePRS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ComputePRS: Computing polygenic risk score (PRS) — ComputePRS","text":"Banabithi Bose","code":""},{"path":"/reference/ComputePRS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ComputePRS: Computing polygenic risk score (PRS) — ComputePRS","text":"","code":"data(\"Summary_Stat_Ex1\", package = \"GXwasR\") data(\"Example_phenofile\", package = \"GXwasR\") data(\"Example_covarfile\", package = \"GXwasR\") data(\"Example_pthresoldfile\", package = \"GXwasR\") data(\"highLD_hg19\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" summarystat <- Summary_Stat_Ex1[, c(2, 4, 7, 1, 3, 12)] phenofile <- Example_phenofile # Cannot be NULL # The interested phenotype column should be labeled as \"Pheno1\". covarfile <- Example_covarfile clump_p1 <- 0.0001 clump_p2 <- 0.0001 clump_kb <- 500 clump_r2 <- 0.5 byCHR <- TRUE pthreshold <- Example_pthresoldfile$Threshold ld_prunning <- TRUE highLD_regions <- highLD_hg19 window_size <- 50 step_size <- 5 r2_threshold <- 0.02 nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification. pheno_type <- \"binary\"  PRSresult <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile,     effectsize = \"BETA\", LDreference = \"GXwasR_example\", ldclump = FALSE, clump_p1, clump_p2,     clump_r2, clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions,     ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6,     pheno_type = \"binary\" ) #> ℹ 0.001 #> • Computing PRS for threshold 0.001 #> ℹ 0.05 #> • Computing PRS for threshold 0.05 #> ℹ 0.1 #> • Computing PRS for threshold 0.1 #> ℹ 0.2 #> • Computing PRS for threshold 0.2 #> ℹ 0.3 #> • Computing PRS for threshold 0.3 #> ℹ 0.4 #> • Computing PRS for threshold 0.4 #> ℹ 0.5 #> • Computing PRS for threshold 0.5  ## This table shows 10 samples with phenotype, covariates and a PRS column. PRS <- PRSresult$PRS PRS[seq_len(10), ] #>        FID     IID Pheno1 AGE testcovar       PC1         PC2         PC3 #> 1  EUR_FIN HG00171      1  36         1 0.0964618 -0.03825140  0.00903796 #> 2  EUR_FIN HG00173      1  81         1 0.0743932 -0.05672710  0.03969940 #> 3  EUR_FIN HG00174      1  83         1 0.0645349 -0.05610350 -0.01457860 #> 4  EUR_FIN HG00176      2  75         0 0.0832472 -0.05602080  0.03026540 #> 5  EUR_FIN HG00177      1  88         1 0.0775687 -0.00946444  0.04517850 #> 6  EUR_FIN HG00178      1  24         1 0.0661714 -0.05049060  0.02485390 #> 7  EUR_FIN HG00179      2  78         1 0.0806110 -0.01154090 -0.00750723 #> 8  EUR_FIN HG00180      1  39         1 0.0840638  0.00117830  0.01286460 #> 9  EUR_FIN HG00182      1  50         1 0.1029760 -0.04300460  0.01999710 #> 10 EUR_FIN HG00183      1  58         0 0.0827103 -0.03865300  0.05093660 #>            PC4         PC5         PC6      SCORE #> 1  -0.08952930 -0.02522910  0.01465430 0.04842120 #> 2   0.02053430  0.02304100 -0.03603800 0.02937420 #> 3  -0.02643430 -0.00180949  0.01445210 0.00996742 #> 4  -0.00110770 -0.05303710 -0.03358030 0.10420600 #> 5  -0.03732150 -0.06174310 -0.07199510 0.03143030 #> 6  -0.08280660  0.04094180  0.00559525 0.07226890 #> 7  -0.03288230  0.03559730  0.04245120 0.11652400 #> 8   0.05915400  0.05476670 -0.01015950 0.06171590 #> 9  -0.03023650 -0.09019110 -0.03785150 0.02837030 #> 10 -0.00153775 -0.10456100  0.06236340 0.03862970 ## The best threshold BestPvalue <- PRSresult$BestP$Threshold BestPvalue #> [1] 0.05"},{"path":"/reference/DiffZeroOne.html","id":null,"dir":"Reference","previous_headings":"","what":"DiffZeroOne: Assessing the Z-score for deviation from one and zero. — DiffZeroOne","title":"DiffZeroOne: Assessing the Z-score for deviation from one and zero. — DiffZeroOne","text":"function tests null hypothesis measured statistics (example: genetic correlation, rg trait) < 1 using 1-tailed test compared normal distribution (z = (1 − measure statistics)/Standard error). multiple tests, users encouraged apply Bonferroni multiple-testing correction.","code":""},{"path":"/reference/DiffZeroOne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DiffZeroOne: Assessing the Z-score for deviation from one and zero. — DiffZeroOne","text":"","code":"DiffZeroOne(inputdata, diffzero = TRUE, diffone = TRUE)"},{"path":"/reference/DiffZeroOne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DiffZeroOne: Assessing the Z-score for deviation from one and zero. — DiffZeroOne","text":"inputdata dataframe object, containing three columns: Trait (.e., phenotype interest) Stat (.e., measured statistics) SE (.e., standard error measured statistics) diffzero Boolean value, TRUE FALSE, specifying perform deviation 0 test. diffone Boolean value, TRUE FALSE, specifying perform deviation 1 test.","code":""},{"path":"/reference/DiffZeroOne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DiffZeroOne: Assessing the Z-score for deviation from one and zero. — DiffZeroOne","text":"dataframe columns: Trait Stat SE P0 (.e, p-value deviation zero test) P1 (.e., p-value deviation 1 test)","code":""},{"path":"/reference/DiffZeroOne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DiffZeroOne: Assessing the Z-score for deviation from one and zero. — DiffZeroOne","text":"","code":"data(\"Example_rgdata\", package = \"GXwasR\") inputdata <- Example_rgdata colnames(inputdata) <- c(\"Trait\", \"Stat\", \"SE\") x <- DiffZeroOne(inputdata, FALSE, TRUE)"},{"path":"/reference/DummyCovar.html","id":null,"dir":"Reference","previous_headings":"","what":"DummyCovar: Recode a categorical variable to a set of binary dummy variables. — DummyCovar","title":"DummyCovar: Recode a categorical variable to a set of binary dummy variables. — DummyCovar","text":"dealing categorical variables genetic analysis using, common approach convert dummy variables proper analysis (Purcell et al. 2007) . function creates K-1 new dummy variables variable K categories. One level automatically excluded dummy variables serves reference category subsequent analyses. setup implicitly sets excluded category baseline categories compared.","code":""},{"path":"/reference/DummyCovar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DummyCovar: Recode a categorical variable to a set of binary dummy variables. — DummyCovar","text":"","code":"DummyCovar(DataDir, ResultDir = DataDir, bfile, incovar, outcovar)"},{"path":"/reference/DummyCovar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DummyCovar: Recode a categorical variable to a set of binary dummy variables. — DummyCovar","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). bfile Character string, specifying prefix input PLINK binary files covariate file generated. incovar Character string, specifying prefix input covariate file. First two columns , FID (.e., Family ID) IID (.e., Sample ID) rest columns covariates. outcovar Character string, specifying prefix Output covariate file","code":""},{"path":"/reference/DummyCovar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DummyCovar: Recode a categorical variable to a set of binary dummy variables. — DummyCovar","text":"R dataframe object covariates","code":""},{"path":"/reference/DummyCovar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DummyCovar: Recode a categorical variable to a set of binary dummy variables. — DummyCovar","text":"Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). “PLINK: Tool Set Whole-Genome Association Population-Based Linkage Analyses.” American Journal Human Genetics, 81(3), 559–575. doi:10.1086/519795 .","code":""},{"path":"/reference/DummyCovar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DummyCovar: Recode a categorical variable to a set of binary dummy variables. — DummyCovar","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() bfile <- \"GXwasR_example\" incovar <- \"covarfile_w_pc_age.txt\" outcovar <- \"dummycovarfile\" dummy_covars <- DummyCovar(     DataDir = DataDir, ResultDir = ResultDir,     bfile = bfile, incovar = incovar,     outcovar = outcovar ) #> ℹ Covariate file: dummycovarfile.cov is in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq"},{"path":"/reference/EstimateHerit.html","id":null,"dir":"Reference","previous_headings":"","what":"EstimateHerit: Computing SNP heritability i.e., the proportion of phenotypic variance explained by SNPs. — EstimateHerit","title":"EstimateHerit: Computing SNP heritability i.e., the proportion of phenotypic variance explained by SNPs. — EstimateHerit","text":"functions performs two types heritability estimation, ()GREML:Genomic relatedness matrix (GRM) restricted maximum likelihood-based method following GCTA (Yang et al. 2011)  (ii)LDSC: LD score regression-based method following (Bulik-Sullivan et al. 2014; Privé et al. 2020) . details, please follow associated paper. Prior using function, recommended apply QCsnp QCsample ensure data quality control.","code":""},{"path":"/reference/EstimateHerit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EstimateHerit: Computing SNP heritability i.e., the proportion of phenotypic variance explained by SNPs. — EstimateHerit","text":"","code":"EstimateHerit(   DataDir = NULL,   ResultDir = tempdir(),   finput = NULL,   precomputedLD = NULL,   indepSNPs = NULL,   summarystat = NULL,   ncores = 2,   model = c(\"LDSC\", \"GREML\"),   computeGRM = TRUE,   grmfile_name = NULL,   byCHR = FALSE,   r2_LD = 0,   LDSC_blocks = 20,   intercept = NULL,   chi2_thr1 = 30,   chi2_thr2 = Inf,   REMLalgo = c(0, 1, 2),   nitr = 100,   cat_covarfile = NULL,   quant_covarfile = NULL,   prevalence = NULL,   partGRM = FALSE,   autosome = TRUE,   Xsome = TRUE,   nGRM = 3,   cripticut = 0.025,   minMAF = NULL,   maxMAF = NULL,   hg = c(\"hg19\", \"hg38\"),   PlotIndepSNP = TRUE,   IndepSNP_window_size = 50,   IndepSNP_step_size = 5,   IndepSNP_r2_threshold = 0.02,   highLD_regions = NULL,   plotjpeg = TRUE,   plotname = \"Heritability_Plots\" )"},{"path":"/reference/EstimateHerit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EstimateHerit: Computing SNP heritability i.e., the proportion of phenotypic variance explained by SNPs. — EstimateHerit","text":"DataDir character string file path input files. default NULL. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files genotype data. file needs DataDir. LDSC model, original genotype data available, Hapmap 3 1000Genome data can used. use NULL, need provide precomputedLD argument. See . precomputedLD dataframe object LD matrix columns: CHR, SNP, BP, ld_size, MAF, ld_score. . default NULL. indepSNPs dataframe independent SNP ids column name \"rsid\". default NULL. summarystat dataframe object GWAS summary statistics. mandatory column headers dataframe chr (Chromosome code), pos (Basepair position) a1 (First allele code) rsid (.e., SNP identifier) beta (.e., effect-size logarithm odds ratio) beta_se (.e., standard error beta) P (.e., p-values) n_eff (.e., effective sample size) case-control study, effective sample size \\(4 / (1/<# cases> + 1/<# controls>)\\). default NULL. ncores Integer value, specifying number cores used running LDSC model. default 2. model Character string, specifying heritability estimation model. two options, “GREML” “LDSC”. default “GREML”. Note: argument LDSC, DataDir finput can NULL. computeGRM Boolean value, TRUE FALSE, specifying whether compute GRM matrices . default TRUE. grmfile_name string characters specifying prefix autosomal .grm.bin file. Users need provide separate GRM files autosomes X chromosome ResultDir. X chromosomal GRM file \"x\" added autosomal prefix file name. instance, autosomal file \"ABC.grm.bin\", X chromosomal file \"xABC.grm.bim\". providing chromosome-wise GRMs, prefix add \"ChrNumber_\" start prefix like, \"Chr1_ABC.grm.bin\". default NULL. byCHR Boolean value, TRUE FALSE, specifying whether analysis performed chromosome wise . default FALSE. r2_LD Numeric value, specifying LD threshold clumping LDSC model. default 0. LDSC_blocks Integer value, specifying block size performing jackknife variance estimator LDSC model following (Privé et al. 2020) . default 200. intercept Numeric value constrain intercept value (e.g. 1) LDSC regression. Default NULL. chi2_thr1 Numeric value threshold chi2 step 1 LDSC regression. Default 30. chi2_thr2 Numeric value threshold chi2 step 2. Default Inf (none). REMLalgo Integer value 0, 1 2, specifying algorithm run REML iterations, 0 average information (AI), 1 Fisher-scoring 2 EM. default option 0, .e. AI-REML (Yang et al. 2011) . nitr Integer value, specifying number iterations performing REML. default 100. cat_covarfile character string, specifying name categorical covariate file plain text file header line; columns family ID, individual ID discrete covariates. default NULL. file needs DataDir. quant_covarfile character string, specifying name quantitative covariate file plain text file header line; columns family ID, individual ID continuous covariates. default NULL. file needs DataDir. prevalence Numeric value, specifying disease prevalence. default NULL. Note: continuous trait value, users use default. partGRM Boolean value, TRUE FALSE, specifying whether GRM partitioned n parts (row) GREML model. default FALSE. autosome Boolean value, TRUE FALSE, specifying whether estimate heritability done autosomes . default TRUE. Xsome Boolean value, TRUE FALSE, specifying whether estimate heritability done X chromosome . default TRUE. nGRM Integer value, specifying number partition GRM GREML model. default 3. cripticut Numeric value, specifying threshold create new GRM \"unrelated\" individuals GREML model. default arbitrary chosen 0.025 following (Yang et al. 2011) . minMAF Positive numeric value (0,1), specifying minimum threshold MAF filter SNPs GREML model. value greater maxMAF parameter. default NULL. NULL, maximum MAF value genotype data computed printed plot. maxMAF Positive numeric value (0,1), specifying maximum threshold MAF filter SNPs GREML model. value less minMAF parameter. default NULL. NULL, minimum MAF value genotype data computed printed plot. hg Boolean value, specifying genome built, “hg19” “hg38” use chromosome length UCSC genome browser getting genes proteins according built. default “hg19”. PlotIndepSNP Boolean value, TRUE FALSE, specifying whether use independent SNPs .e., chromosome-wise LD pruned SNPs plots . default TRUE. IndepSNP_window_size Integer value, specifying window size variant count kilobase LD-based filtering. default 50. IndepSNP_step_size Integer value, specifying variant count shift window end step LD filtering pruned SNPs plots. default 5. IndepSNP_r2_threshold Numeric value 0 1 pairwise \\(r^2\\) threshold LD-based filtering pruned SNPs plots. default 0.02. highLD_regions Character string, specifying .txt file name genomic regions high LD using finding pruned SNPs plots. file needs DataDir. plotjpeg Boolean value, TRUE FALSE, specifying whether save plots jpeg file ResultDir. default TRUE. plotname String character value specifying name jpeg file plots. default \"Heritability_Plots\".","code":""},{"path":"/reference/EstimateHerit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EstimateHerit: Computing SNP heritability i.e., the proportion of phenotypic variance explained by SNPs. — EstimateHerit","text":"dataframe maximum eight columns GREML (, three columns running genome-wide) ten columns LDSC model byCHR TRUE. columns, , \"chromosome\"(.e., chromosome code),\"snp_proportion\" (.e.,chromosome-wise SNP proportion)\", \"..genes\" (.e., number genes per chromosome), \"..proteins\" (.e., number genes per chromosome),\"size_mb\" (.e., chromosome length), \"Source\" (.e., source heritability), \"Variance\" (.e., estimated heritability), \"SE\" (.e., standard error estimated heritability) common GREML LDSC model. column, \"Intercept\" (.e., LDSC regression intercept) \"Int_SE\" (.e., standard error intercept) two extra columns LDSC models. Source column rows, V(1) (.e., name genetic variance), V(e) (.e., residual variance), V(p) (.e., phenotypic variance), V(1)/Vp (.e., ratio genetic variance phenotypic variance), V(1)/Vp_L (.e., ratio genetic variance phenotypic variance liability scale binary phenotypes). byCHR FALSE, first five columns reported dataframe.","code":""},{"path":"/reference/EstimateHerit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"EstimateHerit: Computing SNP heritability i.e., the proportion of phenotypic variance explained by SNPs. — EstimateHerit","text":"Bulik-Sullivan B, Finucane HK, Anttila V, Gusev , Day FR, Loh P, Consortium R, Consortium PG, Wellcome Trust Case Control Consortium GCfAN, Perry JRB, Patterson N, Robinson EB, Daly MJ, Price AL, Neale BM (2014). “LD score regression distinguishes confounding polygenicity genome-wide association studies.” Nature Genetics, 47, 291–295. Privé F, Arbel J, Vilhjálmsson BJ (2020). “LDpred2: better, faster, stronger.” Bioinformatics, 36(22-23), 5424–5431. doi:10.1093/bioinformatics/btaa1029 . Yang J, Lee SH, Goddard , Visscher PM (2011). “GCTA: tool Genome-wide Complex Trait Analysis.” American Journal Human Genetics, 88(1), 76–82.","code":""},{"path":"/reference/EstimateHerit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EstimateHerit: Computing SNP heritability i.e., the proportion of phenotypic variance explained by SNPs. — EstimateHerit","text":"Banabithi Bose","code":""},{"path":"/reference/EstimateHerit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EstimateHerit: Computing SNP heritability i.e., the proportion of phenotypic variance explained by SNPs. — EstimateHerit","text":"","code":"data(\"Summary_Stat_Ex1\", package = \"GXwasR\") data(\"highLD_hg19\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() precomputedLD <- NULL finput <- \"GXwasR_example\" test.sumstats <- na.omit(Summary_Stat_Ex1[Summary_Stat_Ex1$TEST == \"ADD\", c(seq_len(4), 6:8)]) colnames(test.sumstats) <- c(\"chr\", \"rsid\", \"pos\", \"a1\", \"n_eff\", \"beta\", \"beta_se\") summarystat <- test.sumstats ncores <- 3 model <- \"GREML\" byCHR <- FALSE r2_LD <- 0 LDSC_blocks <- 20 REMLalgo <- 0 nitr <- 3 cat_covarfile <- NULL quant_covarfile <- NULL prevalence <- 0.01 partGRM <- FALSE autosome <- TRUE Xsome <- TRUE nGRM <- 3 cripticut <- 0.025 minMAF <- NULL maxMAF <- NULL hg <- \"hg19\" PlotIndepSNP <- TRUE IndepSNP_window_size <- 50 IndepSNP_step_size <- 5 IndepSNP_r2_threshold <- 0.02 highLD_regions <- highLD_hg19 H2 <- EstimateHerit(     DataDir = DataDir, ResultDir = ResultDir, finput = finput,     summarystat = NULL, ncores, model = \"GREML\", byCHR = TRUE, r2_LD = 0,     LDSC_blocks = 20, REMLalgo = 0, nitr = 100, cat_covarfile = NULL, quant_covarfile = NULL,     prevalence = 0.01, partGRM = FALSE, autosome = TRUE, Xsome = TRUE, nGRM = 3,     cripticut = 0.025, minMAF = NULL, maxMAF = NULL, hg = \"hg19\", PlotIndepSNP = TRUE,     IndepSNP_window_size = 50, IndepSNP_step_size = 5, IndepSNP_r2_threshold = 0.02,     highLD_regions = highLD_hg19 ) #> Processing chromosome 1 #> Using GCTA version v1.94.4 Mac #> This message is displayed once every 8 hours. #> Processing chromosome 2 #> Processing chromosome 3 #> Processing chromosome 4 #> Processing chromosome 5 #> Processing chromosome 6 #> Processing chromosome 7 #> Processing chromosome 8 #> Processing chromosome 9 #> Processing chromosome 10 #> Processing chromosome 23 #> ✔ GRM has been saved in the file [/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq/xGXwasR.grm.bin] #> ℹ Number of SNPs in each pair of individuals has been saved in the file [/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq/xGXwasR.grm.N.bin] #>  #> Processing chromosome 24 #> ✔ Plots are saved in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq with name Heritability_Plots.jpeg #> ✔ All GRM related files are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq"},{"path":"/reference/Example_covarfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of covariate dataframe — Example_covarfile","title":"Example of covariate dataframe — Example_covarfile","text":"Example covariate dataframe","code":""},{"path":"/reference/Example_covarfile.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of covariate dataframe — Example_covarfile","text":"data frame 276 rows 4 variables: FID Family ID; character string IID Individual ID; character string AGE Age individual; integer testcovar Example binary covariate; integer (0/1)","code":""},{"path":"/reference/Example_covarfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example of covariate dataframe — Example_covarfile","text":"Banabithi Bose","code":""},{"path":"/reference/Example_h2data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for h2 estimation between male and female for eight different traits — Example_h2data","title":"Example dataset for h2 estimation between male and female for eight different traits — Example_h2data","text":"Example dataset h2 estimation male female eight different traits","code":""},{"path":"/reference/Example_h2data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for h2 estimation between male and female for eight different traits — Example_h2data","text":"data frame 8 rows 5 variables: ID Trait identifier; character string (e.g., \"ADHD\", \"AFB\") Fstat Estimated heritability statistic females; numeric Fse Standard error female heritability estimate; numeric Mstat Estimated heritability statistic males; numeric Mse Standard error male heritability estimate; numeric","code":""},{"path":"/reference/Example_h2data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for h2 estimation between male and female for eight different traits — Example_h2data","text":"Banabithi Bose","code":""},{"path":"/reference/Example_phenofile.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for phenotype file — Example_phenofile","title":"Example dataset for phenotype file — Example_phenofile","text":"Example dataset phenotype file","code":""},{"path":"/reference/Example_phenofile.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for phenotype file — Example_phenofile","text":"data frame 276 rows 4 variables: FID Family ID; character string IID Individual ID; character string Pheno1 Example phenotype 1; integer (e.g., case/control status) Pheno2 Example phenotype 2; numeric (e.g., quantitative trait)","code":""},{"path":"/reference/Example_phenofile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for phenotype file — Example_phenofile","text":"Banabithi Bose","code":""},{"path":"/reference/Example_pthresoldfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset with p-value threshold — Example_pthresoldfile","title":"Example dataset with p-value threshold — Example_pthresoldfile","text":"Example dataset p-value threshold","code":""},{"path":"/reference/Example_pthresoldfile.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset with p-value threshold — Example_pthresoldfile","text":"data frame 7 rows 3 variables: Threshold Nominal p-value threshold; numeric LowerBound Lower bound p-value interval; integer UpperBound Upper bound p-value interval; numeric","code":""},{"path":"/reference/Example_pthresoldfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset with p-value threshold — Example_pthresoldfile","text":"Banabithi Bose","code":""},{"path":"/reference/Example_rgdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for running DiffZerOne function — Example_rgdata","title":"Example dataset for running DiffZerOne function — Example_rgdata","text":"Example dataset running DiffZerOne function","code":""},{"path":"/reference/Example_rgdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for running DiffZerOne function — Example_rgdata","text":"data frame 16 rows 3 variables: Trait Trait name abbreviation; character string rg Estimated genetic correlation target trait; numeric se Standard error genetic correlation estimate; numeric","code":""},{"path":"/reference/Example_rgdata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for running DiffZerOne function — Example_rgdata","text":"Banabithi Bose","code":""},{"path":"/reference/Ffile.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for FemaleWAS — Ffile","title":"Example dataset for FemaleWAS — Ffile","text":"Example dataset FemaleWAS","code":""},{"path":"/reference/Ffile.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for FemaleWAS — Ffile","text":"data frame 120 rows 7 variables: SNP SNP identifier (rsID); character string CHR Chromosome number; integer BP Base-pair position (GRCh37 GRCh38 assumed); integer A1 Effect allele; character string BETA_F Effect size estimate (beta coefficient) females; numeric SE_F Standard error female beta estimate; numeric P P-value association; numeric","code":""},{"path":"/reference/Ffile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for FemaleWAS — Ffile","text":"Banabithi Bose","code":""},{"path":"/reference/FilterAllele.html","id":null,"dir":"Reference","previous_headings":"","what":"FilterAllele: Filtering out the multi-allelic variants — FilterAllele","title":"FilterAllele: Filtering out the multi-allelic variants — FilterAllele","text":"function filters multi-allelic SNPs input dataset.","code":""},{"path":"/reference/FilterAllele.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FilterAllele: Filtering out the multi-allelic variants — FilterAllele","text":"","code":"FilterAllele(DataDir, ResultDir, finput, foutput)"},{"path":"/reference/FilterAllele.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FilterAllele: Filtering out the multi-allelic variants — FilterAllele","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files. foutput Character string, specifying prefix output PLINK binary files. multi-allelic variants present, file produced filtering variants.","code":""},{"path":"/reference/FilterAllele.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FilterAllele: Filtering out the multi-allelic variants — FilterAllele","text":"NULL. multi-allelic variant filtering, filtered PLINK files biallelic SNPs saved ResultDir.","code":""},{"path":"/reference/FilterAllele.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"FilterAllele: Filtering out the multi-allelic variants — FilterAllele","text":"Banabithi Bose","code":""},{"path":"/reference/FilterAllele.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FilterAllele: Filtering out the multi-allelic variants — FilterAllele","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Filter_Test\" x <- FilterAllele(DataDir, ResultDir, finput, foutput) #> ℹ There is no multi-allelic SNP present in the input dataset."},{"path":"/reference/FilterPlinkSample.html","id":null,"dir":"Reference","previous_headings":"","what":"FilterPlinkSample: Making PLINK files with desired samples. — FilterPlinkSample","title":"FilterPlinkSample: Making PLINK files with desired samples. — FilterPlinkSample","text":"function prepares PLINK binary files desired samples.","code":""},{"path":"/reference/FilterPlinkSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FilterPlinkSample: Making PLINK files with desired samples. — FilterPlinkSample","text":"","code":"FilterPlinkSample(   DataDir,   ResultDir,   finput,   foutput = NULL,   filter_sample = \"cases\",   keep_remove_sample_file = NULL,   keep = TRUE )"},{"path":"/reference/FilterPlinkSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FilterPlinkSample: Making PLINK files with desired samples. — FilterPlinkSample","text":"DataDir Character string file path input files. ResultDir character string file path output PLINK files stored. finput Character string, specifying prefix input PLINK binary files. foutput Character string, specifying prefix output PLINK binary files. filter_sample Character string, specifying sample type retained. choices , \"cases\", \"controls\", \"males\" \"females\". default \"cases\". keep_remove_sample_file Character string, specifying prefix space/tab-delimited text file header. samples want keep remove, family IDs first column within-family IDs second column. file needs DataDir. default NULL. keep Boolean value, TRUE FALSE specifying desired samples keep remove. default TRUE.","code":""},{"path":"/reference/FilterPlinkSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FilterPlinkSample: Making PLINK files with desired samples. — FilterPlinkSample","text":"NULL output PLINK files passed samples saved ResultDir.","code":""},{"path":"/reference/FilterPlinkSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"FilterPlinkSample: Making PLINK files with desired samples. — FilterPlinkSample","text":"Banabithi Bose","code":""},{"path":"/reference/FilterPlinkSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FilterPlinkSample: Making PLINK files with desired samples. — FilterPlinkSample","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"casesPlink\" filter_sample <- \"cases\" keep_remove_sample_file <- \"samples_example\" keep <- FALSE  FilterPlinkSample(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, foutput = foutput, keep_remove_sample_file = keep_remove_sample_file,     keep = keep ) #> ✔ casesPlink PLINK files with desired samples are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq #> NULL"},{"path":"/reference/FilterRegion.html","id":null,"dir":"Reference","previous_headings":"","what":"FilterRegion: Filter chromosomal regions. — FilterRegion","title":"FilterRegion: Filter chromosomal regions. — FilterRegion","text":"Filtering Pseudo-Autosomal Region (PAR), X-transposed region (XTR), Ampliconic, filter based chromosome code user-defined regions input PLINK files. one type filtering can done three types, either region (using regionfile = TRUE), chromosome (filterCHR) combination three, filterPAR, filterXTR filterAmpliconic.","code":""},{"path":"/reference/FilterRegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FilterRegion: Filter chromosomal regions. — FilterRegion","text":"","code":"FilterRegion(   DataDir,   ResultDir,   finput,   foutput,   CHRX = TRUE,   CHRY = FALSE,   filterPAR = TRUE,   filterXTR = TRUE,   filterAmpliconic = TRUE,   regionfile = FALSE,   filterCHR = NULL,   Hg = \"19\",   exclude = TRUE )"},{"path":"/reference/FilterRegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FilterRegion: Filter chromosomal regions. — FilterRegion","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files. foutput Character string, specifying prefix output PLINK binary files filtering option SNPs chosen. default \"FALSE\". CHRX Boolean value, TRUE FALSE filter/flag regions chromosome X. default TRUE. Note: CHRX effect one filterPAR, filterXTR filterAmpliconic filter effect. CHRY Boolean value, TRUE FALSE filter/flag regions chromosome X. default FALSE. Note: CHRY effect one filterPAR, filterXTR filterAmpliconic filter effect. filterPAR Boolean value, TRUE FALSE filter PARs input PLINK file. default TRUE. filterXTR Boolean value, TRUE FALSE filter XTRs input PLINK file. default TRUE. filterAmpliconic Boolean value, TRUE FALSE filter Ampliconic regions input PLINK file. default TRUE. regionfile Character string, specifying name .txt file containing user-defined regions filtered input PLINK file bed format. default FALSE. regionfile = TRUE, filtering effect. Also, PAR, XTR Ampliconic SNPs X-chomosome flagged returned. filterCHR Vector value positive integer, specifying chromosome code filter/flag SNPs. default 0, means filtering based chromosome code. non-zero values argument, function consider chromosome code filter flag. filtering work. filterCHR = TRUE, filtering effect. Also, PAR, XTR Ampliconic SNPs X-chomosome flagged returned. Hg Character value, '19', '38', specifying genome build use PAR, XTR Ampliconic regions. default Hg = \"19\". exclude Boolean value, TRUE FALSE filter flag flag SNPs. default TRUE.","code":""},{"path":"/reference/FilterRegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FilterRegion: Filter chromosomal regions. — FilterRegion","text":"list three dataframes: PAR containing SNPs PAR regions; XTR containing SNPs XTR region Ampliconic containing SNPs Ampliconic region. non-zero value filterCHR, dataframe containing excluded/flagged SNPs returned. exclude = TRUE, two sets PLINK binary files produced ResultDir. One set remaining SNPs filtering one discarded SNPs.","code":""},{"path":"/reference/FilterRegion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"FilterRegion: Filter chromosomal regions. — FilterRegion","text":"Banabithi Bose","code":""},{"path":"/reference/FilterRegion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FilterRegion: Filter chromosomal regions. — FilterRegion","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"PostimputeEX_QC1\" x <- FilterRegion(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, foutput = foutput, CHRX = TRUE, CHRY = FALSE,     filterPAR = TRUE, filterXTR = TRUE, filterAmpliconic = TRUE,     regionfile = FALSE, filterCHR = NULL, Hg = \"38\", exclude = TRUE ) #> ℹ chrX #> ✖ There is no PAR region in the input data. Argument filterPAR cannot set to be TRUE. #> ℹ Changing filterPAR to FALSE #> ✖ There is no XTR region in the input data. Argument filterXTR cannot set to be TRUE. #> ℹ Changing filterXTR to FALSE #> ℹ Ampliconic SNPs:9 #> ℹ 9 SNPs are discarded. #> ✔ PLINK files with passed SNPs are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq prefixed as PostimputeEX_QC1 #> ✔ PLINK files with discarded SNPs are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq prefixed as PostimputeEX_QC1_snps_extracted"},{"path":"/reference/FilterSNP.html","id":null,"dir":"Reference","previous_headings":"","what":"FilterSNP: Filter out SNPs. — FilterSNP","title":"FilterSNP: Filter out SNPs. — FilterSNP","text":"FilterSNP: Filter SNPs.","code":""},{"path":"/reference/FilterSNP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FilterSNP: Filter out SNPs. — FilterSNP","text":"","code":"FilterSNP(DataDir, ResultDir, finput, foutput, SNPvec, extract = FALSE)"},{"path":"/reference/FilterSNP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FilterSNP: Filter out SNPs. — FilterSNP","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files. foutput Character string, specifying prefix output PLINK binary files filtering option SNPs chosen. default \"FALSE\". SNPvec R dataframe SNP names excluded. extract Boolean value, TRUE FALSE, specifying whether extract snps discard snps. default FALSE.","code":""},{"path":"/reference/FilterSNP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FilterSNP: Filter out SNPs. — FilterSNP","text":"NULL. filtered file saved ResultDir.","code":""},{"path":"/reference/FilterSNP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FilterSNP: Filter out SNPs. — FilterSNP","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() SNPvec <- c(\"rs6529954\", \"rs12858640\", \"rs5962098\") finput <- \"GXwasR_example\" foutput <- \"Filter_Test\" FilterSNP(DataDir, ResultDir, finput, foutput, SNPvec = SNPvec, extract = TRUE) #> ℹ 3 SNPs are extracted #> ✔ Plink files with extracted SNPs are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq prefixed as Filter_Test #> NULL"},{"path":"/reference/GXWASmiami.html","id":null,"dir":"Reference","previous_headings":"","what":"Miami plot — GXWASmiami","title":"Miami plot — GXWASmiami","text":"function generates Miami plots GWAS XWAS.","code":""},{"path":"/reference/GXWASmiami.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miami plot — GXWASmiami","text":"","code":"GXWASmiami(   ResultDir = tempdir(),   FemaleWAS,   MaleWAS,   snp_pval = 1e-08,   Xchr = FALSE )"},{"path":"/reference/GXWASmiami.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miami plot — GXWASmiami","text":"ResultDir Character string folder path outputs saved. FemaleWAS R dataframe summary statistics GWAS XWAS female samples four columns, SNP(Variant), CHR(Chromosome number), POS(Base pair position) pvalue(P-value test). can generated running FM01comb FM02comb model GXWAS function. MaleWAS R dataframe summary statistics GWAS XWAS male samples four columns, SNP(Variant), CHR(Chromosome number), POS(Base pair position) pvalue(P-value test). can generated running FM01comb FM02comb model GXWAS function. snp_pval Numeric value p-value threshold annotation. SNPs p-value annotated plot. default 1e-08. Xchr Boolean value, TRUE FALSE, specifying whether generate Miami plot stratified XWAS . default TRUE.","code":""},{"path":"/reference/GXWASmiami.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miami plot — GXWASmiami","text":"Invisibly returns NULL. Generates saves Miami plots side effect.","code":""},{"path":"/reference/GXWASmiami.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Miami plot — GXWASmiami","text":"","code":"data(\"Ffile\", package = \"GXwasR\") data(\"Mfile\", package = \"GXwasR\") FemaleWAS <- na.omit(Ffile[, c(\"SNP\", \"CHR\", \"BP\", \"P\")]) colnames(FemaleWAS) <- c(\"SNP\", \"CHR\", \"POS\", \"pvalue\") MaleWAS <- na.omit(Mfile[, c(\"SNP\", \"CHR\", \"BP\", \"P\")]) colnames(MaleWAS) <- c(\"SNP\", \"CHR\", \"POS\", \"pvalue\")  GXWASmiami(FemaleWAS = FemaleWAS, MaleWAS = MaleWAS, snp_pval = 0.05) #> • Generating Miami plots for stratified test. #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq/Stratified_GWAS.png  #> ✔ Miami plot of stratified GWAS is saved in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq"},{"path":"/reference/GXwas.html","id":null,"dir":"Reference","previous_headings":"","what":"GXwas: Running genome-wide association study (GWAS) and X-chromosome-wide association study (XWAS) models. — GXwas","title":"GXwas: Running genome-wide association study (GWAS) and X-chromosome-wide association study (XWAS) models. — GXwas","text":"function runs GWAS models autosomes several alternative XWAS models. Models \"FMcombx01\",\"FMcombx02\",\"FMstratified\" can applied binary quantitative traits, \"GWAcxci\" can applied binary trait. binary quantitative features, function uses logistic linear regression, allowing multiple covariates interactions covariates multiple-regression approach. models run using additive effects SNPs, additional minor allele's influence represented direction regression coefficient. function attempts identify multi-collinearity among predictors displaying NA test statistic p-value terms model. terms add, likely run issues. details different XWAS model, please follow associated publication.","code":""},{"path":"/reference/GXwas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GXwas: Running genome-wide association study (GWAS) and X-chromosome-wide association study (XWAS) models. — GXwas","text":"","code":"GXwas(   DataDir,   ResultDir,   finput,   trait = c(\"binary\", \"quantitative\"),   standard_beta = TRUE,   xmodel = c(\"FMcombx01\", \"FMcombx02\", \"FMstratified\", \"GWAScxci\"),   sex = FALSE,   xsex = FALSE,   covarfile = NULL,   interaction = FALSE,   covartest = c(\"ALL\"),   Inphenocov = c(\"ALL\"),   combtest = c(\"fisher.method\", \"fisher.method.perm\", \"stouffer.method\"),   MF.zero.sub = 1e-05,   B = 10000,   MF.mc.cores = 1,   MF.na.rm = FALSE,   MF.p.corr = \"none\",   plot.jpeg = FALSE,   plotname = \"GXwas.plot\",   snp_pval = 1e-08,   annotateTopSnp = FALSE,   suggestiveline = 5,   genomewideline = 7.3,   ncores = 0 )"},{"path":"/reference/GXwas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GXwas: Running genome-wide association study (GWAS) and X-chromosome-wide association study (XWAS) models. — GXwas","text":"DataDir Character string file path input PLINK binary files. ResultDir Character string folder path outputs saved. finput Character string, specifying prefix input PLINK binary files male female samples. file needs DataDir. Note: Case/control phenotypes expected encoded 1=unaffected (control), 2=affected (case); 0 accepted alternate missing value encoding. missing case/control quantitative phenotypes expected encoded 'NA'/'nan' (capitalization) -9. trait Boolean value, 'binary' 'quantitative' phenotype .e. trait. standard_beta Boolean value, TRUE FALSE case quantitative trait standardizing trait phenotype values (mean 0, unit variance), resulting coefficients standardized. default TRUE. xmodel Models \"FMcombx01\",\"FMcombx02\",\"FMstratified\" can chosen binary quantitative traits \"GWAcxci\" can apply binary trait. models take care X-chromosomal marker. Three female genotypes coded 0, 1, 2 FM01 FM02. two genotypes males follow X-chromosome inactivation (XCI) pattern random (XCI-R) FM01 model coded 0 1, two genotypes follow XCI escaped (XCI-E) FM02 model coded 0 1. reflect dose compensation connection sexes, FM02 treats men homozygous females. \"FMstratified\" associations tested separately males females, combined p values computed Fisher's method, Fisher's method permutation, Stouffer's method(1,3-7]. X-chromosome inactivation (XCI) pattern, coding technique X-chromosomal genotypes sexes, required XCGA. simultaneously accounting four distinct XCI patterns, namely XCI-R, XCI-E, XCI-SN (XCI fully toward normal allele), XCI-SR (XCI fully toward risk allele), model may maintain respectably high power (Su et al. 2022) . Note: sex provided covariate XCGA model. sex Boolean value, TRUE FALSE using sex covariate association test. applicable genome-wide. default FALSE. xsex Boolean value, TRUE FALSE using sex covariate association test X-chromosomal SNPs. default FALSE. overwrite 'sex' argument X-chromosome. covarfile Character string full name covariate file .txt format. file placed DataDir. Note covariate file: first column file FID, second column IID columns covariates. primary header line starting “FID”, “IID” followed covariate names. individual present covariate file, individual missing phenotype value (.e. -9 default) covariate, individual set missing (.e. excluded association analysis). important note stratified GWAS model, PCs included covar generated separately cohort included covarfile. Use function DummyCovar generate new covariate file categorical variables -coded binary dummy variables covariate file categorical variables. instance, variable K categories, K-1 new dummy variables constructed, original covariate now estimated coefficient category. interaction Boolean value, TRUE FALSE including SNP x covariate interaction term/terms association analysis. default FALSE. permutation procedure chosen interaction automatically FALSE. interaction two covariates COV1 COV2, model look like: \\(Y = b0 + b1.ADD + b2.COV1 + b3.COV2 + b4.ADD x COV1 + b5.ADD x COV2 + e\\). interaction factors incorporated model, main effects' significance always determined simply; rather, depends arbitrary coding variables. put another way, probably just interpret p-value interaction. Also, p-values covariates represent test SNP-phenotype association controlling covariate. first row (ADD). Rather, covariate term test associated covariate-phenotype association. p-values might extremely significant (e.g. one covaries smoking analysis heart disease, etc) mean SNP highly significant effect necessarily. Note , feature valid XCGA model XWAS part. covartest Vector value NULL,\"\" covariate name/names included test. default NULL. instance, user can choose “AGE” “SEX” covartest = c(“AGE”, “SEX”) covariates covartest = c(“”). Inphenocov Vector integer values starting 1 extract terms user wants model: \\(Y = b0 + b1.ADD + b2.COV1 + b3.COV2 + b4.ADDxCOV1 + b5.ADDxCOV2 + e\\). terms appear order (Purcell et al. 2007)  ADD, (Su et al. 2022)  COV1, (Rhodes 2002)  ADD x COV1, (Moreau others 2003)  ADD x COV2. user wants extract terms COV1 ADD x COV1, need specify c(2,4). default c(“”). Note: feature valid XCGA model XWAS part. combtest Character vector specifying method combining p-values stratified GWAS/XWAS models. Choices “stouffer.method”, \"fisher.method\" \"fisher.method.perm\". fisher.method function combining p-values uses statistic, \\(S = -2 ∑^k /log p\\), follows \\(χ^2\\) distribution 2k degrees freedom (Fisher 1925) . fisher.method.perm, using p-values stratified tests, summary statistic combining p-values \\(S = -2 ∑ /log p\\). p-value statistic can derived randomly generating summary statistics (Rhodes 2002) . Therefore, p-value randomly sampled contributing study, random statistic calculated. fraction random statistics greater equal S gives final p-value. stouffer.method ,function applies Stouffer’s method (Stouffer et al. 1949)  p-values assuming p-values combined independent. Letting p1, p2, . . . , pk denote individual (one- two-sided) p-values k hypothesis tests combined, test statistic computed \\($z = ∑^k_{1}frac{z_{}}{sqrt(k)}$\\) \\($z_{}$ = Φ−1 (1 – $p_{}$)\\) \\(Φ −1 (·)\\) denotes inverse cumulative distribution function standard normal distribution. joint null hypothesis, test statistic follows standard normal distribution used compute combined p-value. functionality taken R package poolr (Cinar Viechtbauer 2022) . Note p-values 0 1 allowed passed methods. Note: Though parameter enabled autosome GWAS XWAS, combining pvalue sex-stratified test recommended ChrX . MF.zero.sub Small numeric value substituting p-values 0 stratified GWAS FM01comb FM02comb XWAS models. default 0.00001. log(0) results Inf replaces p-values 0 default small float. B Integer value specifying number permutation case using fisher.method.perm method stratified GWAS FM01comb FM02comb XWAS models. default 10000. MF.mc.cores Number cores used fisher.method.perm stratified GWAS FM01comb FM02comb XWAS models. MF.na.rm Boolean value, TRUE FALSE removing p-values NA stratified GWAS FM01comb FM02comb XWAS case using Fisher’s Stouffer’s methods. default FALSE. MF.p.corr Character vector specifying method correcting summary p-values FMfcomb FMscomb models. Choices \"bonferroni\", \"BH\" \"none\" Bonferroni,  Benjamini-Hochberg none, respectively. default \"none\". plot.jpeg Boolean value, TRUE FALSE saving plots .jpeg file. default TRUE. plotname character string specifying prefix file plots. file saved DataDir. default \"GXwas.plot\". snp_pval Numeric value p-value threshold annotation. SNPs p-value annotated plot. default 1e-08. annotateTopSnp Boolean value, TRUE 'FALSE. TRUE, annotates top hit chromosome snp_pval threshold. default FALSE. suggestiveline default 5 (p-value 1e-05). genomewideline default 7.3 (p-value 5e-08). ncores Integer value, specifying number cores parallel processing. default 0 (parallel computation).","code":""},{"path":"/reference/GXwas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GXwas: Running genome-wide association study (GWAS) and X-chromosome-wide association study (XWAS) models. — GXwas","text":"dataframe GWAS (XWAS X-chromosomal variants) along Manhattan Q-Q plots. case stratified test, return list containing three dataframes, namely, FWAS, MWAS, MFWAS association results female, male, cohorts, respectively. accompanied Miami Q-Q plots. individual manhattan Q-Q-plots stratified tests prefixed xmodel type DataDir.","code":""},{"path":"/reference/GXwas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GXwas: Running genome-wide association study (GWAS) and X-chromosome-wide association study (XWAS) models. — GXwas","text":"Cinar O, Viechtbauer W (2022). “poolr package combining independent dependent p values.” Journal Statistical Software, 101(1), 1–42. doi:10.18637/jss.v101.i01 . Fisher RA (1925). Statistical Methods Research Workers. Oliver Boyd, Edinburgh. Moreau Y, others (2003). “Comparison meta-analysis microarray data: bench computer desk.” Trends Genetics, 19(10), 570–577. Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). “PLINK: Tool Set Whole-Genome Association Population-Based Linkage Analyses.” American Journal Human Genetics, 81(3), 559–575. doi:10.1086/519795 . Rhodes DR (2002). “Meta-analysis microarrays: interstudy validation gene expression profiles reveals pathway dysregulation prostate cancer.” Cancer Research, 62(15), 4427–4433. Stouffer SA, Suchman EA, DeVinney LC, Star SA, Williams RM (1949). American Soldier: Adjustment Army Life, volume 1. Princeton University Press, Princeton, NJ. Su Y, Hu J, Yin P, Jiang H, Chen S, Dai M, Chen Z, Wang P (2022). “XCMAX4: Robust X Chromosomal Genetic Association Test Accounting Covariates.” Genes (Basel), 13(5), 847. doi:10.3390/genes13050847 , http://www.ncbi.nlm.nih.gov/pubmed/35627231.","code":""},{"path":"/reference/GXwas.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GXwas: Running genome-wide association study (GWAS) and X-chromosome-wide association study (XWAS) models. — GXwas","text":"Banabithi Bose","code":""},{"path":"/reference/GXwas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GXwas: Running genome-wide association study (GWAS) and X-chromosome-wide association study (XWAS) models. — GXwas","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" standard_beta <- TRUE xsex <- FALSE sex <- TRUE Inphenocov <- NULL covartest <- NULL interaction <- FALSE MF.na.rm <- FALSE B <- 10000 MF.zero.sub <- 0.00001 trait <- \"binary\" xmodel <- \"FMcombx02\" combtest <- \"fisher.method\" snp_pval <- 1e-08 covarfile <- NULL ncores <- 0 MF.mc.cores <- 1 ResultGXwas <- GXwas(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, xmodel = xmodel, trait = trait, covarfile = covarfile,     sex = sex, xsex = xsex, combtest = combtest, MF.p.corr = \"none\",     snp_pval = snp_pval, plot.jpeg = TRUE, suggestiveline = 5, genomewideline = 7.3,     MF.mc.cores = 1, ncores = ncores ) #> • Running FMcombx02 model #> ℹ If you want parallel computation, please provide non-zero value for argument ncores. #> This message is displayed once every 8 hours."},{"path":"/reference/GXwasR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"GXwasR: Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data — GXwasR-package","title":"GXwasR: Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data — GXwasR-package","text":"package performs various models genome-wide x-chromosome wide association analyses applying best practices quality control genetic data.","code":""},{"path":[]},{"path":"/reference/GXwasR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GXwasR: Genome-wide and x-chromosome wide association analyses applying best practices of quality control over genetic data — GXwasR-package","text":"Maintainer: Banabithi Bose banabithi.bose@gmail.com (ORCID)","code":""},{"path":"/reference/GXwasR_data.html","id":null,"dir":"Reference","previous_headings":"","what":"GXwasR Data — GXwasR_data","title":"GXwasR Data — GXwasR_data","text":"Extract decompress GXwasR example data files.","code":""},{"path":"/reference/GXwasR_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GXwasR Data — GXwasR_data","text":"","code":"GXwasR_data()"},{"path":"/reference/GXwasR_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GXwasR Data — GXwasR_data","text":"Path temp directory containing extracted files","code":""},{"path":"/reference/GXwasR_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GXwasR Data — GXwasR_data","text":"Creates temporary subdirectory, decompresses .bz2 files package's extdata folder, returns path extracted data.","code":""},{"path":"/reference/GeneticCorrBT.html","id":null,"dir":"Reference","previous_headings":"","what":"GeneticCorrBT: Computing genetic correlation between two traits. — GeneticCorrBT","title":"GeneticCorrBT: Computing genetic correlation between two traits. — GeneticCorrBT","text":"function computes genetic correlation, quantitative genetic measure describes genetic link two traits predicted indicate pleiotropic gene activity correlation causative loci two traits. example, bivariate GREML analysis determine genetic association two quantitative traits, two binary disease traits case-control studies, quantitative trait binary disease trait following (Yang et al. 2011; Lee et al. 2012) . users want, function gives flexibility compute genetic correlation chromosome-wise.","code":""},{"path":"/reference/GeneticCorrBT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeneticCorrBT: Computing genetic correlation between two traits. — GeneticCorrBT","text":"","code":"GeneticCorrBT(   DataDir,   ResultDir,   finput,   byCHR = FALSE,   REMLalgo = c(0, 1, 2),   nitr = 100,   phenofile,   cat_covarfile = NULL,   quant_covarfile = NULL,   computeGRM = TRUE,   grmfile_name = NULL,   partGRM = FALSE,   autosome = TRUE,   Xsome = TRUE,   nGRM = 3,   cripticut = 0.025,   minMAF = NULL,   maxMAF = NULL,   excludeResidual = FALSE,   ncores = 2 )"},{"path":"/reference/GeneticCorrBT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeneticCorrBT: Computing genetic correlation between two traits. — GeneticCorrBT","text":"DataDir character string file path input files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files genotype data. file needs DataDir. byCHR Boolean value, TRUE FALSE, specifying whether analysis performed chromosome wise . default FALSE. REMLalgo Integer value 0, 1 2, specifying algorithm run REML iterations, 0 average information (AI), 1 Fisher-scoring 2 EM. default option 0, .e. AI-REML (1). nitr Integer value, specifying number iterations performing REML. default 100. phenofile dataframe Bivar RELM four columns family ID, individual ID two trait columns. binary trait, phenotypic value coded 0 1, recognized case-control study (0 controls 1 cases). Missing value represented \"-9\" \"NA\". cat_covarfile character string, specifying name categorical covariate file plain text file header line; columns family ID, individual ID discrete covariates. default NULL. file needs DataDir. quant_covarfile character string, specifying name quantitative covariate file plain text file header line; columns family ID, individual ID continuous covariates. default NULL. file needs DataDir. computeGRM Boolean value, TRUE FALSE, specifying whether compute GRM matrices . default TRUE. grmfile_name string characters specifying prefix autosomal .grm.bin file. Users need provide separate GRM files autosomes X chromosome ResultDir. X chromosomal GRM file \"x\" added autosomal prefix file name. instance, autosomal file \"ABC.grm.bin\", X chromosomal file \"xABC.grm.bim\". providing chromosome-wise GRMs, prefix add \"ChrNumber_\" starting prefix like, \"Chr1_ABC.grm.bin\". default NULL. partGRM Boolean value, TRUE FALSE, specifying whether GRM partitioned n parts (row) GREML model. default FALSE. autosome Boolean value, TRUE FALSE, specifying whether estimate heritability done autosomes . default TRUE. Xsome Boolean value, TRUE FALSE, specifying whether estimate heritability done X chromosome . default TRUE. nGRM Integer value, specifying number partition GRM GREML model. default 3. cripticut Numeric value, specifying threshold create new GRM \"unrelated\" individuals GREML model. default arbitrary chosen 0.025 following (Yang et al. 2011) . minMAF Positive numeric value (< maxMAF), specifying minimum threshold MAF filter SNPs Bivariate GREML model. maxMAF Positive numeric value (minMAF,1), specifying maximum threshold MAF filter SNPs Bivariate GREML model. excludeResidual Boolean value, TRUE FALSE, specifying whether drop residual covariance model. Recommended set TRUE traits measured different individuals. default FALSE. ncores Integer value, specifying number cores used.","code":""},{"path":"/reference/GeneticCorrBT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GeneticCorrBT: Computing genetic correlation between two traits. — GeneticCorrBT","text":"dataframe minimum three columns: Source\" (.e., source heritability) Variance\" (.e. estimated heritability) SE\" (.e., standard error estimated heritability) Source column rows, V(G)_tr1 (genetic variance trait 1), V(G)_tr2 (genetic variance trait 2), C(G)_tr12 (genetic covariance traits 1 2),V(e)_tr1 (residual variance trait 1), V(e)_tr2 (residual variance trait 2), C(e)_tr12 (residual covariance traits 1 2), Vp_tr1 (proportion variance explained SNPs trait 1), Vp_tr2 (proportion variance explained SNPs trait 2), V(G)/Vp_tr1 (phenotypic variance trait 1), V(G)/Vp_tr2 (phenotypic variance trait 2), rG (genetic correlation) n (sample size). case chromosome-wise analysis, 'chromosome' column chromosome code.","code":""},{"path":"/reference/GeneticCorrBT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GeneticCorrBT: Computing genetic correlation between two traits. — GeneticCorrBT","text":"Lee SH, Wray NR, Goddard , Visscher PM (2012). “Estimation pleiotropy complex diseases using SNP-derived genomic relationships restricted maximum likelihood.” Bioinformatics, 28, 2540–2542. doi:10.1093/bioinformatics/bts474 , http://www.ncbi.nlm.nih.gov/pubmed/22843982. Yang J, Lee SH, Goddard , Visscher PM (2011). “GCTA: tool Genome-wide Complex Trait Analysis.” American Journal Human Genetics, 88(1), 76–82.","code":""},{"path":"/reference/GeneticCorrBT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GeneticCorrBT: Computing genetic correlation between two traits. — GeneticCorrBT","text":"","code":"data(\"Example_phenofile\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" byCHR <- TRUE REMLalgo <- 0 nitr <- 3 ncores <- 3 phenofile <- Example_phenofile # Cannot be NULL cat_covarfile <- NULL quant_covarfile <- NULL partGRM <- FALSE # Partition the GRM into m parts (by row), autosome <- TRUE Xsome <- TRUE cripticut <- 0.025 minMAF <- 0.01 # if MAF filter apply maxMAF <- 0.04 excludeResidual <- TRUE  genetic_correlation <- GeneticCorrBT(     DataDir = DataDir, ResultDir = ResultDir, finput = finput, byCHR = byCHR,     REMLalgo = 0, nitr = 10, phenofile = phenofile, cat_covarfile = NULL, quant_covarfile = NULL,     partGRM = FALSE, autosome = TRUE, Xsome = TRUE, nGRM = 3,     cripticut = 0.025, minMAF = NULL, maxMAF = NULL, excludeResidual = TRUE, ncores = ncores ) #> Processing chromosome 1 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 2 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 3 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #>  #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 4 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 5 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 6 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 7 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 8 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 9 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 10 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>  #> Processing chromosome 23 #> ✔ GRM has been saved in the file [/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq/xGXwasR.grm.bin] #> ℹ Number of SNPs in each pair of individuals has been saved in the file [/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq/xGXwasR.grm.N.bin] #>  #> Processing chromosome 24 #> ✖ Error: Log-likelihood not converged (stop after 10 iteractions).  #> ℹ Note: to constrain the correlation being from -1 to 1, a genetic (or residual) variance-covariance matrix is bended to be positive definite. In this case, the SE is unreliable. #> ✖ Convergence issue occurred, please: #>   - set byCHR = TRUE #>   - set different options #>   - verify SNP partitioning or quality of the data #> ℹ The result will be provided for the last iteration. #>"},{"path":"/reference/GetMFPlink.html","id":null,"dir":"Reference","previous_headings":"","what":"GetMFPlink: Getting male and female PLINK binary files. — GetMFPlink","title":"GetMFPlink: Getting male and female PLINK binary files. — GetMFPlink","text":"function prepares separate male female PLINK binary files combined PLINK files.","code":""},{"path":"/reference/GetMFPlink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetMFPlink: Getting male and female PLINK binary files. — GetMFPlink","text":"","code":"GetMFPlink(   DataDir,   ResultDir = tempdir(),   finput,   foutput,   sex,   xplink = FALSE,   autoplink = FALSE )"},{"path":"/reference/GetMFPlink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetMFPlink: Getting male and female PLINK binary files. — GetMFPlink","text":"DataDir Character string file path input PLINK binary files. ResultDir Character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files. foutput Character string, specifying prefix output PLINK binary files. sex Boolean value, 'males' 'females', specifying output PLINK binary files male female samples. xplink Boolean value, TRUE FALSE, specifying output PLINK binary files X chromosome . Default FALSE. autoplink Boolean value, TRUE FALSE, specifying output PLINK binary files autosome . Default FALSE.","code":""},{"path":"/reference/GetMFPlink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetMFPlink: Getting male and female PLINK binary files. — GetMFPlink","text":"None","code":""},{"path":"/reference/GetMFPlink.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GetMFPlink: Getting male and female PLINK binary files. — GetMFPlink","text":"Banabithi Bose","code":""},{"path":"/reference/GetMFPlink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetMFPlink: Getting male and female PLINK binary files. — GetMFPlink","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" sex <- \"females\" x <- GetMFPlink(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, foutput = foutput, sex = sex,     xplink = FALSE, autoplink = FALSE ) #> ✔ Output PLINK files, prefixed as Test_output, are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq"},{"path":"/reference/LDPrune.html","id":null,"dir":"Reference","previous_headings":"","what":"LDPrune: Performs LD pruning on SNP data using PLINK — LDPrune","title":"LDPrune: Performs LD pruning on SNP data using PLINK — LDPrune","text":"function utilizes PLINK perform LD pruning genetic data. identifies removes SNPs high linkage disequilibrium within specified windows.","code":""},{"path":"/reference/LDPrune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LDPrune: Performs LD pruning on SNP data using PLINK — LDPrune","text":"","code":"LDPrune(   DataDir,   finput,   ResultDir = tempdir(),   window_size = 50,   step_size = 5,   r2_threshold = 0.2 )"},{"path":"/reference/LDPrune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LDPrune: Performs LD pruning on SNP data using PLINK — LDPrune","text":"DataDir Character string representing file path input PLINK binary files. finput Character string specifying prefix input PLINK binary files. ResultDir Character string file path output files stored, defaulting temporary directory. window_size Integer, specifying number SNPs include sliding window. step_size Integer, specifying number SNPs window moves step. r2_threshold Numeric, specifying R^2 threshold LD pruning.","code":""},{"path":"/reference/LDPrune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LDPrune: Performs LD pruning on SNP data using PLINK — LDPrune","text":"Returns character vector SNP identifiers remain LD pruning NULL error occurs.","code":""},{"path":"/reference/LDPrune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LDPrune: Performs LD pruning on SNP data using PLINK — LDPrune","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" prunedSNPs <- LDPrune(DataDir, finput, ResultDir, 50, 5, 0.2)"},{"path":"/reference/MAFdiffSexControl.html","id":null,"dir":"Reference","previous_headings":"","what":"MAFdiffSexControl: Test for significantly different minor allele frequency (MAF) between sexes in control samples — MAFdiffSexControl","title":"MAFdiffSexControl: Test for significantly different minor allele frequency (MAF) between sexes in control samples — MAFdiffSexControl","text":"parameters filter SNPs /flag SNPs, function tests significantly different MAF (p-value < 0.05/. SNPs) sexes control samples solely binary phenotypes. Since disparities may caused technical confounding sample biases research cohorts, advised SNPs controls sex difference MAF carefully evaluated identified examination (Khramtsova et. al., 2023). autosomal allele frequencies, sex differences anticipated.","code":""},{"path":"/reference/MAFdiffSexControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MAFdiffSexControl: Test for significantly different minor allele frequency (MAF) between sexes in control samples — MAFdiffSexControl","text":"","code":"MAFdiffSexControl(   DataDir,   ResultDir = tempdir(),   finput,   filterSNP = FALSE,   foutput = NULL )"},{"path":"/reference/MAFdiffSexControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MAFdiffSexControl: Test for significantly different minor allele frequency (MAF) between sexes in control samples — MAFdiffSexControl","text":"DataDir Character string file path input PLINK binary files. ResultDir Character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files male female samples. file needs DataDir. filterSNP Boolean value, TRUE FALSE filtering SNPs (.e., flagged). default FALSE. foutput Character string, specifying prefix output PLINK binary files filtering option SNPs chosen. default NULL.","code":""},{"path":"/reference/MAFdiffSexControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MAFdiffSexControl: Test for significantly different minor allele frequency (MAF) between sexes in control samples — MAFdiffSexControl","text":"list object containing excluded flagged SNPs. filterSNP = TRUE, output filtered PLINK binary files produced inside DataDir.","code":""},{"path":"/reference/MAFdiffSexControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MAFdiffSexControl: Test for significantly different minor allele frequency (MAF) between sexes in control samples — MAFdiffSexControl","text":"Banabithi Bose","code":""},{"path":"/reference/MAFdiffSexControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MAFdiffSexControl: Test for significantly different minor allele frequency (MAF) between sexes in control samples — MAFdiffSexControl","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" x <- MAFdiffSexControl(DataDir, ResultDir, finput, filterSNP = TRUE, foutput = foutput) #> ℹ No SNP to be flagged or excluded."},{"path":"/reference/MergeRegion.html","id":null,"dir":"Reference","previous_headings":"","what":"MergeRegion: Merging two sets of PLINK binary files. — MergeRegion","title":"MergeRegion: Merging two sets of PLINK binary files. — MergeRegion","text":"function combines two genotype datasets based either common SNPs SNPs .","code":""},{"path":"/reference/MergeRegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MergeRegion: Merging two sets of PLINK binary files. — MergeRegion","text":"","code":"MergeRegion(   DataDir,   ResultDir,   finput1,   finput2,   foutput,   use_common_snps = TRUE )"},{"path":"/reference/MergeRegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MergeRegion: Merging two sets of PLINK binary files. — MergeRegion","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). finput1 Character string, specifying prefix first input PLINK binary files. finput2 Character string, specifying prefix first input PLINK binary files. foutput Character string, specifying prefix output PLINK binary files filtering option SNPs chosen. default \"FALSE\". use_common_snps Boolean value, TRUE FALSE, specifying use common SNPs merging use SNPs.","code":""},{"path":"/reference/MergeRegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MergeRegion: Merging two sets of PLINK binary files. — MergeRegion","text":"NULL output PLINK files saved ResultDir.","code":""},{"path":"/reference/MergeRegion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MergeRegion: Merging two sets of PLINK binary files. — MergeRegion","text":"Banabithi Bose","code":""},{"path":"/reference/MergeRegion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MergeRegion: Merging two sets of PLINK binary files. — MergeRegion","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput1 <- \"GXwasR_example\" finput2 <- \"GXwasR_example_imputed\" foutput <- \"Test_output\" y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = TRUE) #> ✔ Merging is done using the common SNPs between the input genotype files. #> ✔ Plink files with merged regions are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq prefixed as Test_output"},{"path":"/reference/MetaGWAS.html","id":null,"dir":"Reference","previous_headings":"","what":"MetaGWAS: Combining summary-level results from two or more GWA studies into a single estimate. — MetaGWAS","title":"MetaGWAS: Combining summary-level results from two or more GWA studies into a single estimate. — MetaGWAS","text":"function combine K sets GWAS association statistics (least similar) phenotype. function employs PLINK's (Purcell et al. 2007)  inverse variance-based analysis run number models, including ) Fixed-effect model b) Random-effect model, assuming may variation genuine underlying effects, .e., effect size beta. 'function also calculates weighted Z-score-based p-values METAL (Willer et al. 2010) . information algorithms, please see associated paper.","code":""},{"path":"/reference/MetaGWAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MetaGWAS: Combining summary-level results from two or more GWA studies into a single estimate. — MetaGWAS","text":"","code":"MetaGWAS(   DataDir,   SummData = c(\"\"),   ResultDir = tempdir(),   SNPfile = NULL,   useSNPposition = TRUE,   UseA1 = FALSE,   GCse = TRUE,   plotname = \"Meta_Analysis.plot\",   pval_filter = \"R\",   top_snp_pval = 1e-08,   max_top_snps = 6,   chosen_snps_file = NULL,   byCHR = FALSE,   pval_threshold_manplot = 1e-05 )"},{"path":"/reference/MetaGWAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MetaGWAS: Combining summary-level results from two or more GWA studies into a single estimate. — MetaGWAS","text":"DataDir character string file path input files needed SummData SNPfile arguments. SummData Vector value containing name(s) .Rda file(s) GWAS summary statistics, ‘SNP’ (.e., SNP identifier), ‘BETA’ (.e., effect-size logarithm odds ratio), ‘SE’ (.e., standard error BETA), ‘P’ (.e., p-values), 'NMISS' (.e., effective sample size), 'L95' (.e., lower limit 95% confidence interval) 'U95' (.e., upper limit 95% confidence interval) mandatory column headers. files needed DataDir. numbers cases controls unequal, effective sample size \\(4 / (1/<# cases> + 1/<# controls>)\\). smaller \"effective\" sample size may used samples include related individuals, however simulations indicate small changes effective sample size relatively little effect final p-value (Willer et al. 2010) . Columns, , CHR (Chromosome code), BP (Basepair position), A1 (First allele code), A2 (Second allele code) columns optional. present, setting useSNPposition FALSE, causes CHR, BP A1 ignored setting UseA1 FALSE causes A1 ignored. , arguments TRUE, function takes care A1/A2 allele flips properly. Otherwise, A1 mismatches thrown . Values CHR/BP allowed vary. ResultDir character string file path output files stored. default tempdir(). SNPfile Character string specifying name plain-text file column SNP names. LD clumped SNPs list chosen SNPs Meta analysis. file needs DataDir. useSNPposition Boolean value, TRUE FALSE using CHR, BP, A1 . default FALSE. Note: FALSE Manhattan QQ plot generated. UseA1 Boolean value, TRUE FALSE A1 used . default FALSE. GCse Boolean value, TRUE FALSE applying study specific genomic control adjust study potential population structure SNPs. default TRUE. users want apply genomic control separately directly genotyped imputed SNPs prior using function, set parameter FALSE. plotname Character string, specifying plot name file containing forest plots SNPs. default “Meta_Analysis.plot”. pval_filter Character value \"R\",\"F\" \"W\", specifying whether p-value threshold chosen based “Random”, “Fixed” “Weighted” effect model SNPs included forest plots. top_snp_pval Numeric value, specifying threshold used filter SNPs forest plots. default 1e-08. max_top_snps Integer value, specifying maximum number top SNPs (SNPs lowest p-values) ploted forest plot file. default 6. chosen_snps_file Character string specifying name plain-text file column SNP names forest plots. default NULL. byCHR Boolean value, TRUE FALSE, specifying whether meta analysis performed chromosome wise . default FALSE. pval_threshold_manplot Numeric value, specifying p-value threshold plotting Manhattan plots.","code":""},{"path":"/reference/MetaGWAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MetaGWAS: Combining summary-level results from two or more GWA studies into a single estimate. — MetaGWAS","text":"list object containing five dataframes. first three dataframes, Mfixed, Mrandom Mweighted contain results fixed effect, random effect weighted model. dataframes can maximum 12 columns, : CHR (Chromosome code) BP (Basepair position) SNP (SNP identifier) A1 (First allele code) A2 (Second allele code) Q (p-value Cochrane's Q statistic) (^2 heterogeneity index (0-100)) P (P-value mata analysis) ES (Effect-size estimate mata analysis) SE (Standard Error mata analysis) CI_L (Lower limit confidence interval) CI_U (Uper limit confidence interval) fourth dataframe contains columns CHR, BP, SNP, A1, A2, Q, \", column N' ( Number valid studies SNP), P (Fixed-effects meta-analysis p-value), columns Fx... (Study x (0-based input file indices) effect estimate, Examples: F0, F1 etc.). fifth dataframe, ProblemSNP three columns, File (file name input data), SNP (Problematic SNPs thrown) Problem (Problem code) Problem codes : BAD_CHR (Invalid chromosome code) BAD_BP  (Invalid base-position code), BAD_ES (Invalid effect-size) BAD_SE (Invalid standard error), MISSING_A1 (Missing allele 1 label) MISSING_A2 (Missing allele 2 label) ALLELE_MISMATCH (Mismatching allele codes across files) .pdf file comprising forest plots SNPs produced ResultDir Plotname prefix. useSNPposition set TRUE, .jpeg file Manhattan Plot Q-Q plot ResultDir Plotname prefix.","code":""},{"path":"/reference/MetaGWAS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MetaGWAS: Combining summary-level results from two or more GWA studies into a single estimate. — MetaGWAS","text":"Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). “PLINK: Tool Set Whole-Genome Association Population-Based Linkage Analyses.” American Journal Human Genetics, 81(3), 559–575. doi:10.1086/519795 . Willer CJ, Li Y, Abecasis GR (2010). “METAL: fast efficient meta-analysis genomewide association scans.” Bioinformatics, 26(17), 2190–2191. doi:10.1093/bioinformatics/btq340 , http://www.ncbi.nlm.nih.gov/pubmed/20616382.","code":""},{"path":"/reference/MetaGWAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetaGWAS: Combining summary-level results from two or more GWA studies into a single estimate. — MetaGWAS","text":"","code":"data(\"Summary_Stat_Ex1\", package = \"GXwasR\") data(\"Summary_Stat_Ex2\", package = \"GXwasR\") DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() SummData <- list(Summary_Stat_Ex1, Summary_Stat_Ex2) SNPfile <- \"UniqueLoci\" useSNPposition <- FALSE UseA1 <- TRUE GCse <- TRUE byCHR <- FALSE pval_filter <- \"R\" top_snp_pval <- 1e-08 max_top_snps <- 10 chosen_snps_file <- NULL pval_threshold_manplot <- 1e-05 plotname <- \"Meta_Analysis.plot\" x <- MetaGWAS(     DataDir = DataDir, SummData = SummData, ResultDir = ResultDir,     SNPfile = NULL, useSNPposition = TRUE, UseA1 = UseA1, GCse = GCse,     plotname = \"Meta_Analysis.plot\", pval_filter, top_snp_pval, max_top_snps,     chosen_snps_file = NULL, byCHR, pval_threshold_manplot ) #> ℹ Processing file number 1 #> ℹ Processing file number 2 #> ℹ Applying study-specific genomic control. #> ℹ Applying study-specific genomic control. #> Processing chromosome     #> ✔ Forest plot files for Meta_Analysis.plot SNPs have been created. #> ℹ You can find them in the directory: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq #> ✔ Forest plot files for Meta_Analysis.plot SNPs have been created. #> ℹ You can find them in the directory: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq"},{"path":"/reference/Mfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for MaleWAS — Mfile","title":"Example dataset for MaleWAS — Mfile","text":"Example dataset MaleWAS","code":""},{"path":"/reference/Mfile.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for MaleWAS — Mfile","text":"data frame 120 rows 7 variables: SNP SNP identifier (rsID); character string CHR Chromosome number; integer BP Base-pair position (GRCh37 GRCh38 assumed); integer A1 Effect allele; character string BETA_M Effect size estimate (beta coefficient) males; numeric SE_M Standard error male beta estimate; numeric P P-value association; numeric","code":""},{"path":"/reference/Mfile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for MaleWAS — Mfile","text":"Banabithi Bose","code":""},{"path":"/reference/PlinkSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"PlinkSummary: Summary of PLINK format genotype dataset — PlinkSummary","title":"PlinkSummary: Summary of PLINK format genotype dataset — PlinkSummary","text":"PlinkSummary: Summary PLINK format genotype dataset","code":""},{"path":"/reference/PlinkSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlinkSummary: Summary of PLINK format genotype dataset — PlinkSummary","text":"","code":"PlinkSummary(DataDir, ResultDir = tempdir(), finput)"},{"path":"/reference/PlinkSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlinkSummary: Summary of PLINK format genotype dataset — PlinkSummary","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path PLINK program set . finput Character string, specifying prefix input PLINK binary files. file needs DataDir.","code":""},{"path":"/reference/PlinkSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PlinkSummary: Summary of PLINK format genotype dataset — PlinkSummary","text":"function called side effect: printing summary statistics console. returns NULL invisibly.","code":""},{"path":"/reference/PlinkSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlinkSummary: Summary of PLINK format genotype dataset — PlinkSummary","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\"  x <- PlinkSummary(DataDir, ResultDir, finput) #> ℹ Dataset: GXwasR_example #> ℹ Number of missing phenotypes: 0 #> ℹ Number of males: 125 #> ℹ Number of females: 151 #> ℹ This is case-control data #> ℹ Number of cases: 108 #> ℹ Number of controls: 168 #> ℹ Number of cases in males: 53 #> ℹ Number of controls in males: 72 #> ℹ Number of cases in females: 55 #> ℹ Number of controls in females: 96 #> ℹ Number of chromosomes: 12 #>   - Chr: 1 #>   - Chr: 2 #>   - Chr: 3 #>   - Chr: 4 #>   - Chr: 5 #>   - Chr: 6 #>   - Chr: 7 #>   - Chr: 8 #>   - Chr: 9 #>   - Chr: 10 #>   - Chr: 23 #>   - Chr: 24 #> ℹ Total number of SNPs: 26527 #> ℹ Total number of samples: 276"},{"path":"/reference/PvalComb.html","id":null,"dir":"Reference","previous_headings":"","what":"PvalComb — PvalComb","title":"PvalComb — PvalComb","text":"function combines p-values two separate GWAS summary statistics (instance male female populations), merges , applies various statistical methods (like Stouffer's method, Fisher's method) integrate p-values. also includes functionality generating plots like Manhattan plots Q-Q plots.","code":""},{"path":"/reference/PvalComb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PvalComb — PvalComb","text":"","code":"PvalComb(   SumstatMale,   SumstatFemale,   combtest,   MF.p.corr = \"none\",   MF.zero.sub = 1e-05,   MF.na.rm = TRUE,   MF.mc.cores = 1,   B = 1000,   plot.jpeg = TRUE,   plotname = \"GXwas.plot\",   PlotDir = tempdir(),   snp_pval,   annotateTopSnp = FALSE,   suggestiveline = 5,   genomewideline = 7.3,   ncores = 0 )"},{"path":"/reference/PvalComb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PvalComb — PvalComb","text":"SumstatMale R dataframe object summary statistics male GWAS five mandatory columns: CHR (numeric chromosome code) SNP (variant id) A1 (allele) POS (base-pair position) P (p-value). columns may present. SumstatFemale R dataframe object summary statistics female GWAS five mandatory columns: SNP A1 TEST POS P columns may present. combtest Character vector specifying method combining p-values stratified GWAS models. Choices “stouffer.method”, \"fisher.method\" \"fisher.method.perm\". fisher.method function combining p-values uses statistic, \\(S = -2 ∑^k /log p\\), follows \\(χ^2\\) distribution 2k degrees freedom (Fisher 1925) . fisher.method.perm, using p-values stratified tests, summary statistic combining p-values \\(S = -2 ∑ /log p\\). p-value statistic can derived randomly generating summary statistics (Rhodes 2002) . Therefore, p-value randomly sampled contributing study, random statistic calculated. fraction random statistics greater equal S gives final p-value. MF.p.corr Character vector specifying method correcting summary p-values FMfcomb FMscomb models. Choices \"bonferroni\", \"BH\" \"none\" Bonferroni,  Benjamini-Hochberg none, respectively. default \"none\". MF.zero.sub Small numeric value substituting p-values 0 GWAS summary statistics. default 0.00001. \\(log(0)\\) results Inf replaces p-values 0 default small float. MF.na.rm Boolean value, TRUE FALSE removing p-values NA stratified GWAS summary satistics case using Fisher’s Stouffer’s methods. default TRUE. MF.mc.cores Number cores used fisher.method.perm combining p-values. default 1. B Integer value specifying number permutation case using fisher.method.perm method. default 10000. plot.jpeg Boolean value, TRUE FALSE saving plots .jpeg file. default TRUE. plotname character string specifying prefix file plots. file saved DataDir. default \"GXwas.plot\". PlotDir character string specifying path directory plots saved. default tempdir(). snp_pval Numeric value p-value threshold annotation. SNPs p-value annotated plot. default 1e-08. annotateTopSnp Boolean value, TRUE FALSE. TRUE, annotates top hit chromosome snp_pval threshold. default FALSE. suggestiveline Numeric value suggestive cut-line GWAS manhattan plot. default 5 (p-value 1e-05). genomewideline Numeric value genome-wide significant cut-line GWAS manhattan plot. default 7.3 (p-value 5e-08). ncores Integer value, specifying number cores parallel processing. default 0 (parallel computation).","code":""},{"path":"/reference/PvalComb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PvalComb — PvalComb","text":"dataframe GWAS summary statistics (XWAS X-chromosomal variants) along Manhattan Q-Q plots.","code":""},{"path":"/reference/PvalComb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PvalComb — PvalComb","text":"Fisher RA (1925). Statistical Methods Research Workers. Oliver Boyd, Edinburgh. Rhodes DR (2002). “Meta-analysis microarrays: interstudy validation gene expression profiles reveals pathway dysregulation prostate cancer.” Cancer Research, 62(15), 4427–4433.","code":""},{"path":"/reference/PvalComb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PvalComb — PvalComb","text":"","code":"data(\"Mfile\", package = \"GXwasR\") data(\"Ffile\", package = \"GXwasR\") SumstatMale <- Mfile colnames(SumstatMale)[3] <- \"POS\" SumstatFemale <- Ffile colnames(SumstatFemale)[3] <- \"POS\" PvalComb_Result <- PvalComb(     SumstatMale = SumstatMale, SumstatFemale = SumstatFemale,     combtest = \"fisher.method\", MF.mc.cores = 1, snp_pval = 0.001, plot.jpeg = FALSE,     suggestiveline = 3, genomewideline = 5.69897, ncores = 1 ) #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq/Stratified_GWAS.png  #> ℹ Saving plot to /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq/Stratified_XWAS.png"},{"path":"/reference/QCsample.html","id":null,"dir":"Reference","previous_headings":"","what":"QCsample: Quality control for samples in the PLINK binary files. — QCsample","title":"QCsample: Quality control for samples in the PLINK binary files. — QCsample","text":"function identifies outlier individuals heterozygosity /missing genotype rates, aids detection samples subpar DNA quality /concentration removed study. Individuals missing 3-7% genotype calls often excluded analysis. correct designation sex important obtain accurate genotype rate estimates, avoid incorrectly removing samples, etc. Details can accessed paper.","code":""},{"path":"/reference/QCsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QCsample: Quality control for samples in the PLINK binary files. — QCsample","text":"","code":"QCsample(   DataDir,   ResultDir,   finput,   foutput = NULL,   imiss,   het,   small_sample_mod = FALSE,   IBD,   IBDmatrix = FALSE,   ambi_out = TRUE,   legend_text_size = 8,   legend_title_size = 7,   axis_text_size = 5,   axis_title_size = 7,   title_size = 9,   filterSample = TRUE )"},{"path":"/reference/QCsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QCsample: Quality control for samples in the PLINK binary files. — QCsample","text":"DataDir Character string, specifying file path input PLINK binary files. default NULL. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files male female samples. file needs DataDir. foutput Character string, specifying prefix output PLINK binary files filtering option samples chosen. imiss Numeric value 0 1 removing samples specified missingness. default 0.03. het Positive numeric value, specifying standard deviation mean heterozygosity rate. samples whose rates specified sd mean heterozygosity rate removed. default 3. default value, outlying heterozygosity rates remove individuals three sd away mean rate (1). small_sample_mod Boolean value indicating whether apply modifications small sample sizes. Default FALSE. IBD Numeric value setting threshold Identity Descent (IBD) analysis. Default NULL. IBDmatrix Boolean value indicating whether generate entire IBD matrix. Default FALSE. case filtered IBD matrix stored. ambi_out Boolean value indicating whether process ambiguous samples. legend_text_size Integer, specifying size legend text plot. legend_title_size Integer, specifying size legend title plot. axis_text_size Integer, specifying size axis text plot. axis_title_size Integer, specifying size axis title plot. title_size Integer, specifying size title plot heterozygosity estimate vs missingness across samples. filterSample Boolean value, TRUE FALSE filtering samples (.e., flagged). default TRUE.","code":""},{"path":"/reference/QCsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QCsample: Quality control for samples in the PLINK binary files. — QCsample","text":"plot heterogysity estimate vs missingness across sample list containing five R dataframe objects, namely, HM (samples outlying heterozygosity /missing genotype rates), Failed_Missingness (samples missing genotype rates), Failed_heterozygosity (samples outlying heterozygosity), Missingness_results (missingness results) Heterozygosity_results (heterozygosity results) output PLINK files ResultDir filtering samples option chosen. Missingness_results contains missingness results individual, six columns FID, IID, MISS_PHENO, N_MISS, N_GENO F_MISS Family ID, Within-family ID, Phenotype missing? (Y/N), Number missing genotype call(s), including obligatory missings heterozygous haploids, number potentially valid call(s), missing call rate, respectively. Heterozygosity_results contains heterozygosity results individual, six columns FID, IID, O(HOM), E(HOM), N(NM), F Family ID, Within-family ID, Observed number homozygotes, Expected number homozygotes, Number (non-missing, non-monomorphic) autosomal genotype observations , Method--moments F coefficient estimate, respectively.","code":""},{"path":"/reference/QCsample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"QCsample: Quality control for samples in the PLINK binary files. — QCsample","text":"Banabithi Bose","code":""},{"path":"/reference/QCsample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QCsample: Quality control for samples in the PLINK binary files. — QCsample","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" imiss <- 0.01 het <- 2 small_sample_mod <- FALSE IBD <- 0.2 IBDmatrix <- FALSE ambi_out <- TRUE  x <- QCsample(     DataDir = DataDir, ResultDir = ResultDir, finput = finput,     foutput = foutput, imiss = imiss, het = het, IBD = IBD,     ambi_out = ambi_out ) #> • Plots are initiated. #> ℹ No. of samples filtered/flagged for missingness: 0 #> ℹ No. of samples filtered/flagged for heterozygosity threshold: 3 #> ℹ No. of samples filtered/flagged for missingness and heterozygosity: 3 #> ℹ No. of samples marked to be filtered out for IDB after missingness and heterozygosity filter: 2 #> ℹ No. of samples in input PLINK files: 276 #> ℹ No. of samples in output PLINK files: 271 #> ✔ Output PLINK files, Test_output with final samples are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq."},{"path":"/reference/QCsnp.html","id":null,"dir":"Reference","previous_headings":"","what":"QCsnp: Quality control (QC) for SNPs. — QCsnp","title":"QCsnp: Quality control (QC) for SNPs. — QCsnp","text":"function performs QC genotype data PLINK binary files. can filter based minor allele frequency, Hardy-Weinberg equilibrium, call rate, differential missingness cases controls. can also perform linkage disequilibrium-based filtering.","code":""},{"path":"/reference/QCsnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QCsnp: Quality control (QC) for SNPs. — QCsnp","text":"","code":"QCsnp(   DataDir,   ResultDir = tempdir(),   finput,   foutput = \"FALSE\",   casecontrol = TRUE,   hweCase = NULL,   hweControl = NULL,   hwe = NULL,   maf = 0.05,   geno = 0.1,   monomorphicSNPs = FALSE,   caldiffmiss = FALSE,   diffmissFilter = FALSE,   dmissX = FALSE,   dmissAutoY = FALSE,   highLD_regions = NULL,   ld_prunning = FALSE,   window_size = 50,   step_size = 5,   r2_threshold = 0.02 )"},{"path":"/reference/QCsnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QCsnp: Quality control (QC) for SNPs. — QCsnp","text":"DataDir character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files male female samples. file needs DataDir. foutput Character string, specifying prefix output PLINK binary files filtering option SNPs chosen. default \"FALSE\". casecontrol Boolean value, TRUE FALSE indicating input PLINK files cases-control status . default FALSE. hweCase Numeric value 0 1 NULL removing SNPs fail Hardy-Weinberg equilibrium cases. default NULL. hweControl Numeric value 0 1 NULL removing SNPs fail Hardy-Weinberg equilibrium controls. default NULL. hwe Numeric value 0 1 NULL removing SNPs fail Hardy-Weinberg equilibrium entire dataset. default NULL. maf Numeric value 0 1 removing SNPs minor allele frequency less specified threshold. default 0.05. geno Numeric value 0 1 removing SNPs less specified call rate. default 0.05. Users can set NULL apply filter. monomorphicSNPs Boolean value, TRUE FALSE filtering monomorphic SNP. default TRUE. caldiffmiss Boolean value, TRUE FALSE, specifying whether compute differential missingness cases controls SNP (threshold \\(0.05/length(unique(. . SNPs test))\\)). default TRUE. diffmissFilter Boolean value, TRUE FALSE, specifying whether filter SNPs flagged differential missingness cases vs controls. default TRUE. dmissX Boolean value, TRUE FALSE computing differential missingness cases controls X chromosome SNPs . default FALSE. diffmissFilter work SNPs. dmissAutoY Boolean value, TRUE FALSE computing differential missingness cases controls SNPs autosomes Y chromosome . default FALSE. dmissX dmissAutoY FALSE, computed genome-wide. diffmissFilter work SNPs. highLD_regions dataframe known high LD regions (Anderson et al. 2010)  provided package. ld_prunning Boolean value, TRUE FALSE applying linkage disequilibrium (LD)-based filtering. window_size Integer value, specifying window size variant counts LD-based filtering. default 50. step_size Integer value, specifying variant count shift window end step LD filtering. default 5. r2_threshold Numeric value 0 1 pairwise \\(r^2\\) threshold LD-based filtering. default 0.02.","code":""},{"path":"/reference/QCsnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QCsnp: Quality control (QC) for SNPs. — QCsnp","text":"list two objects, namely, MonomorSNPs DiffMissSNPs containing monomorphic SNPs SNPs differential missingness cases vs controls, respectively. Output PLINK binary files working directory.","code":""},{"path":"/reference/QCsnp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"QCsnp: Quality control (QC) for SNPs. — QCsnp","text":"Anderson CA, Pettersson FH, Clarke GM, Cardon LR, Morris AP, Zondervan KT (2010). “Data quality control genetic case-control association studies.” Nature Protocols, 5(9), 1564–1573. doi:10.1038/nprot.2010.116 , http://www.ncbi.nlm.nih.gov/pubmed/21085122.","code":""},{"path":"/reference/QCsnp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"QCsnp: Quality control (QC) for SNPs. — QCsnp","text":"Banabithi Bose","code":""},{"path":"/reference/QCsnp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QCsnp: Quality control (QC) for SNPs. — QCsnp","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" geno <- NULL maf <- 0.05 casecontrol <- FALSE hweCase <- NULL hweControl <- NULL hweCase <- NULL monomorphicSNPs <- FALSE caldiffmiss <- FALSE ld_prunning <- FALSE x <- QCsnp(     DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput,     geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl,     ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs,     caldiffmiss = caldiffmiss ) #> ℹ 4214 Ambiguous SNPs (A-T/G-C), indels etc. were removed. #> ✔ Thresholds for maf, geno and hwe worked. #> ℹ 5467 variants removed due to minor allele threshold(s) #> ℹ No filter based on differential missingness will be applied. #> ✔ Output PLINK files prefixed as ,Test_output, with passed SNPs are saved in ResultDir. #> ℹ Input file has 26527 SNPs. #> ℹ Output file has 16846 SNPs after filtering."},{"path":"/reference/Regression_Ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for regression — Regression_Ex","title":"Example dataset for regression — Regression_Ex","text":"Example dataset regression","code":""},{"path":"/reference/Regression_Ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for regression — Regression_Ex","text":"data frame 276 rows 8 variables: SCORE Polygenic score; numeric SEX Sex coded 1 (male) 2 (female); integer PC1 First ancestry principal component; numeric PC2 Second ancestry principal component; numeric PC3 Third ancestry principal component; numeric PC4 Fourth ancestry principal component; numeric PC5 Fifth ancestry principal component; numeric PC6 Sixth ancestry principal component; numeric","code":""},{"path":"/reference/Regression_Ex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for regression — Regression_Ex","text":"Banabithi Bose","code":""},{"path":"/reference/SexCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"SexCheck: Compare sex assignments in the input PLINK files with those imputed from X chromosome inbreeding coefficients — SexCheck","title":"SexCheck: Compare sex assignments in the input PLINK files with those imputed from X chromosome inbreeding coefficients — SexCheck","text":"function compares sex assignments input dataset predicted X chromosome inbreeding coefficients (Purcell et al. 2007) , gives option convert sex assignments predicted values. Implicitly, function computes observed expected autosomal homozygous genotype counts sample reports method--moments F coefficient estimates (.e., observed hom. \\(count - expected count) / (total observations - expected count)\\)). expected counts based loaded imputed minor allele frequencies.  Since imputed MAFs highly inaccurate samples, 'compute freq' parameter set TRUE compute MAF implicitly. Due use allele frequencies, cohort comprised individuals different ancestries, users may need process samples rare ancestry individually dataset unbalanced ancestry distribution. advised run function parameters set zero, examine distribution F estimates (clear gap tight male clump right side distribution females everywhere else). , rerun function parameters correspond gap.","code":""},{"path":"/reference/SexCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SexCheck: Compare sex assignments in the input PLINK files with those imputed from X chromosome inbreeding coefficients — SexCheck","text":"","code":"SexCheck(   DataDir,   ResultDir = tempdir(),   finput,   impute_sex = FALSE,   compute_freq = FALSE,   LD = TRUE,   LD_window_size = 50,   LD_step_size = 5,   LD_r2_threshold = 0.02,   fmax_F = 0.2,   mmin_F = 0.8 )"},{"path":"/reference/SexCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SexCheck: Compare sex assignments in the input PLINK files with those imputed from X chromosome inbreeding coefficients — SexCheck","text":"DataDir Character string file path input PLINK binary files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files. Note: Input dataset contain X Y regions. impute_sex Boolean value, TRUE FALSE, specifying sex imputed . TRUE sex-imputed PLINK files, prefixed, 'seximputed_plink', produced DataDir. compute_freq Boolean value, TRUE FALSE, specifying minor allele frequency (MAF). function requires reasonable MAF estimates, essential use compute_freq = TRUE computing MAF input PLINK file samples input dataset. default FALSE. LD Boolean value, TRUE FALSE applying linkage disequilibrium (LD)-based filtering. default TRUE. LD_window_size Integer value, specifying window size variant count LD-based filtering. default 50. LD_step_size Integer value, specifying variant count shift window end step LD filtering. default 5. LD_r2_threshold Numeric value 0 1 pairwise \\(r^2\\) threshold LD-based filtering. default 0.02. fmax_F Numeric value 0 1. Samples F estimates smaller value labeled females. default 0.2. mmin_F Numeric value 0 1. Samples F estimates larger value labeled males. default 0.8.","code":""},{"path":"/reference/SexCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SexCheck: Compare sex assignments in the input PLINK files with those imputed from X chromosome inbreeding coefficients — SexCheck","text":"dataframe six columns: FID (Family ID) IID (Individual ID) PEDSEX (Sex determined pedigree file (1=male, 2=female)) SNPSEX (Sex determined X chromosome) STATUS (Displays \"PROBLEM\" \"OK\" individual) F (actual X chromosome inbreeding (homozygosity) estimate) PROBLEM arises two sexes match, SNP data pedigree data ambiguous regard sex.","code":""},{"path":"/reference/SexCheck.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SexCheck: Compare sex assignments in the input PLINK files with those imputed from X chromosome inbreeding coefficients — SexCheck","text":"Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). “PLINK: Tool Set Whole-Genome Association Population-Based Linkage Analyses.” American Journal Human Genetics, 81(3), 559–575. doi:10.1086/519795 .","code":""},{"path":"/reference/SexCheck.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SexCheck: Compare sex assignments in the input PLINK files with those imputed from X chromosome inbreeding coefficients — SexCheck","text":"Banabithi Bose","code":""},{"path":"/reference/SexCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SexCheck: Compare sex assignments in the input PLINK files with those imputed from X chromosome inbreeding coefficients — SexCheck","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" LD <- TRUE LD_window_size <- 50 LD_step_size <- 5 LD_r2_threshold <- 0.02 fmax_F <- 0.2 mmin_F <- 0.8 impute_sex <- FALSE compute_freq <- FALSE  x <- SexCheck(     DataDir = DataDir, ResultDir = ResultDir, finput = finput, impute_sex = impute_sex,     compute_freq = compute_freq, LD_window_size = LD_window_size, LD_step_size = LD_step_size,     LD_r2_threshold = 0.02, fmax_F = 0.2, mmin_F = 0.8 )  # Checking if there is any wrong sex assignment problematic_sex <- x[x$STATUS != \"OK\", ]"},{"path":"/reference/SexDiff.html","id":null,"dir":"Reference","previous_headings":"","what":"SexDiff: Sex difference in effect size for each SNP using t-test. — SexDiff","title":"SexDiff: Sex difference in effect size for each SNP using t-test. — SexDiff","text":"function uses GWAS summary statistics sex-stratified tests like \"FMstratified\", evaluate difference effect size males females SNP using t-test. input dataframes include X-chromosome order obtain results sex differences based solely X-linked loci.","code":""},{"path":"/reference/SexDiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SexDiff: Sex difference in effect size for each SNP using t-test. — SexDiff","text":"","code":"SexDiff(Mfile, Ffile)"},{"path":"/reference/SexDiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SexDiff: Sex difference in effect size for each SNP using t-test. — SexDiff","text":"Mfile R dataframe summary statistics GWAS XWAS male samples six mandatory columns, SNP(Variant),CHR(Chromosome number), BP(Base pair position),A1(Minor allele),BETA_M(Effect size) SE_M(Standard error). can generated running FM01comb \"FMstratified\" model GXWAS function. Ffile R dataframe summary statistics GWAS XWAS male samples six mandatory columns, SNP(Variant),CHR(Chromosome number), BP(Base pair position),A1(Minor allele),BETA_F(Effect size) SE_F(Standard error). can generated running FM01comb \"FMstratified\" model GXWAS function.","code":""},{"path":"/reference/SexDiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SexDiff: Sex difference in effect size for each SNP using t-test. — SexDiff","text":"R dataframe seven columns: SNP (Variant) CHR (Chromosome number) BP (Base pair position) A1 (Minor allele) tstat (t-statistics effect-size test) P (p-value) adjP (Bonferroni corrected p-value)","code":""},{"path":"/reference/SexDiff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SexDiff: Sex difference in effect size for each SNP using t-test. — SexDiff","text":"Banabithi Bose","code":""},{"path":"/reference/SexDiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SexDiff: Sex difference in effect size for each SNP using t-test. — SexDiff","text":"","code":"data(\"Mfile\", package = \"GXwasR\") data(\"Ffile\", package = \"GXwasR\") Difftest <- SexDiff(Mfile, Ffile)  significant_snps <- Difftest[Difftest$adjP < 0.05, ]"},{"path":"/reference/SexDiffZscore.html","id":null,"dir":"Reference","previous_headings":"","what":"SexDiffZscore: Z-score-based sex difference test. — SexDiffZscore","title":"SexDiffZscore: Z-score-based sex difference test. — SexDiffZscore","text":"function calculates difference kind measured entities,(example: including SNP heritability estimate, genetic correlation, GWAS β values) sexes using Z-score associated p-value statistic. STAT/SE normally distributed test statistics independent sex, test well calibrated. statistics positively correlated, test conservative (1). define SNPs SDEs variants extreme ends distribution absolute value Z-score greater 3(|Z-score| > 3), roughly equivalent p <10−3, represents 0.3% tested SNPs. input dataframes include X-chromosome order obtain results sex differences based solely X-linked loci.","code":""},{"path":"/reference/SexDiffZscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SexDiffZscore: Z-score-based sex difference test. — SexDiffZscore","text":"","code":"SexDiffZscore(inputdata)"},{"path":"/reference/SexDiffZscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SexDiffZscore: Z-score-based sex difference test. — SexDiffZscore","text":"inputdata dataframe five columns: ID (.e., SNP ID phenotype interest, etc.) Fstat (.e., measured statistics females) Fse (.e., standard error measured statistics females) Mstat (.e., measured statistics males) Mse (.e., standard error measured statistics males)","code":""},{"path":"/reference/SexDiffZscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SexDiffZscore: Z-score-based sex difference test. — SexDiffZscore","text":"Original input dataframe : Zscore (.e., Z-score), p (.e., p-value) adjP (.e., Bonferroni corrected p-value) columns added.","code":""},{"path":"/reference/SexDiffZscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SexDiffZscore: Z-score-based sex difference test. — SexDiffZscore","text":"","code":"data(\"Example_h2data\", package = \"GXwasR\") inputdata <- Example_h2data x <- SexDiffZscore(inputdata)"},{"path":"/reference/SexRegress.html","id":null,"dir":"Reference","previous_headings":"","what":"SexRegress: Performing linear regression analysis with quantitative response variable. — SexRegress","title":"SexRegress: Performing linear regression analysis with quantitative response variable. — SexRegress","text":"function used check association two variables. instance, PRS sex.","code":""},{"path":"/reference/SexRegress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SexRegress: Performing linear regression analysis with quantitative response variable. — SexRegress","text":"","code":"SexRegress(fdata, regressor_index, response_index)"},{"path":"/reference/SexRegress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SexRegress: Performing linear regression analysis with quantitative response variable. — SexRegress","text":"fdata R dataframe object. column header response contain response variable. column regressor. regressor_index Integer value, specifying column number main regressor variable. response_index Integer value, specifying column number response variable.","code":""},{"path":"/reference/SexRegress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SexRegress: Performing linear regression analysis with quantitative response variable. — SexRegress","text":"Numeric value containing regression estimate (\"Estimate\"), standard error (\"Std. Error\"), statistics (\"t value\") p-value (\\(Pr(>|t|)\\))","code":""},{"path":"/reference/SexRegress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SexRegress: Performing linear regression analysis with quantitative response variable. — SexRegress","text":"","code":"data(\"Regression_Ex\", package = \"GXwasR\") fdata <- Regression_Ex fdata$SEX <- as.factor(as.character(fdata$SEX)) response_index <- 1 regressor_index <- 2  x <- SexRegress(fdata, regressor_index, response_index)"},{"path":"/reference/Summary_Stat_Ex1.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for GWAS summary statistics — Summary_Stat_Ex1","title":"Example dataset for GWAS summary statistics — Summary_Stat_Ex1","text":"Example dataset GWAS summary statistics","code":""},{"path":"/reference/Summary_Stat_Ex1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for GWAS summary statistics — Summary_Stat_Ex1","text":"data frame 1,500 rows 12 variables: CHR Chromosome number; integer SNP SNP identifier (rsID); character string BP Base-pair position; integer A1 Effect allele; character string TEST Test type (e.g., \"ADD\" additive model); character string NMISS Number non-missing samples SNP; integer BETA Effect size estimate (beta coefficient); numeric SE Standard error effect size estimate; numeric L95 Lower bound 95% confidence interval; numeric U95 Upper bound 95% confidence interval; numeric STAT Test statistic (e.g., Wald z-score); numeric P P-value association; numeric","code":""},{"path":"/reference/Summary_Stat_Ex1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for GWAS summary statistics — Summary_Stat_Ex1","text":"Banabithi Bose","code":""},{"path":"/reference/Summary_Stat_Ex2.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for GWAS summary statistics — Summary_Stat_Ex2","title":"Example dataset for GWAS summary statistics — Summary_Stat_Ex2","text":"Example dataset GWAS summary statistics","code":""},{"path":"/reference/Summary_Stat_Ex2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for GWAS summary statistics — Summary_Stat_Ex2","text":"data frame 1,500 rows 12 variables: CHR Chromosome number; integer SNP SNP identifier (rsID); character string BP Base-pair position; integer A1 Effect allele; character string TEST Test type (e.g., \"ADD\" additive model); character string NMISS Number non-missing samples SNP; integer BETA Effect size estimate (beta coefficient); numeric SE Standard error effect size estimate; numeric L95 Lower bound 95% confidence interval; numeric U95 Upper bound 95% confidence interval; numeric STAT Test statistic (e.g., Wald z-score); numeric P P-value association; numeric","code":""},{"path":"/reference/Summary_Stat_Ex2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for GWAS summary statistics — Summary_Stat_Ex2","text":"Banabithi Bose","code":""},{"path":"/reference/SumstatGenCorr.html","id":null,"dir":"Reference","previous_headings":"","what":"SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary Statistics — SumstatGenCorr","title":"SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary Statistics — SumstatGenCorr","text":"function calculates genetic correlation two summary statistics using specified reference linkage disequilibrium (LD) matrix UK Biobank.","code":""},{"path":"/reference/SumstatGenCorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary Statistics — SumstatGenCorr","text":"","code":"SumstatGenCorr(   ResultDir = tempdir(),   referenceLD,   sumstat1,   sumstat2,   Nref = 335265,   N0 = min(sumstat1$N),   eigen.cut = \"automatic\",   lim = exp(-18),   parallel = FALSE,   numCores = 2 )"},{"path":"/reference/SumstatGenCorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary Statistics — SumstatGenCorr","text":"ResultDir Directory results saved. referenceLD Reference LD matrix identifier. LD matrices eigen-decomposition 335,265 genomic British UK Biobank individuals. Two sets reference panel provided: 307,519 QCed UK Biobank Axiom Array SNPs. size 7.5 GB unzipping. 1,029,876 QCed UK Biobank imputed SNPs. size 31 GB unzipping. Although takes time, using imputed panel provides accurate estimates genetic correlations. Therefore GWAS includes HapMap3 SNPs, recommend using imputed reference panel. sumstat1 Data frame first set summary statistics. input data frame include following columns: SNP, SNP ID; A1, effect allele; A2, reference allele; N, sample size; Z, z-score; Z given, alternatively, may provide: b, estimate marginal effect GWAS; se, standard error estimates marginal effects GWAS. sumstat2 Data frame second set summary statistics. input data frame include following columns: SNP, SNP ID; A1, effect allele; A2, reference allele; N, sample size; Z, z-score; Z given, alternatively, may provide: b, estimate marginal effect GWAS; se, standard error estimates marginal effects GWAS. Nref Sample size reference sample LD computed. default UK Biobank reference sample used, Nref = 335265 N0 Number individuals included cohorts. estimated genetic correlation usually robust misspecified N0. given, default value set minimum sample size across SNPs cohort 1 cohort 2. eigen.cut eigenvalues eigenvectors LD score matrix used HDL. Users allowed specify numeric value 0 1 eigen.cut. example, eigen.cut = 0.99 means using leading eigenvalues explaining 99% variance correspondent eigenvectors. default 'automatic' used, eigen.cut gives stable heritability estimates used. lim Tolerance limitation, default lim = exp(-18). parallel Boolean value, TRUE FALSE whether perform parallel computation. default FALSE numCores number cores used. default 2.","code":""},{"path":"/reference/SumstatGenCorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary Statistics — SumstatGenCorr","text":"list returned : rg: estimated genetic correlation. rg.se: standard error estimated genetic correlation. P: P-value based Wald test. estimates.df: detailed matrix includes estimates standard errors heritabilities, genetic covariance genetic correlation. eigen.use: eigen.cut used computation.","code":""},{"path":"/reference/SumstatGenCorr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary Statistics — SumstatGenCorr","text":"function requires access reference LD data via environment variable. must set one following environment variables appropriate directory: UKB_ARRAY_PATH Axiom Array reference (UKB_array_SVD_eigen90_extraction) UKB_IMPUTED_PATH full imputed reference (UKB_imputed_SVD_eigen99_extraction) UKB_IMPUTED_HAPMAP2_PATH imputed HapMap2 subset (UKB_imputed_hapmap2_SVD_eigen99_extraction)","code":""},{"path":"/reference/SumstatGenCorr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary Statistics — SumstatGenCorr","text":"Ning Z, Pawitan Y, Shen X (2020). “High-definition likelihood inference genetic correlations across human complex traits.” Nature Genetics, 52, 859–864. doi:10.1038/s41588-020-0676-4 .","code":""},{"path":"/reference/SumstatGenCorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SumstatGenCorr: Genetic Correlation Calculation from GWAS Summary Statistics — SumstatGenCorr","text":"","code":"sumstat1 <- GXwasR:::simulateSumstats() sumstat2 <- GXwasR:::simulateSumstats() if (nzchar(Sys.getenv(\"UKB_IMPUTED_HAPMAP2_PATH\"))) {     res <- SumstatGenCorr(         ResultDir = tempdir(),         referenceLD = \"UKB_imputed_hapmap2_SVD_eigen99_extraction\",         sumstat1 = sumstat1,         sumstat2 = sumstat2,         parallel = TRUE     ) } #> Analysis starts on Fri Aug  8 10:12:22 2025 #> ℹ 9276 out of 769306 (1.21%) SNPs in reference panel are available in GWAS 1. #> ℹ 9458 out of 769306 (1.23%) SNPs in reference panel are available in GWAS 2. #> ! Warning: More than 1% SNPs in reference panel are missed in GWAS 1. This may generate bias in estimation. Please make sure that you are using the correct reference panel. #> ! Warning: More than 1% SNPs in reference panel are missed in GWAS 2. This may generate bias in estimation. Please make sure that you are using the correct reference panel. #>    |                                                                               |                                                                      |   0%   |                                                                               |=                                                                     |   2%   |                                                                               |==                                                                    |   3%   |                                                                               |===                                                                   |   5%   |                                                                               |=====                                                                 |   6%   |                                                                               |======                                                                |   8%   |                                                                               |=======                                                               |  10%   |                                                                               |========                                                              |  11%   |                                                                               |=========                                                             |  13%   |                                                                               |==========                                                            |  15%   |                                                                               |===========                                                           |  16%   |                                                                               |============                                                          |  18%   |                                                                               |==============                                                        |  19%   |                                                                               |===============                                                       |  21%   |                                                                               |================                                                      |  23%   |                                                                               |=================                                                     |  24%   |                                                                               |==================                                                    |  26%   |                                                                               |===================                                                   |  27%   |                                                                               |====================                                                  |  29%   |                                                                               |=====================                                                 |  31%   |                                                                               |=======================                                               |  32%   |                                                                               |========================                                              |  34%   |                                                                               |=========================                                             |  35%   |                                                                               |==========================                                            |  37%   |                                                                               |===========================                                           |  39%   |                                                                               |============================                                          |  40%   |                                                                               |=============================                                         |  42%   |                                                                               |==============================                                        |  44%   |                                                                               |================================                                      |  45%   |                                                                               |=================================                                     |  47%   |                                                                               |==================================                                    |  48%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================                                  |  52%   |                                                                               |=====================================                                 |  53%   |                                                                               |======================================                                |  55%   |                                                                               |========================================                              |  56%   |                                                                               |=========================================                             |  58%   |                                                                               |==========================================                            |  60%   |                                                                               |===========================================                           |  61%   |                                                                               |============================================                          |  63%   |                                                                               |=============================================                         |  65%   |                                                                               |==============================================                        |  66%   |                                                                               |===============================================                       |  68%   |                                                                               |=================================================                     |  69%   |                                                                               |==================================================                    |  71%   |                                                                               |===================================================                   |  73%   |                                                                               |====================================================                  |  74%   |                                                                               |=====================================================                 |  76%   |                                                                               |======================================================                |  77%   |                                                                               |=======================================================               |  79%   |                                                                               |========================================================              |  81%   |                                                                               |==========================================================            |  82%   |                                                                               |===========================================================           |  84%   |                                                                               |============================================================          |  85%   |                                                                               |=============================================================         |  87%   |                                                                               |==============================================================        |  89%   |                                                                               |===============================================================       |  90%   |                                                                               |================================================================      |  92%   |                                                                               |=================================================================     |  94%   |                                                                               |===================================================================   |  95%   |                                                                               |====================================================================  |  97%   |                                                                               |===================================================================== |  98%   |                                                                               |======================================================================| 100% #>  #>  #> Integrating piecewise results #> Point estimates: #> • Heritability of phenotype 1:  0.00e+00 #> • Heritability of phenotype 2:  0.00e+00 #> • Genetic Covariance:  -1.46e-05 #> • Genetic Correlation:  -Inf #> ! Warning: Heritability of one trait was estimated to be 0, which may be due to: #>   1) The true heritability is very small; #>   2) The sample size is too small; #>   3) Many SNPs in the chosen reference panel are missing in the GWAS; #>   4) There is a severe mismatch between the GWAS population and the population for computing the reference panel #> ℹ Continuing computing standard error with jackknife #>    |                                                                               |                                                                      |   0%   |                                                                               |=                                                                     |   2% #>  #> • Heritability of phenotype 1: 0.00e+00 ( 0.00e+00 ) #> • Heritability of phenotype 2: 0.00e+00 ( 0.00e+00 ) #> • Genetic Covariance: -1.46e-05 ( 0.00e+00 ) #> • Genetic Correlation: -Inf ( NA ) #> • P: NA #> ! Warning: Heritability of one trait was estimated to be 0, which may be due to: #>   1) The true heritability is very small; #>   2) The sample size is too small; #>   3) Many SNPs in the chosen reference panel are missing in the GWAS. #>  #> Analysis finished at Fri Aug  8 10:12:53 2025"},{"path":"/reference/TestXGene.html","id":null,"dir":"Reference","previous_headings":"","what":"TestXGene: Performing gene-based association test using GWAS/XWAS summary statistics. — TestXGene","title":"TestXGene: Performing gene-based association test using GWAS/XWAS summary statistics. — TestXGene","text":"function performs gene-based association tests using GWAS/XWAS summary statistics SNP-SNP correlation matrices.  SNP-SNP correlation matrices, users flexibility use either base genotype data 1000 Genomes Phase 3 reference genotype data. Users also options define regional positions genes include SNPs according investigation. function computes gene-wise SNP-SNP correlation matrices can perform nine different gene-based tests, , “BT\" (burden test), \"SKAT\" (sequence kernel association test), \"SKATO\" (combination BT SKAT), \"sumchi\" (sum χ2-statistics), \"ACAT\" (aggregated Cauchy association test combining P values), \"PCA\"(principal component approach), \"FLM\"( functional multiple linear regression model), \"simpleM\" (Bonferroni correction test), \"minp\" (minimum P-value) leveraging PLINK1.9 (Purcell et al. 2007)  sumFREGAT (Svishcheva et al. 2019; Belonogova et al. 2022)  tools. Though function implicitly performs X-linked gene-based test, flexible perform analysis genome-wide. details different tests, please follow associated paper.","code":""},{"path":"/reference/TestXGene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TestXGene: Performing gene-based association test using GWAS/XWAS summary statistics. — TestXGene","text":"","code":"TestXGene(   DataDir,   ResultDir = tempdir(),   finput,   sumstat,   gene_file,   gene_range = 5e+05,   score_file,   ref_data = NULL,   max_gene = NULL,   sample_size = NULL,   genebasedTest = c(\"SKAT\", \"SKATO\", \"sumchi\", \"ACAT\", \"BT\", \"PCA\", \"FLM\", \"simpleM\",     \"minp\"),   gene_approximation = TRUE,   beta_par,   weights_function,   geno_variance_weights,   kernel_p_method = \"kuonen\",   acc_devies = 1e-08,   lim_devies = 1e+06,   rho = TRUE,   skato_p_threshold = 0.8,   anno_type = \"\",   mac_threshold,   reference_matrix_used,   regularize_fun,   pca_var_fraction = 0.85,   flm_basis_function = \"fourier\",   flm_num_basis = 25,   flm_poly_order = 4,   flip_genotypes = FALSE,   omit_linear_variant = FALSE )"},{"path":"/reference/TestXGene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TestXGene: Performing gene-based association test using GWAS/XWAS summary statistics. — TestXGene","text":"DataDir character string file path input files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files genotype data. file used compute correlation SNPs. file needs DataDir. base genotype data unavailable, users can use 1000 Genomes Project samples. Users use population closely represents base sample. ACAT model, parameter mandatory set NULL. sumstat dataframe object GWAS summary statistics. base-genotype data used compute genetic correlations, mandatory columns : Column 1: CHROM (.e., chromosome code), Column 2: POS (.e., base-pair position), Column 3: ID (.e. SNP IDs), Column 4: P (.e., p-values), Column 5: BETA (.e., effect-size), Column 6: A1 (.e., effect allele), Column 7: A2 (.e., alternative allele) Column 8: EAF (.e., effect allele frequency) mandatory base-genotype data used compute genetic correlations. Otherwise, users using reference data, columns 5 8 optional. Also, case, columns, REF (.e., reference allele), ALT (.e., alternative allele) present compare alleles reference file exclude genetic variants alleles match. additional column, ANNO functional annotations (like \"intron_variant\", \"synonymous\", \"missense\" etc.) gene_file Character string, specifying prefix name .txt file listing genes refFlat format. file needs DataDir. X-linked gene files, \"Xlinkedgenes_hg19.txt\" \"Xlinkedgenes_hg38.txt\" autosomal gene files, “Autosomes_hg19.txt” “Autosomes_hg38.txt” can specified. default \"Xlinkedgenes_hg19.txt\". genome built agreement analysis. gene_range Integer value, specifying stream stream range (kilo base) gene SNPs considered. default 500000. score_file Character string, specifying prefix file used produce score files Z scores P values beta input GWAS summary statistics. ref_data Character string, specifying path reference dataframe additional data needed recode user data according correlation matrices used. contains ID column names  SNPs,  REF ALT columns alleles coded 0 1, respectively. Effect sizes data inverted variants effect alleles different ALT alleles reference data. presented, REF ALT columns input data used sort variants alleles different reference data. dataframe  can also source map data allele frequencies present data. AF column reference file represents allele frequency ALT allele. default \"ref1KG.MAC5.EUR_AF.RData\". max_gene Positive integer value, specifying number genes gene-based test performed. default NULL consider genes. sample_size Positive integer value, specifying sample size GWAS. needed FLM PCA models. genebasedTest Character string, specifying name gene-based test. Nine different tests can specified, \"SKAT\",\"SKATO\",\"sumchi\",\"ACAT\",\"BT\",\"PCA\", \"FLM\",\"simpleM\",\"minp\". default \"SKAT\". gene_approximation Boolean value, TRUE FALSE, specifying whether approximation large genes (>= 500 SNPs) used. Applicable SKAT, SKATO, sumchi, PCA, FLM. default TRUE methods). beta_par Boolean value, TRUE FALSE, specifying whether approximation large genes (>= 500 SNPs) used. Applicable SKAT, SKATO, sumchi, PCA, FLM (default = TRUE methods). weights_function function MAF assign weights genetic variant. default NULL. case weights calculated using beta distribution. geno_variance_weights Character string, indicating whether scores weighted variance genotypes: \"none\" (.e., weights applied, resulting sum chi-square test); \"se.beta\" (.e., scores weighted variance genotypes estimated P values effect sizes); \"af\" (.e., scores weighted variance genotypes calculated \\(AF * (1 - AF)\\), AF allele frequency. kernel_p_method Character string, specifying method computing P value kernel-based tests, SKAT, SKATO sumchi. Available methods \"kuonen\" (Belonogova et al. 2022)  \"davies\" (Belonogova et al. 2022)  \"hybrid\" (Belonogova et al. 2022) . default \"kuonen\". acc_devies Positive numeric value, specifying accuracy parameter \"davies\" method. default 1e-8. lim_devies Positive numeric value, specifying limit parameter \"davies\" method. default 1e+6. rho Logical value, 'TRUE' 'FALSE' can vector grid values 0 1. TRUE, optimal test (SKAT-O) performed (12). default grid c(0, 0.1^2, 0.2^2, 0.3^2, 0.4^2, 0.5^2, 0.5, 1). skato_p_threshold Positive numeric value, specifying largest P value considered important performing computational optimization SKAT-O. P values larger skato_p_threshold processed via burden test. default 0.8 anno_type character (character vector) indicating annotation types used. default \"\" (.e, nothing). mac_threshold Integer value, specifying threshold MACs (Minor allele content) calculated MAFs. ACAT, scores MAC <= 10 combined using Burden test. reference_matrix_used Boolean value, TRUE FALSE logical indicating whether correlation matrices generated using reference matrix. default FALSE.  TRUE, regularization algorithms applied ensure invertibility numerical stability matrices. regularize_fun Character string, specifying one two regularization algorithms ‘reference_matrix’ TRUE:  'LH' (default) 'derivLH'. Currently, give similar results. pca_var_fraction P ositive numeric value, specifying minimal proportion genetic variance within region explained principal components used PCA method. also valid 'simpleM'. default 0.85. flm_basis_function Character string, specifying name basis function type beta-smooth FLM method. Can set \"bspline\" (B-spline basis) \"fourier\" (Fourier basis, default). flm_num_basis Positive integer value, specifying number basis functions used beta-smooth FLM method. default 25. flm_poly_order Positive integer value, specifying polynomial order used \"bspline\" FLM model. default = 4, corresponds cubic B-splines. effect Fourier bases used flip_genotypes L ogical value, TRUE FALSE, indicating whether genotypes genetic variants flipped (relabelled) better functional representation (13). default FALSE. omit_linear_variant Logical value, TRUE FALSE, indicating whether omit linearly dependent genetic variants. done FLM test (4). default FALSE.","code":""},{"path":"/reference/TestXGene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TestXGene: Performing gene-based association test using GWAS/XWAS summary statistics. — TestXGene","text":"data frame columns: gene chrom start end markers (.e., numbers SNPs), filtered.markers (.e. filtered SNPs) pvalue (.e., p-value). Additionally,  “BT”, “beta” (.e., gene-level estimates betas) “beta.se” (.e., standard errors betas). “FLM”, “model” column names functional models used region. Names shortly describe functional basis number basis functions used. E.g., \"F25\" means 25 Fourier basis functions, \"B15\" means 15 B-spline basis functions. “PCA”, “ncomponents” (number principal components used region) “explained.variance.fraction” (.e., proportion genetic variance make ) columns.","code":""},{"path":"/reference/TestXGene.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"TestXGene: Performing gene-based association test using GWAS/XWAS summary statistics. — TestXGene","text":"Belonogova NM, Svishcheva GR, Kirichenko AV, Zorkoltseva IV, Tsepilov YA, Axenovich TI (2022). “sumSTAAR: flexible framework gene-based association studies using GWAS summary statistics.” PLoS Computational Biology, 18(6), e1010172. doi:10.1371/journal.pcbi.1010172 , http://www.ncbi.nlm.nih.gov/pubmed/35653402. Purcell S, Neale B, Todd-Brown K, Thomas L, Ferreira MAR, Bender D, Maller J, Sklar P, de Bakker PIW, Daly MJ, others (2007). “PLINK: Tool Set Whole-Genome Association Population-Based Linkage Analyses.” American Journal Human Genetics, 81(3), 559–575. doi:10.1086/519795 . Svishcheva GR, Belonogova NM, Zorkoltseva IV, Kirichenko AV, Axenovich TI (2019). “Gene-based association tests using GWAS summary statistics.” Bioinformatics, 35(19), 3701–3708. doi:10.1093/bioinformatics/btz172 , http://www.ncbi.nlm.nih.gov/pubmed/30860568.","code":""},{"path":"/reference/TestXGene.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"TestXGene: Performing gene-based association test using GWAS/XWAS summary statistics. — TestXGene","text":"Banabithi Bose","code":""},{"path":"/reference/TestXGene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TestXGene: Performing gene-based association test using GWAS/XWAS summary statistics. — TestXGene","text":"","code":"if (!(Sys.getenv(\"CI\") == \"true\" && Sys.info()[[\"sysname\"]] == \"Darwin\")) {     data(\"XWAS_Summary_Example\", package = \"GXwasR\")     DataDir <- GXwasR:::GXwasR_data()     ResultDir <- tempdir()     finput <- \"GXwasR_example\"     sumstat <- XWAS_Summary_Example     ref_data <- NULL     gene_file <- \"Xlinkedgenes_hg19.txt\"     gene_range <- 500000     max_gene <- 10     gene_approximation <- TRUE     beta_par <- c(1, 25)     weights_function <- NULL     geno_variance_weights <- \"se.beta\"     method <- \"kuonen\"     acc_devies <- 1e-8     lim_devies <- 1e+6     rho <- TRUE     skato_p_threshold <- 0.8     mac_threshold <- 3     sample_size <- 4000     reference_matrix_used <- FALSE     regularize_fun <- \"LH\"     pca_var_fraction <- 0.85     flm_basis_function <- \"fourier\"     flm_num_basis <- 25     flm_poly_order <- 4     flip_genotypes <- FALSE     omit_linear_variant <- FALSE     kernel_p_method <- \"kuonen\"     anno_type <- \"\"     GenetestResult <- TestXGene(DataDir, ResultDir, finput, sumstat, gene_file,         gene_range, score_file, ref_data, max_gene, sample_size,         genebasedTest = \"SKAT\",         gene_approximation, beta_par, weights_function, geno_variance_weights,         kernel_p_method, acc_devies, lim_devies, rho, skato_p_threshold, anno_type,         mac_threshold, reference_matrix_used, regularize_fun, pca_var_fraction,         flm_basis_function, flm_num_basis, flm_poly_order, flip_genotypes,         omit_linear_variant     ) } #> ℹ 80 of 80 variants found in reference #> ℹ Effect sizes recoded for 0 variant(s) #> ✔ Allele frequencies found and linked #> ✔ File /private/var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T/RtmpPuiyDq/gene.test.score.file.vcf.gz has been created and indexed #> ℹ 157 genes are having 321 SNPs #> • SNP-SNP correlation matrices are being created... #> ✔ SNP-SNP correlation matrices are done. #> ! Warning: No variants to analyze in gene uc004cqy.3, skipped #> ! Warning: No variants to analyze in gene uc004csf.3, skipped #> ! Warning: No variants to analyze in gene uc004csr.3, skipped #> ! Warning: No variants to analyze in gene uc004cst.2, skipped #> ! Warning: No variants to analyze in gene uc004csu.1, skipped #> ! Warning: No variants to analyze in gene uc004csx.4, skipped #> ! Warning: No variants to analyze in gene uc004cuw.3, skipped"},{"path":"/reference/XWAS_Summary_Example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for XWAS summary statistics — XWAS_Summary_Example","title":"Example dataset for XWAS summary statistics — XWAS_Summary_Example","text":"Example dataset XWAS summary statistics","code":""},{"path":"/reference/XWAS_Summary_Example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for XWAS summary statistics — XWAS_Summary_Example","text":"data frame 80 rows 8 variables: CHROM Chromosome number (23 X chromosome); integer POS Genomic position (base-pair); integer ID SNP identifier (rsID); character string P P-value association; numeric BETA Effect size estimate (beta coefficient); numeric A1 Effect allele; character string A2 allele; character string EAF Effect allele frequency; numeric","code":""},{"path":"/reference/XWAS_Summary_Example.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for XWAS summary statistics — XWAS_Summary_Example","text":"Banabithi Bose","code":""},{"path":"/reference/Xhwe.html","id":null,"dir":"Reference","previous_headings":"","what":"Xhwe: Filter X-chromosome variants for HWE in females. — Xhwe","title":"Xhwe: Filter X-chromosome variants for HWE in females. — Xhwe","text":"function part post-imputation quality control process prior GWAS. tests Hardy-Weinberg Equilibrium (HWE) X-chromosome variants females. Males' hemizygous X chromosome prevents testing HWE haploid X calls, testing HWE across samples high failure rate. function check HWE across X females (cases controls combined), following recommendation Khramtsova et al., 2023, can remove regions analysis samples. p-value threshold filtering SNPs 0.05/.. X-chromosome variants.","code":""},{"path":"/reference/Xhwe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Xhwe: Filter X-chromosome variants for HWE in females. — Xhwe","text":"","code":"Xhwe(DataDir, ResultDir = tempdir(), finput, filterSNP = TRUE, foutput)"},{"path":"/reference/Xhwe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Xhwe: Filter X-chromosome variants for HWE in females. — Xhwe","text":"DataDir Character string file path input PLINK binary files. ResultDir Character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files. filterSNP Boolean value, TRUE FALSE filtering X-chromosome variants .e., SNPs input file (.e., flagged). default FALSE. foutput Character string, specifying prefix output PLINK binary files filtering option SNPs chosen. default \"FALSE\".","code":""},{"path":"/reference/Xhwe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Xhwe: Filter X-chromosome variants for HWE in females. — Xhwe","text":"list object containing SNPs. filterSNP = TRUE, output filtered PLINK binary files produced inside DataDir.","code":""},{"path":"/reference/Xhwe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Xhwe: Filter X-chromosome variants for HWE in females. — Xhwe","text":"Banabithi Bose","code":""},{"path":"/reference/Xhwe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Xhwe: Filter X-chromosome variants for HWE in females. — Xhwe","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" foutput <- \"Test_output\" x <- Xhwe(     DataDir = DataDir, ResultDir = ResultDir,     finput = finput, foutput = foutput, filterSNP = TRUE ) #> ✔ Output PLINK files, prefixed as female, are in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq #> This test is running on a case-control dataset with female samples. #> ℹ Failed SNPs are excluded from the output PLINK files prefixed as Test_output is in /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq x #> [1] \"rs56053951\" \"rs12353847\" \"rs5940058\""},{"path":"/reference/detect_os_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the operating system type — detect_os_type","title":"Detect the operating system type — detect_os_type","text":"helper function detects current operating system returns standardized string branching logic.","code":""},{"path":"/reference/detect_os_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the operating system type — detect_os_type","text":"","code":"detect_os_type()"},{"path":"/reference/detect_os_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the operating system type — detect_os_type","text":"character string: one \"windows\", \"unix\", \"unknown\".","code":""},{"path":"/reference/detect_os_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the operating system type — detect_os_type","text":"","code":"detect_os_type() #> [1] \"unix\""},{"path":"/reference/example_data_study_sample_ancestry.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of ancestry dataframe of samples — example_data_study_sample_ancestry","title":"Example of ancestry dataframe of samples — example_data_study_sample_ancestry","text":"Example ancestry dataframe samples","code":""},{"path":"/reference/example_data_study_sample_ancestry.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of ancestry dataframe of samples — example_data_study_sample_ancestry","text":"data frame 276 rows 2 variables: V1 Individual ID; character string V2 Population ancestry label; character string (e.g., \"EUR_GBR\")","code":""},{"path":"/reference/example_data_study_sample_ancestry.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example of ancestry dataframe of samples — example_data_study_sample_ancestry","text":"Banabithi Bose","code":""},{"path":"/reference/executePlinkMAF.html","id":null,"dir":"Reference","previous_headings":"","what":"executePlinkMAF: Execute PLINK to Calculate Minor Allele Frequencies (MAF) — executePlinkMAF","title":"executePlinkMAF: Execute PLINK to Calculate Minor Allele Frequencies (MAF) — executePlinkMAF","text":"function executes PLINK calculate minor allele frequencies (MAF) given dataset. sets necessary PLINK environment, runs PLINK command, returns MAF results DataFrame. Intermediate files generated PLINK cleaned execution.","code":""},{"path":"/reference/executePlinkMAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"executePlinkMAF: Execute PLINK to Calculate Minor Allele Frequencies (MAF) — executePlinkMAF","text":"","code":"executePlinkMAF(DataDir, ResultDir, finput)"},{"path":"/reference/executePlinkMAF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"executePlinkMAF: Execute PLINK to Calculate Minor Allele Frequencies (MAF) — executePlinkMAF","text":"DataDir Character. Directory containing input PLINK files (.bed, .bim, .fam). ResultDir Character. Directory store output files generated PLINK. finput Character. Base name PLINK input files (without extensions).","code":""},{"path":"/reference/executePlinkMAF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"executePlinkMAF: Execute PLINK to Calculate Minor Allele Frequencies (MAF) — executePlinkMAF","text":"DataFrame containing minor allele frequency (MAF) results.","code":""},{"path":"/reference/executePlinkMAF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"executePlinkMAF: Execute PLINK to Calculate Minor Allele Frequencies (MAF) — executePlinkMAF","text":"","code":"DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() finput <- \"GXwasR_example\" maf_data <- executePlinkMAF(DataDir, ResultDir, finput)"},{"path":"/reference/highLD_hg19.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for high LD regions in hg19 built — highLD_hg19","title":"Example dataset for high LD regions in hg19 built — highLD_hg19","text":"Example dataset high LD regions hg19 built","code":""},{"path":"/reference/highLD_hg19.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for high LD regions in hg19 built — highLD_hg19","text":"data frame 20 rows 4 variables: chr Chromosome name (e.g., \"chr1\"); character string start Start position high-LD region (base-pair); integer end End position high-LD region (base-pair); integer index Region index identifier; integer","code":""},{"path":"/reference/highLD_hg19.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Example dataset for high LD regions in hg19 built — highLD_hg19","text":"Banabithi Bose","code":""},{"path":"/reference/plinkVCF.html","id":null,"dir":"Reference","previous_headings":"","what":"plinkVCF: Converting VCF files to PLINK binary files and vice-versa. — plinkVCF","title":"plinkVCF: Converting VCF files to PLINK binary files and vice-versa. — plinkVCF","text":"function performs conversion VCF files PLINK binary formats. VCF PLINK files conversion, specify FAM file converting VCF PLINK format, PLINK just create 'dummy' FAM file name dataset missing phenotypes missing sex.","code":""},{"path":"/reference/plinkVCF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plinkVCF: Converting VCF files to PLINK binary files and vice-versa. — plinkVCF","text":"","code":"plinkVCF(   DataDir,   ResultDir = tempdir(),   finput,   foutput,   VtoP = FALSE,   PtoV = TRUE,   Famfile = NULL,   PVbyCHR = TRUE )"},{"path":"/reference/plinkVCF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plinkVCF: Converting VCF files to PLINK binary files and vice-versa. — plinkVCF","text":"DataDir character string file path input PLINK binary files input files. ResultDir character string file path output files stored. default tempdir(). finput Character string, specifying prefix input PLINK binary files vcf files. file needs DataDir. foutput Character string, specifying prefix output PLINK binary files filtering option SNPs chosen. default \"FALSE\". VtoP Boolean value, TRUE FALSE, specifying conversion VCF files PLINK binary files . default TRUE. PtoV Boolean value, TRUE FALSE, specifying conversion PLINK binary files VCF  files . default TRUE. Famfile Character string, specifying name original .fam file VtoP set TRUE. file needs DataDir. default NULL. PVbyCHR Boolean value, TRUE FALSE specifying PLINK vcf conversion chromosome-wise . default TRUE.","code":""},{"path":"/reference/plinkVCF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plinkVCF: Converting VCF files to PLINK binary files and vice-versa. — plinkVCF","text":"NULL output files saved ResultDir.","code":""},{"path":"/reference/plinkVCF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plinkVCF: Converting VCF files to PLINK binary files and vice-versa. — plinkVCF","text":"Banabithi Bose","code":""},{"path":"/reference/plinkVCF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plinkVCF: Converting VCF files to PLINK binary files and vice-versa. — plinkVCF","text":"","code":"finput <- \"GXwasR_example\" # Plink file foutput <- \"GXwasR_example1\" DataDir <- GXwasR:::GXwasR_data() ResultDir <- tempdir() PtoV <- TRUE VtoP <- FALSE Famfile <- NULL PVbyCHR <- FALSE plinkVCF(DataDir, ResultDir, finput, foutput, VtoP, PtoV, Famfile, PVbyCHR) #> ✔ Output files created in ResultDir: /var/folders/d6/gtwl3_017sj4pp14fbfcbqjh0000gp/T//RtmpPuiyDq"},{"path":"/reference/simulateSumstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate mock summary statistics for SNPs — simulateSumstats","title":"Simulate mock summary statistics for SNPs — simulateSumstats","text":"Generates mock data frame containing 100 SNPs random identifiers, distinct allele pairs, sample sizes, Z-scores. Intended internal testing demonstration purposes.","code":""},{"path":"/reference/simulateSumstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate mock summary statistics for SNPs — simulateSumstats","text":"","code":"simulateSumstats()"},{"path":"/reference/simulateSumstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate mock summary statistics for SNPs — simulateSumstats","text":"data.frame columns: SNP, A1, A2, N, Z","code":""},{"path":"/reference/validate_reference_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Path to Reference Data Set — validate_reference_data","title":"Validate Path to Reference Data Set — validate_reference_data","text":"Validates reference data either 'HapMapIII_NCBI36' 'ThousandGenome' present path specified appropriate environment variable: 'HAPMAPIII_NCBI36_DIR' HapMapIII_NCBI36 'THOUSANDGENOME_DIR' ThousandGenome files missing paths set, informative guidance provided.","code":""},{"path":"/reference/validate_reference_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Path to Reference Data Set — validate_reference_data","text":"","code":"validate_reference_data(refdata)"},{"path":"/reference/validate_reference_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Path to Reference Data Set — validate_reference_data","text":"refdata character string specifying reference dataset validate. one 'HapMapIII_NCBI36' 'ThousandGenome'.","code":""},{"path":"/reference/validate_reference_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Path to Reference Data Set — validate_reference_data","text":"normalized path directory containing validated reference data files.","code":""},{"path":"/reference/validate_reference_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Path to Reference Data Set — validate_reference_data","text":"","code":"if (nzchar(Sys.getenv(\"HAPMAPIII_NCBI36_DIR\"))) {     validate_reference_data(\"HapMapIII_NCBI36\") } #> [1] \"/Users/mayerdav/Downloads/HapMapIII_NCBI36\"  if (nzchar(Sys.getenv(\"HAPMAPIII_NCBI36_DIR\"))) {     validate_reference_data(\"ThousandGenome\") } #> [1] \"/Users/mayerdav/Downloads/Ref10Kgenome_files\""},{"path":[]},{"path":"/news/index.html","id":"new-features-0-99-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"GXwasR 0.99.0","text":"Added NEWS.md file track changes package. package implements various statistical genetics models Genome-Wide Association (GWA) X-Chromosome Wide Association (XWA) analyses sex-combined sex-stratified way considering X-Chromosome Inactivation (XCI) pattern. addition association analysis, package also enables testing sex differences genetic effects, including implementation specific models applying best practices additional quality control (QC) genetic data required tests. package includes twenty-five different functions six different categories enable comprehensive pipeline sex-aware genetic association analysis common variants unrelated individuals.","code":""},{"path":"/news/index.html","id":"significant-user-visible-changes-0-99-0","dir":"Changelog","previous_headings":"","what":"SIGNIFICANT USER-VISIBLE CHANGES","title":"GXwasR 0.99.0","text":"Initial release","code":""},{"path":"/news/index.html","id":"bug-fixes-0-99-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"GXwasR 0.99.0","text":"bugs reported fixed initial release. See details http://bioconductor.org/developers/package-guidelines/#news.","code":""}]
