---
title: "GXwasR Overview"
author: 
  - name: "Banabithi Bose"
    affiliation:
    - Northwestern University
    - University of Colorado Anschutz Medical Campus
    email: banabithi.bose@gmail.com
output: 
  BiocStyle::html_document:
    self_contained: false
    toc: true
    toc_float: true
    toc_depth: 3
    code_folding: show
date: "`r BiocStyle::doc_date()`"
package: "`r BiocStyle::pkg_ver('GXwasR')`"
vignette: >
  %\VignetteIndexEntry{GXwasR_overview}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(
    fig.path = "./",
    fig.width = 8, fig.height = 6,
    collapse = TRUE,
    comment = "#>",
    crop = NULL ## Related to https://stat.ethz.ch/pipermail/bioc-devel/2020-April/016656.html
)
```

```{r vignetteSetup, echo=FALSE, message=FALSE, warning = FALSE}
## Bib setup
library("RefManageR")

## Write bibliography information
bib <- c(
    R = citation(),
    BiocStyle = citation("BiocStyle")[1],
    knitr = citation("knitr")[1],
    RefManageR = citation("RefManageR")[1],
    rmarkdown = citation("rmarkdown")[1],
    sessioninfo = citation("sessioninfo")[1],
    testthat = citation("testthat")[1],
    GXwasR = citation("GXwasR")[1]
)
```

# <a id = "GXwasR Description"></a> GXwasR Description: 

This package implements various statistical genetics models for Genome-Wide Association (GWA) and X-Chromosome Wide Association (XWA) analyses in a sex-combined or sex-stratified way considering X-Chromosome Inactivation (XCI) pattern. In addition to association analysis, the package also enables testing for sex differences in genetic effects, including the implementation of specific models and applying best practices for additional quality control (QC) of genetic data required for these tests. The package includes thirty different functions in six different categories (A-F) which enable a comprehensive pipeline for sex-aware genetic association analysis of common variants with unrelated individuals.

# Basics

## Install `GXwasR`

`R` is an open-source statistical environment which can be easily modified to enhance its functionality via packages. `r BiocStyle::Biocpkg("GXwasR")` is a `R` package available via the [Bioconductor](http://bioconductor.org) repository for packages. `R` can be installed on any operating system from [CRAN](https://cran.r-project.org/) after which you can install `r BiocStyle::Biocpkg("GXwasR")` by using the following commands in your `R` session:

```{r "install", eval = FALSE}
if (!requireNamespace("BiocManager", quietly = TRUE)) {
    install.packages("BiocManager")
}

BiocManager::install("GXwasR")

## Check that you have a valid Bioconductor installation
BiocManager::valid()
```

# Functions Overview

This document lists all the functions in GXwasR package.It offers thirty-three distinct functions, which are organized into six main categories: A) Pre-imputation QC, B) Post-imputation QC, C) Sex-combined and sex-stratified GWAS with specialized analysis for XWAS, D) Sex-differential test, E) High level analysis and a range of F) Utility Functions. These categories and their respective functions are detailed in the below Table.

## Table of Functions
| Function        | Description                                                                                                                                    | Category                                       |
|---------------------|--------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------|
| QCsnp()             | Performs quality control for SNPs in PLINK binary files.                                                                                   | Pre-imputation QC, Post-imputation QC          |
| QCsample()          | Identifies outlier individuals based on heterozygosity and missing genotype rates.                                                         | Pre-imputation QC, Post-imputation QC          |
| AncestryCheck()     | Evaluates samples' ancestry and flags outliers using PCA.                                                                                  | Pre-imputation QC                              |
| SexCheck()          | Compares sex assignments with predictions from X chromosome inbreeding coefficients.                                                       | Pre-imputation QC                              |
| Xhwe()              | Filters X-chromosome variants violating Hardy-Weinberg Equilibrium in females.                                                             | Post-imputation QC                             |
| MAFdiffSexControl() | Tests for significant MAF differences between sexes in control samples.                                                                    | Post-imputation QC                             |
| FilterRegion()      | Filters out specific chromosomal regions from input PLINK files.                                                                           | Post-imputation QC, Utility Functions          |
| GXwas()             | Runs GWAS models in autosomes with XWAS models like "FMcomb01", "FMcomb02", "FMstratified" for binary and quantitative traits, and "GWAScxci" for binary traits. Focuses on additive SNP effects, multi-collinearity issues, and includes multiple covariates and their interactions. | Sex-combined and sex-stratified GWAS with XWAS |
| PvalComb()          | Combines p-values from separate GWAS using various statistical methods and corrects summary p-values.                                      | Sex-combined and sex-stratified GWAS with XWAS |
| SexDiff()           | Evaluates sex differences in genetic effect size for each SNP.                                                                             | Sex-differential test                          |
| SexDiffZscore()     | Presumably analyzes sex differences using Z-score methodology, comparing genetic effect sizes between males and females.                   | Sex-differential test                          |
| DiffZeroOne()       | Assesses Z-scores for deviation from one and zero for statistics like genetic correlation.                                                 | Sex-differential test                          |
| TestXGene()         | Performs gene-based association tests using GWAS/XWAS summary statistics.                                                                  | High level analysis                            |
| MetaGWAS()          | Combines summary-level GWAS results using fixed-effect and random-effect models.                                                           | High level analysis                            |
| ComputePRS()        | Calculates polygenic risk scores from GWAS summary statistics.                                                                             | High level analysis                            |
| GeneticCorrBT()     | Computes genetic correlation between to traits.                                                                                            | High level analysis                            |
| EstimateHerit()     | Computes SNP heritability using GREML or LDSC models.                                                                                      | High level analysis                            |
| SexRegress()        | Not previously described. Presumably involves regression analyses specific to sex-stratified data.                                         | High level analysis                            |
| FilterPlinkSample() | Prepares PLINK binary files with desired samples based on specified criteria.                                                              | Utility Functions                              |
| ComputeGeneticPC()  | Computes principal components from a genetic relationship matrix for population stratification correction.                                 | Utility Functions                              |
| ClumpLD()           | Performs linkage disequilibrium clumping of SNPs.                                                                                          | Utility Functions                              |
| GetMFPlink()        | Prepares separate male and female PLINK binary files from combined files.                                                                  | Utility Functions                              |
| plinkVCF()          | Converts VCF files to plink binary formats and vice versa, including creation of dummy FAM files.                                          | Utility Functions                              |
| MergeRegion()       | Combines two genotype datasets based on common or all SNPs.                                                                                | Utility Functions                              |
| FilterAllele()      | Filters out multi-allelic variants from the genetic dataset, essential for maintaining dataset integrity and simplifying genetic analyses. | Utility Functions                              |
| PlinkSummary()      | Provides a summary of genotype datasets in plink format.                                                                                   | Utility Functions                              |
| FilterSNP()         | Filters out specific SNPs from the dataset based on user-defined criteria.                                                                 | Utility Functions                              |
| DummyCovar()        | Recodes a categorical covariate into binary dummy variables for statistical analysis in GXwasR.                                            | Utility Functions                              |
| GXWASmiami()        | Generates Miami plots for GWAS and XWAS.                                                                                                   | Utility Functions                              |
| SumstatGenCorr()    | Genetic Correlation Calculation from GWAS Summary Statistics.                                                                              | High level analysis                            |
| LDPrune()           | Performs LD pruning on SNP data.                                                                                                           | Utility Functions                              | 
| executePlinkMAF()   | Calculate minor allele frequencies.                                                                                                        | Utility Functions                              |    
| ComputeLD()         | Calculate LD matrix.                                                                                                                       | Utility Functions                              | 

```{r}
library(GXwasR)
library(magrittr)
library(printr)
library(rmarkdown)
```

### Function 1
```{r}
help(QCsnp, package = "GXwasR")
```

### Function 2
```{r}
help(QCsample, package = "GXwasR")
```

### Function 3
```{r}
help(AncestryCheck, package = "GXwasR")
```

### Function 4
```{r}
help(SexCheck, package = "GXwasR")
```

### Function 5
```{r}
help(Xhwe, package = "GXwasR")
```

### Function 6
```{r}
help(MAFdiffSexControl, package = "GXwasR")
```

### Function 7
```{r}
help(FilterRegion, package = "GXwasR")
```

### Function 8
```{r}
help(GXwas, package = "GXwasR")
```

### Function 9
```{r}
help(PvalComb, package = "GXwasR")
```

### Function 10
```{r}
help(SexDiff, package = "GXwasR")
```

### Function 11
```{r}
help(SexDiffZscore, package = "GXwasR")
```

### Function 12
```{r}
help(DiffZeroOne, package = "GXwasR")
```

### Function 13
```{r}
help(TestXGene, package = "GXwasR")
```

### Function 14
```{r}
help(MetaGWAS, package = "GXwasR")
```

### Function 15
```{r}
help(ComputePRS, package = "GXwasR")
```

### Function 16
```{r}
help(GeneticCorrBT, package = "GXwasR")
```

### Function 17
```{r}
help(EstimateHerit, package = "GXwasR")
```

### Function 18
```{r}
help(SexRegress, package = "GXwasR")
```

### Function 19
```{r}
help(FilterPlinkSample, package = "GXwasR")
```

### Function 20
```{r}
help(ComputeGeneticPC, package = "GXwasR")
```

### Function 21
```{r}
help(ClumpLD, package = "GXwasR")
```

### Function 22
```{r}
help(GetMFPlink, package = "GXwasR")
```

### Function 23
```{r}
help(plinkVCF, package = "GXwasR")
```

### Function 24
```{r}
help(MergeRegion, package = "GXwasR")
```

### Function 25
```{r}
help(FilterAllele, package = "GXwasR")
```

### Function 26
```{r}
help(PlinkSummary, package = "GXwasR")
```

### Function 27
```{r}
help(FilterSNP, package = "GXwasR")
```

### Function 28
```{r}
help(DummyCovar, package = "GXwasR")
```

### Function 29
```{r}
help(GXWASmiami, package = "GXwasR")
```

### Function 30
```{r}
help(SumstatGenCorr, package = "GXwasR")
```

### Function 31
```{r}
help(LDPrune, package = "GXwasR")
```

### Function 32
```{r}
help(executePlinkMAF, package = "GXwasR")
```

### Function 33
```{r}
help(ComputeLD, package = "GXwasR")
```

# Tutorials

Please follow these tutorials to learn more about the functionality of the package GXwasR.

Tutorial for performing post-imputation QC followed by sex-aware association tests: (vignette:Use of GXwasR)

* Tutorial for performing pre-imputation QC using GXwasR: [https://boseb.github.io/GXwasR/articles/preimputationQC.html](https://boseb.github.io/GXwasR/articles/preimputationQC.html)
* Tutorial for performing post-imputation QC using GXwasR: [https://boseb.github.io/GXwasR/articles/postimputationQC.html](https://boseb.github.io/GXwasR/articles/postimputationQC.html)
* Tutorial for running GWAS, XWAS and Sex-differential Tests using GXwasR: [https://boseb.github.io/GXwasR/articles/gwas_models.html](https://boseb.github.io/GXwasR/articles/gwas_models.html)
* Tutorial for computing Polygenic Risk Score using GXwasR: [https://boseb.github.io/GXwasR/articles/GXwasR_PRS.html](https://boseb.github.io/GXwasR/articles/GXwasR_PRS.html)
* Tutorial for ancestry estimation: [https://boseb.github.io/GXwasR/articles/decoding_ancestry.html](https://boseb.github.io/GXwasR/articles/decoding_ancestry.html)
* Tutorial for meta analysis using GXwasR: [https://boseb.github.io/GXwasR/articles/meta_analysis.html](https://boseb.github.io/GXwasR/articles/meta_analysis.html)
* Tutorial for genetic correlation using GWAS Summary Statistics using GXwasR: [https://boseb.github.io/GXwasR/articles/genetic_correlation_sumstat.html](https://boseb.github.io/GXwasR/articles/genetic_correlation_sumstat.html)

## Running Examples

### `QCsnp()`

```{r overview-QCsnp}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
foutput <- "Test_output"
geno <- NULL
maf <- 0.05
casecontrol <- FALSE
hweCase <- NULL
hweControl <- NULL
hweCase <- NULL
monomorphicSNPs <- FALSE
caldiffmiss <- FALSE
ld_prunning <- FALSE
x <- QCsnp(
    DataDir = DataDir, ResultDir = ResultDir, finput = finput, foutput = foutput,
    geno = geno, maf = maf, hweCase = hweCase, hweControl = hweControl,
    ld_prunning = ld_prunning, casecontrol = casecontrol, monomorphicSNPs = monomorphicSNPs,
    caldiffmiss = caldiffmiss
)
x
```

### `QCsample()`

```{r overview-QCsample}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
foutput <- "Test_output"
imiss <- 0.01
het <- 2
small_sample_mod <- FALSE
IBD <- 0.2
IBDmatrix <- FALSE
ambi_out <- TRUE
#'
x <- QCsample(
    DataDir = DataDir, ResultDir = ResultDir, finput = finput,
    foutput = foutput, imiss = imiss, het = het, IBD = IBD,
    ambi_out = ambi_out
)
x$HM
x$Failed_Missingness
x$Failed_heterozygosity
x$Failed_IBD
x$Missingness_results %>% head()
```

### `AncestryCheck()`

```{r overview-AncestryCheck}
data("highLD_hg19", package = "GXwasR")
data("example_data_study_sample_ancestry", package = "GXwasR")
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
reference <- "HapMapIII_NCBI36"
highLD_regions <- highLD_hg19
study_pop <- example_data_study_sample_ancestry # PreimputeEX
studyLD_window_size <- 50
studyLD_step_size <- 5
studyLD_r2_threshold <- 0.02
filterSNP <- TRUE
studyLD <- FALSE
referLD <- FALSE
referLD_window_size <- 50
referLD_step_size <- 5
referLD_r2_threshold <- 0.02
outlier <- TRUE
outlier_threshold <- 3
x <- AncestryCheck(
    DataDir = DataDir, ResultDir = ResultDir, finput = finput,
    reference = reference, highLD_regions = highLD_regions,
    study_pop = study_pop, studyLD = studyLD, referLD = referLD,
    outlierOf = "EUR", outlier = outlier, outlier_threshold = outlier_threshold
)
x$Outlier_samples %>% head()
x$Samples_with_predicted_ancestry %>% head()
x$NonOutlier_samples %>% head()
x$pca_plot
```

### `SexCheck()`

```{r overview-SexCheck}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
LD <- TRUE
LD_window_size <- 50
LD_step_size <- 5
LD_r2_threshold <- 0.02
fmax_F <- 0.2
mmin_F <- 0.8
impute_sex <- FALSE
compute_freq <- FALSE

x <- SexCheck(
    DataDir = DataDir, ResultDir = ResultDir, finput = finput, impute_sex = impute_sex,
    compute_freq = compute_freq, LD_window_size = LD_window_size, LD_step_size = LD_step_size,
    LD_r2_threshold = 0.02, fmax_F = 0.2, mmin_F = 0.8
)

# Checking if there is any wrong sex assignment
problematic_sex <- x[x$STATUS != "OK", ]
problematic_sex
```

### `Xhwe()`

```{r overview-Xhwe}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
foutput <- "Test_output"
x <- Xhwe(
    DataDir = DataDir, ResultDir = ResultDir,
    finput = finput, foutput = foutput, filterSNP = TRUE
)
x
```

### `MAFdiffSexControl()`

```{r overview-MAFdiffSexControl}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
foutput <- "Test_output"
x <- MAFdiffSexControl(DataDir, ResultDir, finput, filterSNP = TRUE, foutput = foutput)
x
```

### `FilterRegion()`

```{r overview-FilterRegion}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
foutput <- "PostimputeEX_QC1"
x <- FilterRegion(
    DataDir = DataDir, ResultDir = ResultDir,
    finput = finput, foutput = foutput, CHRX = TRUE, CHRY = FALSE,
    filterPAR = TRUE, filterXTR = TRUE, filterAmpliconic = TRUE,
    regionfile = FALSE, filterCHR = NULL, Hg = "38", exclude = TRUE
)
x
```

### `GXwas()`

```{r overview-GXwas}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
standard_beta <- TRUE
xsex <- FALSE
sex <- TRUE
Inphenocov <- NULL
covartest <- NULL
interaction <- FALSE
MF.na.rm <- FALSE
B <- 10000
MF.zero.sub <- 0.00001
trait <- "binary"
xmodel <- "FMcombx02"
combtest <- "fisher.method"
snp_pval <- 1e-08
covarfile <- NULL
ncores <- 0
MF.mc.cores <- 1
ResultGXwas <- GXwas(
    DataDir = DataDir, ResultDir = ResultDir,
    finput = finput, xmodel = xmodel, trait = trait, covarfile = covarfile,
    sex = sex, xsex = xsex, combtest = combtest, MF.p.corr = "none",
    snp_pval = snp_pval, plot.jpeg = TRUE, suggestiveline = 5, genomewideline = 7.3,
    MF.mc.cores = 1, ncores = ncores
)
ResultGXwas %>% head()
```

### `PvalComb()`

```{r overview-PvalComb}
data("Mfile", package = "GXwasR")
data("Ffile", package = "GXwasR")
SumstatMale <- Mfile
colnames(SumstatMale)[3] <- "POS"
SumstatFemale <- Ffile
colnames(SumstatFemale)[3] <- "POS"
PvalComb_Result <- PvalComb(
    SumstatMale = SumstatMale, SumstatFemale = SumstatFemale,
    combtest = "fisher.method", MF.mc.cores = 1, snp_pval = 0.001, plot.jpeg = FALSE,
    suggestiveline = 3, genomewideline = 5.69897, ncores = 1
)
PvalComb_Result %>% head()
```

### `SexDiff()`

```{r overview-SexDiff}
data("Mfile", package = "GXwasR")
data("Ffile", package = "GXwasR")
Difftest <- SexDiff(Mfile, Ffile)
significant_snps <- Difftest[Difftest$adjP < 0.05, ]
significant_snps
```

### `SexDiffZscore()`

```{r overview-SexDiffZscore}
data("Example_h2data", package = "GXwasR")
inputdata <- Example_h2data
x <- SexDiffZscore(inputdata)
x
```

### `DiffZeroOne()`

```{r overview-DiffZeroOne}
data("Example_rgdata", package = "GXwasR")
inputdata <- Example_rgdata
colnames(inputdata) <- c("Trait", "Stat", "SE")
x <- DiffZeroOne(inputdata, FALSE, TRUE)
x
```
### `TestXGene()`

```{r overview-TestXGene}
data("XWAS_Summary_Example", package = "GXwasR")
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
sumstat <- XWAS_Summary_Example
ref_data <- NULL
gene_file <- "Xlinkedgenes_hg19.txt"
gene_range <- 500000
max_gene <- 10
gene_approximation <- TRUE
beta_par <- c(1, 25)
weights_function <- NULL
geno_variance_weights <- "se.beta"
method <- "kuonen"
acc_devies <- 1e-8
lim_devies <- 1e+6
rho <- TRUE
skato_p_threshold <- 0.8
mac_threshold <- 3
sample_size <- 4000
reference_matrix_used <- FALSE
regularize_fun <- "LH"
pca_var_fraction <- 0.85
flm_basis_function <- "fourier"
flm_num_basis <- 25
flm_poly_order <- 4
flip_genotypes <- FALSE
omit_linear_variant <- FALSE
kernel_p_method <- "kuonen"
anno_type <- ""
GenetestResult <- TestXGene(DataDir, ResultDir, finput, sumstat, gene_file,
    gene_range, score_file, ref_data, max_gene, sample_size,
    genebasedTest = "SKAT",
    gene_approximation, beta_par, weights_function, geno_variance_weights,
    kernel_p_method, acc_devies, lim_devies, rho, skato_p_threshold, anno_type,
    mac_threshold, reference_matrix_used, regularize_fun, pca_var_fraction,
    flm_basis_function, flm_num_basis, flm_poly_order, flip_genotypes,
    omit_linear_variant
)
GenetestResult
```

### `MetaGWAS()`

```{r overview-MetaGWAS}
data("Summary_Stat_Ex1", package = "GXwasR")
data("Summary_Stat_Ex2", package = "GXwasR")
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
SummData <- list(Summary_Stat_Ex1, Summary_Stat_Ex2)
SNPfile <- "UniqueLoci"
useSNPposition <- FALSE
UseA1 <- TRUE
GCse <- TRUE
byCHR <- FALSE
pval_filter <- "R"
top_snp_pval <- 1e-08
max_top_snps <- 10
chosen_snps_file <- NULL
pval_threshold_manplot <- 1e-05
plotname <- "Meta_Analysis.plot"
x <- MetaGWAS(
    DataDir = DataDir, SummData = SummData, ResultDir = ResultDir,
    SNPfile = NULL, useSNPposition = TRUE, UseA1 = UseA1, GCse = GCse,
    plotname = "Meta_Analysis.plot", pval_filter, top_snp_pval, max_top_snps,
    chosen_snps_file = NULL, byCHR, pval_threshold_manplot
)
x$Resultfixed %>% head()
x$ProblemSNP %>% head()

```

### `ComputePRS()`

```{r overview-ComputePRS}
data("Summary_Stat_Ex1", package = "GXwasR")
data("Example_phenofile", package = "GXwasR")
data("Example_covarfile", package = "GXwasR")
data("Example_pthresoldfile", package = "GXwasR")
data("highLD_hg19", package = "GXwasR")
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
summarystat <- Summary_Stat_Ex1[, c(2, 4, 7, 1, 3, 12)]
phenofile <- Example_phenofile # Cannot be NULL
# The interested phenotype column should be labeled as "Pheno1".
covarfile <- Example_covarfile
clump_p1 <- 0.0001
clump_p2 <- 0.0001
clump_kb <- 500
clump_r2 <- 0.5
byCHR <- TRUE
pthreshold <- Example_pthresoldfile$Threshold
ld_prunning <- TRUE
highLD_regions <- highLD_hg19
window_size <- 50
step_size <- 5
r2_threshold <- 0.02
nPC <- 6 # We can incorporate PCs into our PRS analysis to account for population stratification.
pheno_type <- "binary"

PRSresult <- ComputePRS(DataDir, ResultDir, finput, summarystat, phenofile, covarfile,
    effectsize = "BETA", LDreference = "GXwasR_example", ldclump = FALSE, clump_p1, clump_p2,
    clump_r2, clump_kb, byCHR = TRUE, pthreshold = pthreshold, highLD_regions = highLD_regions,
    ld_prunning = TRUE, window_size = 50, step_size = 5, r2_threshold = 0.02, nPC = 6,
    pheno_type = "binary"
)
PRSresult$PRS %>% head()
PRSresult$BestP
PRSresult$PRS_plot
```

### `GeneticCorrBT()`

```{r overview-GeneticCorrBT}
data("Example_phenofile", package = "GXwasR")
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
byCHR <- TRUE
REMLalgo <- 0
nitr <- 3
ncores <- 3
phenofile <- Example_phenofile # Cannot be NULL
cat_covarfile <- NULL
quant_covarfile <- NULL
partGRM <- FALSE # Partition the GRM into m parts (by row),
autosome <- TRUE
Xsome <- TRUE
cripticut <- 0.025
minMAF <- 0.01 # if MAF filter apply
maxMAF <- 0.04
excludeResidual <- TRUE

genetic_correlation <- GeneticCorrBT(
    DataDir = DataDir, ResultDir = ResultDir, finput = finput, byCHR = byCHR,
    REMLalgo = 0, nitr = 10, phenofile = phenofile, cat_covarfile = NULL, quant_covarfile = NULL,
    partGRM = FALSE, autosome = TRUE, Xsome = TRUE, nGRM = 3,
    cripticut = 0.025, minMAF = NULL, maxMAF = NULL, excludeResidual = TRUE, ncores = ncores
)
genetic_correlation %>% head()
```

### `EstimateHerit()`

```{r}
data("Summary_Stat_Ex1", package = "GXwasR")
data("highLD_hg19", package = "GXwasR")
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
precomputedLD <- NULL
finput <- "GXwasR_example"
test.sumstats <- na.omit(Summary_Stat_Ex1[Summary_Stat_Ex1$TEST == "ADD", c(seq_len(4), 6:8)])
colnames(test.sumstats) <- c("chr", "rsid", "pos", "a1", "n_eff", "beta", "beta_se")
summarystat <- test.sumstats
ncores <- 3
model <- "GREML"
byCHR <- FALSE
r2_LD <- 0
LDSC_blocks <- 20
REMLalgo <- 0
nitr <- 3
cat_covarfile <- NULL
quant_covarfile <- NULL
prevalence <- 0.01
partGRM <- FALSE
autosome <- TRUE
Xsome <- TRUE
nGRM <- 3
cripticut <- 0.025
minMAF <- NULL
maxMAF <- NULL
hg <- "hg19"
PlotIndepSNP <- TRUE
IndepSNP_window_size <- 50
IndepSNP_step_size <- 5
IndepSNP_r2_threshold <- 0.02
highLD_regions <- highLD_hg19
H2 <- EstimateHerit(
    DataDir = DataDir, ResultDir = ResultDir, finput = finput,
    summarystat = NULL, ncores, model = "GREML", byCHR = TRUE, r2_LD = 0,
    LDSC_blocks = 20, REMLalgo = 0, nitr = 100, cat_covarfile = NULL, quant_covarfile = NULL,
    prevalence = 0.01, partGRM = FALSE, autosome = TRUE, Xsome = TRUE, nGRM = 3,
    cripticut = 0.025, minMAF = NULL, maxMAF = NULL, hg = "hg19", PlotIndepSNP = TRUE,
    IndepSNP_window_size = 50, IndepSNP_step_size = 5, IndepSNP_r2_threshold = 0.02,
    highLD_regions = highLD_hg19
)
H2 %>% head()
```

### `SexRegress()`
```{r overview-SexRegress}
data("Regression_Ex", package = "GXwasR")
fdata <- Regression_Ex
fdata$SEX <- as.factor(as.character(fdata$SEX))
response_index <- 1
regressor_index <- 2

x <- SexRegress(fdata, regressor_index, response_index)
x
```

### `FilterPlinkSample()`

```{r overview-FilterPlinkSample}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
foutput <- "casesPlink"
filter_sample <- "cases"
keep_remove_sample_file <- "samples_example"
keep <- FALSE

FilterPlinkSample(
    DataDir = DataDir, ResultDir = ResultDir,
    finput = finput, foutput = foutput, keep_remove_sample_file = keep_remove_sample_file,
    keep = keep
)
```

### `ComputeGeneticPC()`
```{r overview-ComputeGeneticPC}
data("highLD_hg19", package = "GXwasR")
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
highLD_regions <- highLD_hg19
ld_prunning <- "TRUE"
window_size <- 50
step_size <- 5
r2_threshold <- 0.02
countPC <- 20
## Genetic PC
GP <- ComputeGeneticPC(
    DataDir = DataDir, ResultDir = ResultDir,
    finput = finput, highLD_regions = highLD_hg19, countPC = 20
)
GP$PCs1 %>% head()
GP$plot
```

### `ClumpLD()`
```{r overview-ClumpLD}
data("Summary_Stat_Ex1", package = "GXwasR")
data("Summary_Stat_Ex2", package = "GXwasR")
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
SNPdata <- list(Summary_Stat_Ex1, Summary_Stat_Ex2)
clump_p1 <- 0.0001
clump_p2 <- 0.001
clump_r2 <- 0.5
clump_kb <- 250
byCHR <- TRUE
clumpedResult <- ClumpLD(
    DataDir, finput, SNPdata, ResultDir, clump_p1,
    clump_p2, clump_r2, clump_kb, byCHR
)
clumpedResult
```

### `GetMFPlink()`
```{r overview-GetMFPlink}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
foutput <- "Test_output"
sex <- "females"
x <- GetMFPlink(
    DataDir = DataDir, ResultDir = ResultDir,
    finput = finput, foutput = foutput, sex = sex,
    xplink = FALSE, autoplink = FALSE
)
x
```

### `plinkVCF()`

```{r overview-plinkVCF}
finput <- "GXwasR_example" # Plink file
foutput <- "GXwasR_example1"
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
PtoV <- TRUE
VtoP <- FALSE
Famfile <- NULL
PVbyCHR <- FALSE
plinkVCF(DataDir, ResultDir, finput, foutput, VtoP, PtoV, Famfile, PVbyCHR)
```

### `MergeRegion()`

```{r overview-MergeRegion}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput1 <- "GXwasR_example"
finput2 <- "GXwasR_example_imputed"
foutput <- "Test_output"
y <- MergeRegion(DataDir, ResultDir, finput1, finput2, foutput, use_common_snps = TRUE)
y
```

### `FilterAllele()`

```{r overview-FilterAllele}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
foutput <- "Filter_Test"
x <- FilterAllele(DataDir, ResultDir, finput, foutput)
x
```

### `PlinkSummary()`

```{r overview-PlinkSummary}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
x <- PlinkSummary(DataDir, ResultDir, finput)
x
```

### FilterSNP

```{r overview-FilterSNP}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
SNPvec <- c("rs6529954", "rs12858640", "rs5962098")
finput <- "GXwasR_example"
foutput <- "Filter_Test"
FilterSNP(DataDir, ResultDir, finput, foutput, SNPvec = SNPvec, extract = TRUE)
```

### `DummyCovar()`

```{r overview-DummyCovar}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
bfile <- "GXwasR_example"
incovar <- "covarfile_w_pc_age.txt"
outcovar <- "dummycovarfile"
dummy_covars <- DummyCovar(
    DataDir = DataDir, ResultDir = ResultDir,
    bfile = bfile, incovar = incovar,
    outcovar = outcovar
)
dummy_covars %>% head()
```

### `GXWASmiami()`

```{r overview-GXWASmiami}
data("Ffile", package = "GXwasR")
data("Mfile", package = "GXwasR")
FemaleWAS <- na.omit(Ffile[, c("SNP", "CHR", "BP", "P")])
colnames(FemaleWAS) <- c("SNP", "CHR", "POS", "pvalue")
MaleWAS <- na.omit(Mfile[, c("SNP", "CHR", "BP", "P")])
colnames(MaleWAS) <- c("SNP", "CHR", "POS", "pvalue")

GXWASmiami(FemaleWAS = FemaleWAS, MaleWAS = MaleWAS, snp_pval = 0.05)
```

### `SumstatGenCorr()`
```{r overview-SumstatGenCorr}
sumstat1 <- GXwasR:::simulateSumstats()
sumstat2 <- GXwasR:::simulateSumstats()
if (nzchar(Sys.getenv("UKB_IMPUTED_HAPMAP2_PATH"))) {
    res <- SumstatGenCorr(
        ResultDir = tempdir(),
        referenceLD = "UKB_imputed_hapmap2_SVD_eigen99_extraction",
        sumstat1 = sumstat1,
        sumstat2 = sumstat2,
        parallel = TRUE
    )
    res
}
```

### `LDPrune()`

```{r overview-LDPrune}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
prunedSNPs <- LDPrune(DataDir, finput, ResultDir, 50, 5, 0.2)
prunedSNPs %>% head()
```

### `executePlinkMAF()`

```{r overview-executePlinkMAF}
DataDir <- GXwasR:::GXwasR_data()
ResultDir <- tempdir()
finput <- "GXwasR_example"
maf_data <- executePlinkMAF(DataDir, ResultDir, finput)
maf_data %>% head()
```

### `ComputeLD()`

```{r overview-ComputeLD}
snpld <- ComputeLD(
    DataDir = GXwasR:::GXwasR_data(), ResultDir = tempdir(),
    finput = "GXwasR_example", ByCHR = TRUE, CHRnum = 1, r2_LD = 0.2
)
snpld %>% head()
```

# Citing `GXwasR`

We hope that `r BiocStyle::Biocpkg("GXwasR")` will be useful for your research. Please use the following information to cite the package and the overall approach. Thank you!

```{r "citation"}
## Citation info
citation("GXwasR")
```

# Reproducibility

The `r BiocStyle::Biocpkg("GXwasR")` package `r Citep(bib[["GXwasR"]])` was made possible thanks to:

* R `r Citep(bib[["R"]])`
* `r BiocStyle::Biocpkg("BiocStyle")` `r Citep(bib[["BiocStyle"]])`
* `r BiocStyle::CRANpkg("knitr")` `r Citep(bib[["knitr"]])`
* `r BiocStyle::CRANpkg("RefManageR")` `r Citep(bib[["RefManageR"]])`
* `r BiocStyle::CRANpkg("rmarkdown")` `r Citep(bib[["rmarkdown"]])`
* `r BiocStyle::CRANpkg("sessioninfo")` `r Citep(bib[["sessioninfo"]])`
* `r BiocStyle::CRANpkg("testthat")` `r Citep(bib[["testthat"]])`

`R` session information.

```{r reproduce3, echo=FALSE}
## Session info
library("sessioninfo")
options(width = 120)
session_info()
```

# Bibliography

This vignette was generated using `r BiocStyle::Biocpkg("BiocStyle")` `r Citep(bib[["BiocStyle"]])`
with `r BiocStyle::CRANpkg("knitr")` `r Citep(bib[["knitr"]])` and `r BiocStyle::CRANpkg("rmarkdown")` `r Citep(bib[["rmarkdown"]])` running behind the scenes.

Citations made with `r BiocStyle::CRANpkg("RefManageR")` `r Citep(bib[["RefManageR"]])`.

```{r vignetteBiblio, results = "asis", echo = FALSE, warning = FALSE, message = FALSE}
## Print bibliography
RefManageR::PrintBibliography(bib, .opts = list(hyperlink = "to.doc", style = "html"))
```
