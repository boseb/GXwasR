# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, master]
  pull_request:

name: R-CMD-check.yaml

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macos-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          # - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'release'}
          # - {os: ubuntu-latest,   r: 'oldrel-1'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
      
      # Install PLINK binary
      - name: Install PLINK
        shell: bash
        run: |
          mkdir -p "$HOME/.local/bin"
          if [[ "${RUNNER_OS}" == "Linux" ]]; then
            wget -q https://s3.amazonaws.com/plink1-assets/plink_linux_x86_64_20220402.zip -O plink.zip
            unzip -j plink.zip plink -d "$HOME/.local/bin"
          elif [[ "${RUNNER_OS}" == "macOS" ]]; then
            wget -q https://s3.amazonaws.com/plink1-assets/plink_mac_20230116.zip -O plink.zip
            unzip -j plink.zip plink -d "$HOME/.local/bin"
          elif [[ "${RUNNER_OS}" == "Windows" ]]; then
            export BIN_DIR="$USERPROFILE/.local/bin"
            mkdir -p "$BIN_DIR"
            curl -LO https://s3.amazonaws.com/plink1-assets/plink_win64_20230116.zip
            unzip -j plink_win64_20230116.zip plink.exe -d "$BIN_DIR"
            chmod +x "$BIN_DIR"/plink.exe || true
            echo "$BIN_DIR" >> $GITHUB_PATH
            echo "PLINK_PATH=$BIN_DIR/plink.exe" >> $GITHUB_ENV
          fi
          chmod +x "$HOME/.local/bin"/plink* || true
      
      # Install GCTA binary
      - name: Install GCTA
        shell: bash
        run: |
          mkdir -p "$HOME/.local/bin"
          if [[ "${RUNNER_OS}" == "Linux" ]]; then
            wget -q https://yanglab.westlake.edu.cn/software/gcta/bin/gcta-1.94.4-linux-kernel-3-x86_64.zip -O gcta.zip
            unzip -j gcta.zip -d "$HOME/.local/bin"
            chmod +x "$HOME/.local/bin/gcta64"
          elif [[ "${RUNNER_OS}" == "macOS" ]]; then
            wget -q https://yanglab.westlake.edu.cn/software/gcta/bin/gcta-1.94.1-macOS-x86_64.zip -O gcta.zip
            unzip -j gcta.zip -d "$HOME/.local/bin"
            mv "$HOME/.local/bin/"gcta-1.* "$HOME/.local/bin/gcta64"
            chmod +x "$HOME/.local/bin/gcta64"
          elif [[ "${RUNNER_OS}" == "Windows" ]]; then
            export BIN_DIR="$USERPROFILE/.local/bin"
            mkdir -p "$BIN_DIR"
            curl -LO https://yanglab.westlake.edu.cn/software/gcta/bin/gcta-1.94.1-Win-x86_64.zip
            unzip gcta-1.94.1-Win-x86_64.zip -d gcta_extracted
            cp gcta_extracted/gcta-1.94.1-Win-x86_64/exe/gcta64.exe "$BIN_DIR/gcta64.exe"
            chmod +x "$BIN_DIR/gcta64.exe" || true
            echo "$BIN_DIR" >> $GITHUB_PATH
            echo "GCTA_PATH=$BIN_DIR/gcta64.exe" >> $GITHUB_ENV
          fi

      - uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          error-on: '"error"'
        